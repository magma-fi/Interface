{
  "version": 3,
  "sources": ["../../../../../node_modules/@ethersproject/web/src.ts/_version.ts", "../../../../../node_modules/@ethersproject/web/src.ts/browser-geturl.ts", "../../../../../node_modules/@ethersproject/web/src.ts/index.ts", "../../../../../node_modules/bech32/index.js", "../../../../../node_modules/@ethersproject/providers/src.ts/_version.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/formatter.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/base-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/browser-ws.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/ankr-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/infura-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/web3-provider.ts", "../../../../../node_modules/@ethersproject/providers/src.ts/index.ts"],
  "sourcesContent": ["export const version = \"web/5.7.1\";\n", "\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n", "\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n", "'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n", "export const version = \"providers/5.7.2\";\n", "\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n", "\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n", "\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n", "\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n", "\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n", "\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n", "\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\"\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n", "\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n", "\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n", "\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || typeof(result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string | null;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n", "\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            if (method === \"call\" && params.blockTag) {\n                return provider[method](params.transaction, params.blockTag);\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n", "\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n", "\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n", "\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n", "/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n", "\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n", "\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n", "\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\": case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\": case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"],
  "mappings": "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",
  "names": ["init_lib", "timer", "stall", "body", "timeout", "init_lib", "encode", "x", "decode", "version", "init_version", "logger", "init_lib", "init_version", "version", "value", "logger", "topic", "init_lib", "init_version", "version", "bech32", "now", "receipt", "__awaiter", "timer", "blockNumber", "avatar", "logger", "init_lib", "init_version", "version", "__awaiter", "network", "error", "getNetwork", "result", "poll", "init_version", "logger", "version", "logger", "init_lib", "init_version", "version", "param", "event", "subId", "logger", "init_lib", "init_version", "version", "logger", "init_lib", "init_version", "version", "logger", "defaultApiKey", "init_version", "version", "logger", "init_version", "version", "getResult", "checkError", "logger", "init_lib", "init_version", "version", "url", "logger", "stall", "timer", "now", "init_lib", "init_version", "version", "i", "logger", "init_lib", "init_version", "version", "init_lib", "request", "inflightRequest", "logger", "defaultApiKey", "init_version", "version", "logger", "init_version", "version", "error", "logger", "init_lib", "init_version", "version", "lib_exports", "logger", "init_lib", "init_version", "version"]
}
