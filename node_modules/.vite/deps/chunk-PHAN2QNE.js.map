{
  "version": 3,
  "sources": ["node-modules-polyfills:assert", "node-modules-polyfills-commonjs:assert", "../../../../lib-base/src/Decimal.ts", "../../../../lib-base/src/constants.ts", "../../../../lib-base/src/Trove.ts", "../../../../lib-base/src/StabilityDeposit.ts", "../../../../lib-base/src/LQTYStake.ts", "../../../../lib-base/src/Fees.ts", "../../../../lib-base/dist/src/ReadableLiquity.js", "../../../../lib-base/dist/src/ObservableLiquity.js", "../../../../lib-base/src/TransactableLiquity.ts", "../../../../lib-base/src/SendableLiquity.ts", "../../../../lib-base/dist/src/PopulatableLiquity.js", "../../../../lib-base/src/LiquityStore.ts", "../../../../lib-base/src/_CachedReadableLiquity.ts", "../../../../lib-base/index.ts"],
  "sourcesContent": ["\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport {isBuffer} from 'buffer';\nimport {isPrimitive, inherits, isError, isFunction, isRegExp, isDate, inspect as utilInspect} from 'util';\nvar pSlice = Array.prototype.slice;\nvar _functionsHaveNames;\nfunction functionsHaveNames() {\n  if (typeof _functionsHaveNames !== 'undefined') {\n    return _functionsHaveNames;\n  }\n  return _functionsHaveNames = (function () {\n    return function foo() {}.name === 'foo';\n  }());\n}\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nfunction assert(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nexport default assert;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames()) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = AssertionError;\nexport function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n}\n\n// assert.AssertionError instanceof Error\ninherits(AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames() || !isFunction(something)) {\n    return utilInspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nexport function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nexport function ok(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nassert.ok = ok;\nexport {ok as assert};\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\nassert.equal = equal;\nexport function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', equal);\n}\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\nassert.notEqual = notEqual;\nexport function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', notEqual);\n  }\n}\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\nassert.deepEqual = deepEqual;\nexport function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', deepEqual);\n  }\n}\nassert.deepStrictEqual = deepStrictEqual;\nexport function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);\n  }\n}\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (isDate(actual) && isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (isRegExp(actual) && isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (isPrimitive(a) || isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\nassert.notDeepEqual = notDeepEqual;\nexport function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);\n  }\n}\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nexport function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\nassert.strictEqual = strictEqual;\nexport function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', strictEqual);\n  }\n}\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\nassert.notStrictEqual = notStrictEqual;\nexport function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', notStrictEqual);\n  }\n}\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\nassert.throws = throws;\nexport function throws(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = doesNotThrow;\nexport function doesNotThrow(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}\n\nassert.ifError = ifError;\nexport function ifError(err) {\n  if (err) throw err;\n}\n", "\nconst polyfill = require('assert')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "import assert from \"assert\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nconst getDigits = (numDigits: number) => TEN.pow(numDigits);\n\nconst MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nconst PRECISION = 18;\nconst ONE = BigNumber.from(1);\nconst TEN = BigNumber.from(10);\nconst DIGITS = getDigits(PRECISION);\n\nconst stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nconst trailingZeros = /0*$/;\nconst magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n\nconst roundedMul = (x: BigNumber, y: BigNumber) => x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n\n/**\n * Types that can be converted into a Decimal.\n *\n * @public\n */\nexport type Decimalish = Decimal | number | string;\n\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\nexport class Decimal {\n  static readonly INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\n  static readonly ZERO = Decimal.from(0);\n  static readonly HALF = Decimal.from(0.5);\n  static readonly ONE = Decimal.from(1);\n\n  private readonly _bigNumber: BigNumber;\n\n  /** @internal */\n  get hex(): string {\n    return this._bigNumber.toHexString();\n  }\n\n  /** @internal */\n  get bigNumber(): string {\n    return this._bigNumber.toString();\n  }\n\n  private constructor(bigNumber: BigNumber) {\n    if (bigNumber.isNegative()) {\n      throw new Error(\"negatives not supported by Decimal\");\n    }\n\n    this._bigNumber = bigNumber;\n  }\n\n  static fromBigNumberString(bigNumberString: string): Decimal {\n    return new Decimal(BigNumber.from(bigNumberString));\n  }\n\n  private static _fromString(representation: string): Decimal {\n    if (!representation || !representation.match(stringRepresentationFormat)) {\n      throw new Error(`bad decimal format: \"${representation}\"`);\n    }\n\n    if (representation.includes(\"e\")) {\n      // eslint-disable-next-line prefer-const\n      let [coefficient, exponent] = representation.split(\"e\");\n\n      if (exponent.startsWith(\"-\")) {\n        return new Decimal(\n          Decimal._fromString(coefficient)._bigNumber.div(\n            TEN.pow(BigNumber.from(exponent.substr(1)))\n          )\n        );\n      }\n\n      if (exponent.startsWith(\"+\")) {\n        exponent = exponent.substr(1);\n      }\n\n      return new Decimal(\n        Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(BigNumber.from(exponent)))\n      );\n    }\n\n    if (!representation.includes(\".\")) {\n      return new Decimal(BigNumber.from(representation).mul(DIGITS));\n    }\n\n    // eslint-disable-next-line prefer-const\n    let [characteristic, mantissa] = representation.split(\".\");\n\n    if (mantissa.length < PRECISION) {\n      mantissa += \"0\".repeat(PRECISION - mantissa.length);\n    } else {\n      mantissa = mantissa.substr(0, PRECISION);\n    }\n\n    return new Decimal(\n      BigNumber.from(characteristic || 0)\n        .mul(DIGITS)\n        .add(mantissa)\n    );\n  }\n\n  static from(decimalish: Decimalish): Decimal {\n    if ((typeof decimalish) === \"object\" && decimalish instanceof BigNumber) {\n      console.debug(\"lib-base: 转换大数时传入了BigNumber\", decimalish);\n      return Decimal.from(decimalish.toString());\n    }\n\n    switch (typeof decimalish) {\n      case \"object\":\n        console.debug(\"lib-base: 转换大数时进行判断\", decimalish instanceof Decimal)\n        if (decimalish instanceof Decimal) {\n          return decimalish;\n        } else {\n          console.debug(\"lib-base: 转换大数时报错0\", decimalish, typeof decimalish);\n          throw new Error(\"invalid Decimalish value\");\n        }\n      case \"string\":\n        return Decimal._fromString(decimalish);\n      case \"number\":\n        return Decimal._fromString(decimalish.toString());\n      default:\n        console.debug(\"lib-base: 转换大数时报错1\", decimalish, typeof decimalish);\n        throw new Error(\"invalid Decimalish value\");\n    }\n  }\n\n  private _toStringWithAutomaticPrecision() {\n    const characteristic = this._bigNumber.div(DIGITS);\n    const mantissa = this._bigNumber.mod(DIGITS);\n\n    if (mantissa.isZero()) {\n      return characteristic.toString();\n    } else {\n      const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n      const trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n      return characteristic.toString() + \".\" + trimmedMantissa;\n    }\n  }\n\n  private _roundUp(precision: number) {\n    const halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n    return this._bigNumber.add(halfDigit);\n  }\n\n  private _toStringWithPrecision(precision: number) {\n    if (precision < 0) {\n      throw new Error(\"precision must not be negative\");\n    }\n\n    const value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n    const characteristic = value.div(DIGITS);\n    const mantissa = value.mod(DIGITS);\n\n    if (precision === 0) {\n      return characteristic.toString();\n    } else {\n      const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n      const trimmedMantissa = paddedMantissa.substr(0, precision);\n      return characteristic.toString() + \".\" + trimmedMantissa;\n    }\n  }\n\n  toString(precision?: number): string {\n    if (this.infinite) {\n      return \"∞\";\n    } else if (precision !== undefined) {\n      return this._toStringWithPrecision(precision);\n    } else {\n      return this._toStringWithAutomaticPrecision();\n    }\n  }\n\n  prettify(precision = 2): string {\n    const [characteristic, mantissa] = this.toString(precision).split(\".\");\n    const prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n\n    return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n  }\n\n  shorten(): string {\n    const characteristicLength = this.toString(0).length;\n    const magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n\n    const precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n    const normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n\n    return normalized.prettify(precision) + magnitudes[magnitude];\n  }\n\n  add(addend: Decimalish): Decimal {\n    return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n  }\n\n  sub(subtrahend: Decimalish): Decimal {\n    return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n  }\n\n  mul(multiplier: Decimalish): Decimal {\n    return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n  }\n\n  div(divider: Decimalish): Decimal {\n    divider = Decimal.from(divider);\n\n    if (divider.isZero) {\n      return Decimal.INFINITY;\n    }\n\n    return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n  }\n\n  /** @internal */\n  _divCeil(divider: Decimalish): Decimal {\n    divider = Decimal.from(divider);\n\n    if (divider.isZero) {\n      return Decimal.INFINITY;\n    }\n\n    return new Decimal(\n      this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber)\n    );\n  }\n\n  mulDiv(multiplier: Decimalish, divider: Decimalish): Decimal {\n    multiplier = Decimal.from(multiplier);\n    divider = Decimal.from(divider);\n\n    if (divider.isZero) {\n      return Decimal.INFINITY;\n    }\n\n    return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n  }\n\n  pow(exponent: number): Decimal {\n    assert(Number.isInteger(exponent));\n    assert(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n\n    if (exponent === 0) {\n      return Decimal.ONE;\n    }\n\n    if (exponent === 1) {\n      return this;\n    }\n\n    let x = this._bigNumber;\n    let y = DIGITS;\n\n    for (; exponent > 1; exponent >>>= 1) {\n      if (exponent & 1) {\n        y = roundedMul(x, y);\n      }\n\n      x = roundedMul(x, x);\n    }\n\n    return new Decimal(roundedMul(x, y));\n  }\n\n  get isZero(): boolean {\n    return this._bigNumber.isZero();\n  }\n\n  get zero(): this | undefined {\n    if (this.isZero) {\n      return this;\n    }\n  }\n\n  get nonZero(): this | undefined {\n    if (!this.isZero) {\n      return this;\n    }\n  }\n\n  get infinite(): this | undefined {\n    if (this.eq(Decimal.INFINITY)) {\n      return this;\n    }\n  }\n\n  get finite(): this | undefined {\n    if (!this.eq(Decimal.INFINITY)) {\n      return this;\n    }\n  }\n\n  /** @internal */\n  get absoluteValue(): this {\n    return this;\n  }\n\n  lt(that: Decimalish): boolean {\n    return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n  }\n\n  eq(that: Decimalish): boolean {\n    return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n  }\n\n  gt(that: Decimalish): boolean {\n    return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n  }\n\n  gte(that: Decimalish): boolean {\n    return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n  }\n\n  lte(that: Decimalish): boolean {\n    return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n  }\n\n  static min(a: Decimalish, b: Decimalish): Decimal {\n    a = Decimal.from(a);\n    b = Decimal.from(b);\n\n    return a.lt(b) ? a : b;\n  }\n\n  static max(a: Decimalish, b: Decimalish): Decimal {\n    a = Decimal.from(a);\n    b = Decimal.from(b);\n\n    return a.gt(b) ? a : b;\n  }\n}\n\ntype DifferenceRepresentation = { sign: \"\" | \"+\" | \"-\"; absoluteValue: Decimal };\n\n/** @alpha */\nexport class Difference {\n  private _number?: DifferenceRepresentation;\n\n  private constructor(number?: DifferenceRepresentation) {\n    this._number = number;\n  }\n\n  static between(d1: Decimalish | undefined, d2: Decimalish | undefined): Difference {\n    if (d1 === undefined || d2 === undefined) {\n      return new Difference(undefined);\n    }\n\n    d1 = Decimal.from(d1);\n    d2 = Decimal.from(d2);\n\n    if (d1.infinite && d2.infinite) {\n      return new Difference(undefined);\n    } else if (d1.infinite) {\n      return new Difference({ sign: \"+\", absoluteValue: d1 });\n    } else if (d2.infinite) {\n      return new Difference({ sign: \"-\", absoluteValue: d2 });\n    } else if (d1.gt(d2)) {\n      return new Difference({ sign: \"+\", absoluteValue: Decimal.from(d1).sub(d2) });\n    } else if (d2.gt(d1)) {\n      return new Difference({ sign: \"-\", absoluteValue: Decimal.from(d2).sub(d1) });\n    } else {\n      return new Difference({ sign: \"\", absoluteValue: Decimal.ZERO });\n    }\n  }\n\n  toString(precision?: number): string {\n    if (!this._number) {\n      return \"N/A\";\n    }\n\n    return this._number.sign + this._number.absoluteValue.toString(precision);\n  }\n\n  prettify(precision?: number): string {\n    if (!this._number) {\n      return this.toString();\n    }\n\n    return this._number.sign + this._number.absoluteValue.prettify(precision);\n  }\n\n  mul(multiplier: Decimalish): Difference {\n    return new Difference(\n      this._number && {\n        sign: this._number.sign,\n        absoluteValue: this._number.absoluteValue.mul(multiplier)\n      }\n    );\n  }\n\n  get nonZero(): this | undefined {\n    return this._number?.absoluteValue.nonZero && this;\n  }\n\n  get positive(): this | undefined {\n    return this._number?.sign === \"+\" ? this : undefined;\n  }\n\n  get negative(): this | undefined {\n    return this._number?.sign === \"-\" ? this : undefined;\n  }\n\n  get absoluteValue(): Decimal | undefined {\n    return this._number?.absoluteValue;\n  }\n\n  get infinite(): this | undefined {\n    return this._number?.absoluteValue.infinite && this;\n  }\n\n  get finite(): this | undefined {\n    return this._number?.absoluteValue.finite && this;\n  }\n}\n\n/** @alpha */\nexport class Percent<\n  T extends {\n    infinite?: T | undefined;\n    absoluteValue?: A | undefined;\n    mul?(hundred: 100): T;\n    toString(precision?: number): string;\n  },\n  A extends {\n    gte(n: string): boolean;\n  }\n> {\n  private _percent: T;\n\n  public constructor(ratio: T) {\n    this._percent = ratio.infinite || (ratio.mul && ratio.mul(100)) || ratio;\n  }\n\n  nonZeroish(precision: number): this | undefined {\n    const zeroish = `0.${\"0\".repeat(precision)}5`;\n\n    if (this._percent.absoluteValue?.gte(zeroish)) {\n      return this;\n    }\n  }\n\n  toString(precision: number): string {\n    return (\n      this._percent.toString(precision) +\n      (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\")\n    );\n  }\n\n  prettify(): string {\n    if (this._percent.absoluteValue?.gte(\"1000\")) {\n      return this.toString(0);\n    } else if (this._percent.absoluteValue?.gte(\"10\")) {\n      return this.toString(1);\n    } else {\n      return this.toString(2);\n    }\n  }\n}\n", "import { Decimal } from \"./Decimal\";\n\n/**\n * Total collateral ratio below which recovery mode is triggered.\n *\n * @public\n */\nexport const CRITICAL_COLLATERAL_RATIO = Decimal.from(1.5);\n\n/**\n * Collateral ratio below which a Trove can be liquidated in normal mode.\n *\n * @public\n */\nexport const MINIMUM_COLLATERAL_RATIO = Decimal.from(1.1);\n\n/**\n * Amount of LUSD that's reserved for compensating the liquidator of a Trove.\n *\n * @public\n */\n// export const LUSD_LIQUIDATION_RESERVE = Decimal.from(200);\nexport const LUSD_LIQUIDATION_RESERVE = Decimal.from(1);\n\n/**\n * A Trove must always have at least this much debt on top of the\n * {@link LUSD_LIQUIDATION_RESERVE | liquidation reserve}.\n *\n * @remarks\n * Any transaction that would result in a Trove with less net debt than this will be reverted.\n *\n * @public\n */\nexport const LUSD_MINIMUM_NET_DEBT = Decimal.from(1800);\n\n/**\n * A Trove must always have at least this much debt.\n *\n * @remarks\n * Any transaction that would result in a Trove with less debt than this will be reverted.\n *\n * @public\n */\nexport const LUSD_MINIMUM_DEBT = LUSD_LIQUIDATION_RESERVE.add(LUSD_MINIMUM_NET_DEBT);\n\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never decay below.\n *\n * @remarks\n * Note that the borrowing rate can still be lower than this during recovery mode, when it's\n * overridden by zero.\n *\n * @public\n */\nexport const MINIMUM_BORROWING_RATE = Decimal.from(0.005);\n\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never exceed.\n *\n * @public\n */\nexport const MAXIMUM_BORROWING_RATE = Decimal.from(0.05);\n\n/**\n * Value that the {@link Fees.redemptionRate | redemption rate} will never decay below.\n *\n * @public\n */\nexport const MINIMUM_REDEMPTION_RATE = Decimal.from(0.005);\n", "import assert from \"assert\";\n\nimport { Decimal, Decimalish } from \"./Decimal\";\n\nimport {\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n  LUSD_LIQUIDATION_RESERVE,\n  MINIMUM_BORROWING_RATE\n} from \"./constants\";\n\n/** @internal */ export type _CollateralDeposit<T> = { depositCollateral: T };\n/** @internal */ export type _CollateralWithdrawal<T> = { withdrawCollateral: T };\n/** @internal */ export type _LUSDBorrowing<T> = { borrowLUSD: T };\n/** @internal */ export type _LUSDRepayment<T> = { repayLUSD: T };\n\n/** @internal */ export type _NoCollateralDeposit = Partial<_CollateralDeposit<undefined>>;\n/** @internal */ export type _NoCollateralWithdrawal = Partial<_CollateralWithdrawal<undefined>>;\n/** @internal */ export type _NoLUSDBorrowing = Partial<_LUSDBorrowing<undefined>>;\n/** @internal */ export type _NoLUSDRepayment = Partial<_LUSDRepayment<undefined>>;\n\n/** @internal */\nexport type _CollateralChange<T> =\n  | (_CollateralDeposit<T> & _NoCollateralWithdrawal)\n  | (_CollateralWithdrawal<T> & _NoCollateralDeposit);\n\n/** @internal */\nexport type _NoCollateralChange = _NoCollateralDeposit & _NoCollateralWithdrawal;\n\n/** @internal */\nexport type _DebtChange<T> =\n  | (_LUSDBorrowing<T> & _NoLUSDRepayment)\n  | (_LUSDRepayment<T> & _NoLUSDBorrowing);\n\n/** @internal */\nexport type _NoDebtChange = _NoLUSDBorrowing & _NoLUSDRepayment;\n\n/**\n * Parameters of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n *\n * @remarks\n * The type parameter `T` specifies the allowed value type(s) of the particular `TroveCreationParams`\n * object's properties.\n *\n * <h2>Properties</h2>\n *\n * <table>\n *\n *   <tr>\n *     <th> Property </th>\n *     <th> Type </th>\n *     <th> Description </th>\n *   </tr>\n *\n *   <tr>\n *     <td> depositCollateral </td>\n *     <td> T </td>\n *     <td> The amount of collateral that's deposited. </td>\n *   </tr>\n *\n *   <tr>\n *     <td> borrowLUSD </td>\n *     <td> T </td>\n *     <td> The amount of LUSD that's borrowed. </td>\n *   </tr>\n *\n * </table>\n *\n * @public\n */\nexport type TroveCreationParams<T = unknown> = _CollateralDeposit<T> &\n  _NoCollateralWithdrawal &\n  _LUSDBorrowing<T> &\n  _NoLUSDRepayment;\n\n/**\n * Parameters of a {@link TransactableLiquity.closeTrove | closeTrove()} transaction.\n *\n * @remarks\n * The type parameter `T` specifies the allowed value type(s) of the particular `TroveClosureParams`\n * object's properties.\n *\n * <h2>Properties</h2>\n *\n * <table>\n *\n *   <tr>\n *     <th> Property </th>\n *     <th> Type </th>\n *     <th> Description </th>\n *   </tr>\n *\n *   <tr>\n *     <td> withdrawCollateral </td>\n *     <td> T </td>\n *     <td> The amount of collateral that's withdrawn. </td>\n *   </tr>\n *\n *   <tr>\n *     <td> repayLUSD? </td>\n *     <td> T </td>\n *     <td> <i>(Optional)</i> The amount of LUSD that's repaid. </td>\n *   </tr>\n *\n * </table>\n *\n * @public\n */\nexport type TroveClosureParams<T> = _CollateralWithdrawal<T> &\n  _NoCollateralDeposit &\n  Partial<_LUSDRepayment<T>> &\n  _NoLUSDBorrowing;\n\n/**\n * Parameters of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction.\n *\n * @remarks\n * The type parameter `T` specifies the allowed value type(s) of the particular\n * `TroveAdjustmentParams` object's properties.\n *\n * Even though all properties are optional, a valid `TroveAdjustmentParams` object must define at\n * least one.\n *\n * Defining both `depositCollateral` and `withdrawCollateral`, or both `borrowLUSD` and `repayLUSD`\n * at the same time is disallowed, and will result in a type-checking error.\n *\n * <h2>Properties</h2>\n *\n * <table>\n *\n *   <tr>\n *     <th> Property </th>\n *     <th> Type </th>\n *     <th> Description </th>\n *   </tr>\n *\n *   <tr>\n *     <td> depositCollateral? </td>\n *     <td> T </td>\n *     <td> <i>(Optional)</i> The amount of collateral that's deposited. </td>\n *   </tr>\n *\n *   <tr>\n *     <td> withdrawCollateral? </td>\n *     <td> T </td>\n *     <td> <i>(Optional)</i> The amount of collateral that's withdrawn. </td>\n *   </tr>\n *\n *   <tr>\n *     <td> borrowLUSD? </td>\n *     <td> T </td>\n *     <td> <i>(Optional)</i> The amount of LUSD that's borrowed. </td>\n *   </tr>\n *\n *   <tr>\n *     <td> repayLUSD? </td>\n *     <td> T </td>\n *     <td> <i>(Optional)</i> The amount of LUSD that's repaid. </td>\n *   </tr>\n *\n * </table>\n *\n * @public\n */\nexport type TroveAdjustmentParams<T = unknown> =\n  | (_CollateralChange<T> & _NoDebtChange)\n  | (_DebtChange<T> & _NoCollateralChange)\n  | (_CollateralChange<T> & _DebtChange<T>);\n\n/**\n * Describes why a Trove could not be created.\n *\n * @remarks\n * See {@link TroveChange}.\n *\n * <h2>Possible values</h2>\n *\n * <table>\n *\n *   <tr>\n *     <th> Value </th>\n *     <th> Reason </th>\n *   </tr>\n *\n *   <tr>\n *     <td> \"missingLiquidationReserve\" </td>\n *     <td> A Trove's debt cannot be less than the liquidation reserve. </td>\n *   </tr>\n *\n * </table>\n *\n * More errors may be added in the future.\n *\n * @public\n */\nexport type TroveCreationError = \"missingLiquidationReserve\";\n\n/**\n * Represents the change between two Trove states.\n *\n * @remarks\n * Returned by {@link Trove.whatChanged}.\n *\n * Passed as a parameter to {@link Trove.apply}.\n *\n * @public\n */\nexport type TroveChange<T> =\n  | { type: \"invalidCreation\"; invalidTrove: Trove; error: TroveCreationError }\n  | { type: \"creation\"; params: TroveCreationParams<T> }\n  | { type: \"closure\"; params: TroveClosureParams<T> }\n  | { type: \"adjustment\"; params: TroveAdjustmentParams<T>; setToZero?: \"collateral\" | \"debt\" };\n\n// This might seem backwards, but this way we avoid spamming the .d.ts and generated docs\ntype InvalidTroveCreation = Extract<TroveChange<never>, { type: \"invalidCreation\" }>;\ntype TroveCreation<T> = Extract<TroveChange<T>, { type: \"creation\" }>;\ntype TroveClosure<T> = Extract<TroveChange<T>, { type: \"closure\" }>;\ntype TroveAdjustment<T> = Extract<TroveChange<T>, { type: \"adjustment\" }>;\n\nconst invalidTroveCreation = (\n  invalidTrove: Trove,\n  error: TroveCreationError\n): InvalidTroveCreation => ({\n  type: \"invalidCreation\",\n  invalidTrove,\n  error\n});\n\nconst troveCreation = <T>(params: TroveCreationParams<T>): TroveCreation<T> => ({\n  type: \"creation\",\n  params\n});\n\nconst troveClosure = <T>(params: TroveClosureParams<T>): TroveClosure<T> => ({\n  type: \"closure\",\n  params\n});\n\nconst troveAdjustment = <T>(\n  params: TroveAdjustmentParams<T>,\n  setToZero?: \"collateral\" | \"debt\"\n): TroveAdjustment<T> => ({\n  type: \"adjustment\",\n  params,\n  setToZero\n});\n\nconst valueIsDefined = <T>(entry: [string, T | undefined]): entry is [string, T] =>\n  entry[1] !== undefined;\n\ntype AllowedKey<T> = Exclude<\n  {\n    [P in keyof T]: T[P] extends undefined ? never : P;\n  }[keyof T],\n  undefined\n>;\n\nconst allowedTroveCreationKeys: AllowedKey<TroveCreationParams>[] = [\n  \"depositCollateral\",\n  \"borrowLUSD\"\n];\n\nfunction checkAllowedTroveCreationKeys<T>(\n  entries: [string, T][]\n): asserts entries is [AllowedKey<TroveCreationParams>, T][] {\n  const badKeys = entries\n    .filter(([k]) => !(allowedTroveCreationKeys as string[]).includes(k))\n    .map(([k]) => `'${k}'`);\n\n  if (badKeys.length > 0) {\n    throw new Error(`TroveCreationParams: property ${badKeys.join(\", \")} not allowed`);\n  }\n}\n\nconst troveCreationParamsFromEntries = <T>(\n  entries: [AllowedKey<TroveCreationParams>, T][]\n): TroveCreationParams<T> => {\n  const params = Object.fromEntries(entries) as Record<AllowedKey<TroveCreationParams>, T>;\n  const missingKeys = allowedTroveCreationKeys.filter(k => !(k in params)).map(k => `'${k}'`);\n\n  if (missingKeys.length > 0) {\n    throw new Error(`TroveCreationParams: property ${missingKeys.join(\", \")} missing`);\n  }\n\n  return params;\n};\n\nconst decimalize = <T>([k, v]: [T, Decimalish]): [T, Decimal] => [k, Decimal.from(v)];\nconst nonZero = <T>([, v]: [T, Decimal]): boolean => !v.isZero;\n\n/** @internal */\nexport const _normalizeTroveCreation = (\n  params: Record<string, Decimalish | undefined>\n): TroveCreationParams<Decimal> => {\n  const definedEntries = Object.entries(params).filter(valueIsDefined);\n  checkAllowedTroveCreationKeys(definedEntries);\n  const nonZeroEntries = definedEntries.map(decimalize);\n\n  return troveCreationParamsFromEntries(nonZeroEntries);\n};\n\nconst allowedTroveAdjustmentKeys: AllowedKey<TroveAdjustmentParams>[] = [\n  \"depositCollateral\",\n  \"withdrawCollateral\",\n  \"borrowLUSD\",\n  \"repayLUSD\"\n];\n\nfunction checkAllowedTroveAdjustmentKeys<T>(\n  entries: [string, T][]\n): asserts entries is [AllowedKey<TroveAdjustmentParams>, T][] {\n  const badKeys = entries\n    .filter(([k]) => !(allowedTroveAdjustmentKeys as string[]).includes(k))\n    .map(([k]) => `'${k}'`);\n\n  if (badKeys.length > 0) {\n    throw new Error(`TroveAdjustmentParams: property ${badKeys.join(\", \")} not allowed`);\n  }\n}\n\nconst collateralChangeFrom = <T>({\n  depositCollateral,\n  withdrawCollateral\n}: Partial<Record<AllowedKey<TroveAdjustmentParams>, T>>): _CollateralChange<T> | undefined => {\n  if (depositCollateral !== undefined && withdrawCollateral !== undefined) {\n    throw new Error(\n      \"TroveAdjustmentParams: 'depositCollateral' and 'withdrawCollateral' \" +\n        \"can't be present at the same time\"\n    );\n  }\n\n  if (depositCollateral !== undefined) {\n    return { depositCollateral };\n  }\n\n  if (withdrawCollateral !== undefined) {\n    return { withdrawCollateral };\n  }\n};\n\nconst debtChangeFrom = <T>({\n  borrowLUSD,\n  repayLUSD\n}: Partial<Record<AllowedKey<TroveAdjustmentParams>, T>>): _DebtChange<T> | undefined => {\n  if (borrowLUSD !== undefined && repayLUSD !== undefined) {\n    throw new Error(\n      \"TroveAdjustmentParams: 'borrowLUSD' and 'repayLUSD' can't be present at the same time\"\n    );\n  }\n\n  if (borrowLUSD !== undefined) {\n    return { borrowLUSD };\n  }\n\n  if (repayLUSD !== undefined) {\n    return { repayLUSD };\n  }\n};\n\nconst troveAdjustmentParamsFromEntries = <T>(\n  entries: [AllowedKey<TroveAdjustmentParams>, T][]\n): TroveAdjustmentParams<T> => {\n  const params = Object.fromEntries(entries) as Partial<\n    Record<AllowedKey<TroveAdjustmentParams>, T>\n  >;\n\n  const collateralChange = collateralChangeFrom(params);\n  const debtChange = debtChangeFrom(params);\n\n  if (collateralChange !== undefined && debtChange !== undefined) {\n    return { ...collateralChange, ...debtChange };\n  }\n\n  if (collateralChange !== undefined) {\n    return collateralChange;\n  }\n\n  if (debtChange !== undefined) {\n    return debtChange;\n  }\n\n  throw new Error(\"TroveAdjustmentParams: must include at least one non-zero parameter\");\n};\n\n/** @internal */\nexport const _normalizeTroveAdjustment = (\n  params: Record<string, Decimalish | undefined>\n): TroveAdjustmentParams<Decimal> => {\n  const definedEntries = Object.entries(params).filter(valueIsDefined);\n  checkAllowedTroveAdjustmentKeys(definedEntries);\n  const nonZeroEntries = definedEntries.map(decimalize).filter(nonZero);\n\n  return troveAdjustmentParamsFromEntries(nonZeroEntries);\n};\n\nconst applyFee = (borrowingRate: Decimalish, debtIncrease: Decimal) =>\n  debtIncrease.mul(Decimal.ONE.add(borrowingRate));\n\nconst unapplyFee = (borrowingRate: Decimalish, debtIncrease: Decimal) =>\n  debtIncrease._divCeil(Decimal.ONE.add(borrowingRate));\n\nconst NOMINAL_COLLATERAL_RATIO_PRECISION = Decimal.from(100);\n\n/**\n * A combination of collateral and debt.\n *\n * @public\n */\nexport class Trove {\n  /** Amount of native currency (e.g. Ether) collateralized. */\n  readonly collateral: Decimal;\n\n  /** Amount of LUSD owed. */\n  readonly debt: Decimal;\n\n  /** @internal */\n  constructor(collateral = Decimal.ZERO, debt = Decimal.ZERO) {\n    this.collateral = collateral;\n    this.debt = debt;\n  }\n\n  get isEmpty(): boolean {\n    return this.collateral.isZero && this.debt.isZero;\n  }\n\n  /**\n   * Amount of LUSD that must be repaid to close this Trove.\n   *\n   * @remarks\n   * This doesn't include the liquidation reserve, which is refunded in case of normal closure.\n   */\n  get netDebt(): Decimal {\n    if (this.debt.lt(LUSD_LIQUIDATION_RESERVE)) {\n      throw new Error(`netDebt should not be used when debt < ${LUSD_LIQUIDATION_RESERVE}`);\n    }\n\n    return this.debt.sub(LUSD_LIQUIDATION_RESERVE);\n  }\n\n  /** @internal */\n  get _nominalCollateralRatio(): Decimal {\n    return this.collateral.mulDiv(NOMINAL_COLLATERAL_RATIO_PRECISION, this.debt);\n  }\n\n  /** Calculate the Trove's collateralization ratio at a given price. */\n  collateralRatio(price: Decimalish): Decimal {\n    return this.collateral.mulDiv(price, this.debt);\n  }\n\n  /**\n   * Whether the Trove is undercollateralized at a given price.\n   *\n   * @returns\n   * `true` if the Trove's collateralization ratio is less than the\n   * {@link MINIMUM_COLLATERAL_RATIO}.\n   */\n  collateralRatioIsBelowMinimum(price: Decimalish): boolean {\n    return this.collateralRatio(price).lt(MINIMUM_COLLATERAL_RATIO);\n  }\n\n  /**\n   * Whether the collateralization ratio is less than the {@link CRITICAL_COLLATERAL_RATIO} at a\n   * given price.\n   *\n   * @example\n   * Can be used to check whether the Liquity protocol is in recovery mode by using it on the return\n   * value of {@link ReadableLiquity.getTotal | getTotal()}. For example:\n   *\n   * ```typescript\n   * const total = await liquity.getTotal();\n   * const price = await liquity.getPrice();\n   *\n   * if (total.collateralRatioIsBelowCritical(price)) {\n   *   // Recovery mode is active\n   * }\n   * ```\n   */\n  collateralRatioIsBelowCritical(price: Decimalish): boolean {\n    return this.collateralRatio(price).lt(CRITICAL_COLLATERAL_RATIO);\n  }\n\n  /** Whether the Trove is sufficiently collateralized to be opened during recovery mode. */\n  isOpenableInRecoveryMode(price: Decimalish): boolean {\n    return this.collateralRatio(price).gte(CRITICAL_COLLATERAL_RATIO);\n  }\n\n  /** @internal */\n  toString(): string {\n    return `{ collateral: ${this.collateral}, debt: ${this.debt} }`;\n  }\n\n  equals(that: Trove): boolean {\n    return this.collateral.eq(that.collateral) && this.debt.eq(that.debt);\n  }\n\n  add(that: Trove): Trove {\n    return new Trove(this.collateral.add(that.collateral), this.debt.add(that.debt));\n  }\n\n  addCollateral(collateral: Decimalish): Trove {\n    return new Trove(this.collateral.add(collateral), this.debt);\n  }\n\n  addDebt(debt: Decimalish): Trove {\n    return new Trove(this.collateral, this.debt.add(debt));\n  }\n\n  subtract(that: Trove): Trove {\n    const { collateral, debt } = that;\n\n    return new Trove(\n      this.collateral.gt(collateral) ? this.collateral.sub(collateral) : Decimal.ZERO,\n      this.debt.gt(debt) ? this.debt.sub(debt) : Decimal.ZERO\n    );\n  }\n\n  subtractCollateral(collateral: Decimalish): Trove {\n    return new Trove(\n      this.collateral.gt(collateral) ? this.collateral.sub(collateral) : Decimal.ZERO,\n      this.debt\n    );\n  }\n\n  subtractDebt(debt: Decimalish): Trove {\n    return new Trove(this.collateral, this.debt.gt(debt) ? this.debt.sub(debt) : Decimal.ZERO);\n  }\n\n  multiply(multiplier: Decimalish): Trove {\n    return new Trove(this.collateral.mul(multiplier), this.debt.mul(multiplier));\n  }\n\n  setCollateral(collateral: Decimalish): Trove {\n    return new Trove(Decimal.from(collateral), this.debt);\n  }\n\n  setDebt(debt: Decimalish): Trove {\n    return new Trove(this.collateral, Decimal.from(debt));\n  }\n\n  private _debtChange({ debt }: Trove, borrowingRate: Decimalish): _DebtChange<Decimal> {\n    return debt.gt(this.debt)\n      ? { borrowLUSD: unapplyFee(borrowingRate, debt.sub(this.debt)) }\n      : { repayLUSD: this.debt.sub(debt) };\n  }\n\n  private _collateralChange({ collateral }: Trove): _CollateralChange<Decimal> {\n    return collateral.gt(this.collateral)\n      ? { depositCollateral: collateral.sub(this.collateral) }\n      : { withdrawCollateral: this.collateral.sub(collateral) };\n  }\n\n  /**\n   * Calculate the difference between this Trove and another.\n   *\n   * @param that - The other Trove.\n   * @param borrowingRate - Borrowing rate to use when calculating a borrowed amount.\n   *\n   * @returns\n   * An object representing the change, or `undefined` if the Troves are equal.\n   */\n  whatChanged(\n    that: Trove,\n    borrowingRate: Decimalish = MINIMUM_BORROWING_RATE\n  ): TroveChange<Decimal> | undefined {\n    if (this.collateral.eq(that.collateral) && this.debt.eq(that.debt)) {\n      return undefined;\n    }\n\n    if (this.isEmpty) {\n      if (that.debt.lt(LUSD_LIQUIDATION_RESERVE)) {\n        return invalidTroveCreation(that, \"missingLiquidationReserve\");\n      }\n\n      return troveCreation({\n        depositCollateral: that.collateral,\n        borrowLUSD: unapplyFee(borrowingRate, that.netDebt)\n      });\n    }\n\n    if (that.isEmpty) {\n      return troveClosure(\n        this.netDebt.nonZero\n          ? { withdrawCollateral: this.collateral, repayLUSD: this.netDebt }\n          : { withdrawCollateral: this.collateral }\n      );\n    }\n\n    return this.collateral.eq(that.collateral)\n      ? troveAdjustment<Decimal>(this._debtChange(that, borrowingRate), that.debt.zero && \"debt\")\n      : this.debt.eq(that.debt)\n      ? troveAdjustment<Decimal>(this._collateralChange(that), that.collateral.zero && \"collateral\")\n      : troveAdjustment<Decimal>(\n          {\n            ...this._debtChange(that, borrowingRate),\n            ...this._collateralChange(that)\n          },\n          (that.debt.zero && \"debt\") ?? (that.collateral.zero && \"collateral\")\n        );\n  }\n\n  /**\n   * Make a new Trove by applying a {@link TroveChange} to this Trove.\n   *\n   * @param change - The change to apply.\n   * @param borrowingRate - Borrowing rate to use when adding a borrowed amount to the Trove's debt.\n   */\n  apply(\n    change: TroveChange<Decimal> | undefined,\n    borrowingRate: Decimalish = MINIMUM_BORROWING_RATE\n  ): Trove {\n    if (!change) {\n      return this;\n    }\n\n    switch (change.type) {\n      case \"invalidCreation\":\n        if (!this.isEmpty) {\n          throw new Error(\"Can't create onto existing Trove\");\n        }\n\n        return change.invalidTrove;\n\n      case \"creation\": {\n        if (!this.isEmpty) {\n          throw new Error(\"Can't create onto existing Trove\");\n        }\n\n        const { depositCollateral, borrowLUSD } = change.params;\n\n        return new Trove(\n          depositCollateral,\n          LUSD_LIQUIDATION_RESERVE.add(applyFee(borrowingRate, borrowLUSD))\n        );\n      }\n\n      case \"closure\":\n        if (this.isEmpty) {\n          throw new Error(\"Can't close empty Trove\");\n        }\n\n        return _emptyTrove;\n\n      case \"adjustment\": {\n        const {\n          setToZero,\n          params: { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD }\n        } = change;\n\n        const collateralDecrease = withdrawCollateral ?? Decimal.ZERO;\n        const collateralIncrease = depositCollateral ?? Decimal.ZERO;\n        const debtDecrease = repayLUSD ?? Decimal.ZERO;\n        const debtIncrease = borrowLUSD ? applyFee(borrowingRate, borrowLUSD) : Decimal.ZERO;\n\n        return setToZero === \"collateral\"\n          ? this.setCollateral(Decimal.ZERO).addDebt(debtIncrease).subtractDebt(debtDecrease)\n          : setToZero === \"debt\"\n          ? this.setDebt(Decimal.ZERO)\n              .addCollateral(collateralIncrease)\n              .subtractCollateral(collateralDecrease)\n          : this.add(new Trove(collateralIncrease, debtIncrease)).subtract(\n              new Trove(collateralDecrease, debtDecrease)\n            );\n      }\n    }\n  }\n\n  /**\n   * Calculate the result of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n   *\n   * @param params - Parameters of the transaction.\n   * @param borrowingRate - Borrowing rate to use when calculating the Trove's debt.\n   */\n  static create(params: TroveCreationParams<Decimalish>, borrowingRate?: Decimalish): Trove {\n    return _emptyTrove.apply(troveCreation(_normalizeTroveCreation(params)), borrowingRate);\n  }\n\n  /**\n   * Calculate the parameters of an {@link TransactableLiquity.openTrove | openTrove()} transaction\n   * that will result in the given Trove.\n   *\n   * @param that - The Trove to recreate.\n   * @param borrowingRate - Current borrowing rate.\n   */\n  static recreate(that: Trove, borrowingRate?: Decimalish): TroveCreationParams<Decimal> {\n    const change = _emptyTrove.whatChanged(that, borrowingRate);\n    assert(change?.type === \"creation\");\n    return change.params;\n  }\n\n  /**\n   * Calculate the result of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction\n   * on this Trove.\n   *\n   * @param params - Parameters of the transaction.\n   * @param borrowingRate - Borrowing rate to use when adding to the Trove's debt.\n   */\n  adjust(params: TroveAdjustmentParams<Decimalish>, borrowingRate?: Decimalish): Trove {\n    return this.apply(troveAdjustment(_normalizeTroveAdjustment(params)), borrowingRate);\n  }\n\n  /**\n   * Calculate the parameters of an {@link TransactableLiquity.adjustTrove | adjustTrove()}\n   * transaction that will change this Trove into the given Trove.\n   *\n   * @param that - The desired result of the transaction.\n   * @param borrowingRate - Current borrowing rate.\n   */\n  adjustTo(that: Trove, borrowingRate?: Decimalish): TroveAdjustmentParams<Decimal> {\n    const change = this.whatChanged(that, borrowingRate);\n    assert(change?.type === \"adjustment\");\n    return change.params;\n  }\n}\n\n/** @internal */\nexport const _emptyTrove = new Trove();\n\n/**\n * Represents whether a UserTrove is open or not, or why it was closed.\n *\n * @public\n */\nexport type UserTroveStatus =\n  | \"nonExistent\"\n  | \"open\"\n  | \"closedByOwner\"\n  | \"closedByLiquidation\"\n  | \"closedByRedemption\";\n\n/**\n * A Trove that is associated with a single owner.\n *\n * @remarks\n * The SDK uses the base {@link Trove} class as a generic container of collateral and debt, for\n * example to represent the {@link ReadableLiquity.getTotal | total collateral and debt} locked up\n * in the protocol.\n *\n * The `UserTrove` class extends `Trove` with extra information that's only available for Troves\n * that are associated with a single owner (such as the owner's address, or the Trove's status).\n *\n * @public\n */\nexport class UserTrove extends Trove {\n  /** Address that owns this Trove. */\n  readonly ownerAddress: string;\n\n  /** Provides more information when the UserTrove is empty. */\n  readonly status: UserTroveStatus;\n\n  /** @internal */\n  constructor(ownerAddress: string, status: UserTroveStatus, collateral?: Decimal, debt?: Decimal) {\n    super(collateral, debt);\n\n    this.ownerAddress = ownerAddress;\n    this.status = status;\n  }\n\n  equals(that: UserTrove): boolean {\n    return (\n      super.equals(that) && this.ownerAddress === that.ownerAddress && this.status === that.status\n    );\n  }\n\n  /** @internal */\n  toString(): string {\n    return (\n      `{ ownerAddress: \"${this.ownerAddress}\"` +\n      `, collateral: ${this.collateral}` +\n      `, debt: ${this.debt}` +\n      `, status: \"${this.status}\" }`\n    );\n  }\n}\n\n/**\n * A Trove in its state after the last direct modification.\n *\n * @remarks\n * The Trove may have received collateral and debt shares from liquidations since then.\n * Use {@link TroveWithPendingRedistribution.applyRedistribution | applyRedistribution()} to\n * calculate the Trove's most up-to-date state.\n *\n * @public\n */\nexport class TroveWithPendingRedistribution extends UserTrove {\n  private readonly stake: Decimal;\n  private readonly snapshotOfTotalRedistributed: Trove;\n\n  /** @internal */\n  constructor(\n    ownerAddress: string,\n    status: UserTroveStatus,\n    collateral?: Decimal,\n    debt?: Decimal,\n    stake = Decimal.ZERO,\n    snapshotOfTotalRedistributed = _emptyTrove\n  ) {\n    super(ownerAddress, status, collateral, debt);\n\n    this.stake = stake;\n    this.snapshotOfTotalRedistributed = snapshotOfTotalRedistributed;\n  }\n\n  applyRedistribution(totalRedistributed: Trove): UserTrove {\n    const afterRedistribution = this.add(\n      totalRedistributed.subtract(this.snapshotOfTotalRedistributed).multiply(this.stake)\n    );\n\n    return new UserTrove(\n      this.ownerAddress,\n      this.status,\n      afterRedistribution.collateral,\n      afterRedistribution.debt\n    );\n  }\n\n  equals(that: TroveWithPendingRedistribution): boolean {\n    return (\n      super.equals(that) &&\n      this.stake.eq(that.stake) &&\n      this.snapshotOfTotalRedistributed.equals(that.snapshotOfTotalRedistributed)\n    );\n  }\n}\n", "import { Decimal, Decimalish } from \"./Decimal\";\n\n/**\n * Represents the change between two Stability Deposit states.\n *\n * @public\n */\nexport type StabilityDepositChange<T> =\n  | { depositLUSD: T; withdrawLUSD?: undefined }\n  | { depositLUSD?: undefined; withdrawLUSD: T; withdrawAllLUSD: boolean };\n\n/**\n * A Stability Deposit and its accrued gains.\n *\n * @public\n */\nexport class StabilityDeposit {\n  /** Amount of LUSD in the Stability Deposit at the time of the last direct modification. */\n  readonly initialLUSD: Decimal;\n\n  /** Amount of LUSD left in the Stability Deposit. */\n  readonly currentLUSD: Decimal;\n\n  /** Amount of native currency (e.g. Ether) received in exchange for the used-up LUSD. */\n  readonly collateralGain: Decimal;\n\n  /** Amount of LQTY rewarded since the last modification of the Stability Deposit. */\n  readonly lqtyReward: Decimal;\n\n  /**\n   * Address of frontend through which this Stability Deposit was made.\n   *\n   * @remarks\n   * If the Stability Deposit was made through a frontend that doesn't tag deposits, this will be\n   * the zero-address.\n   */\n  readonly frontendTag: string;\n\n  /** @internal */\n  constructor(\n    initialLUSD: Decimal,\n    currentLUSD: Decimal,\n    collateralGain: Decimal,\n    lqtyReward: Decimal,\n    frontendTag: string\n  ) {\n    this.initialLUSD = initialLUSD;\n    this.currentLUSD = currentLUSD;\n    this.collateralGain = collateralGain;\n    this.lqtyReward = lqtyReward;\n    this.frontendTag = frontendTag;\n\n    if (this.currentLUSD.gt(this.initialLUSD)) {\n      throw new Error(\"currentLUSD can't be greater than initialLUSD\");\n    }\n  }\n\n  get isEmpty(): boolean {\n    return (\n      this.initialLUSD.isZero &&\n      this.currentLUSD.isZero &&\n      this.collateralGain.isZero &&\n      this.lqtyReward.isZero\n    );\n  }\n\n  /** @internal */\n  toString(): string {\n    return (\n      `{ initialLUSD: ${this.initialLUSD}` +\n      `, currentLUSD: ${this.currentLUSD}` +\n      `, collateralGain: ${this.collateralGain}` +\n      `, lqtyReward: ${this.lqtyReward}` +\n      `, frontendTag: \"${this.frontendTag}\" }`\n    );\n  }\n\n  /**\n   * Compare to another instance of `StabilityDeposit`.\n   */\n  equals(that: StabilityDeposit): boolean {\n    return (\n      this.initialLUSD.eq(that.initialLUSD) &&\n      this.currentLUSD.eq(that.currentLUSD) &&\n      this.collateralGain.eq(that.collateralGain) &&\n      this.lqtyReward.eq(that.lqtyReward) &&\n      this.frontendTag === that.frontendTag\n    );\n  }\n\n  /**\n   * Calculate the difference between the `currentLUSD` in this Stability Deposit and `thatLUSD`.\n   *\n   * @returns An object representing the change, or `undefined` if the deposited amounts are equal.\n   */\n  whatChanged(thatLUSD: Decimalish): StabilityDepositChange<Decimal> | undefined {\n    thatLUSD = Decimal.from(thatLUSD);\n\n    if (thatLUSD.lt(this.currentLUSD)) {\n      return { withdrawLUSD: this.currentLUSD.sub(thatLUSD), withdrawAllLUSD: thatLUSD.isZero };\n    }\n\n    if (thatLUSD.gt(this.currentLUSD)) {\n      return { depositLUSD: thatLUSD.sub(this.currentLUSD) };\n    }\n  }\n\n  /**\n   * Apply a {@link StabilityDepositChange} to this Stability Deposit.\n   *\n   * @returns The new deposited LUSD amount.\n   */\n  apply(change: StabilityDepositChange<Decimalish> | undefined): Decimal {\n    if (!change) {\n      return this.currentLUSD;\n    }\n\n    if (change.withdrawLUSD !== undefined) {\n      return change.withdrawAllLUSD || this.currentLUSD.lte(change.withdrawLUSD)\n        ? Decimal.ZERO\n        : this.currentLUSD.sub(change.withdrawLUSD);\n    } else {\n      return this.currentLUSD.add(change.depositLUSD);\n    }\n  }\n}\n", "import { Decimal, Decimalish } from \"./Decimal\";\n\n/**\n * Represents the change between two states of an LQTY Stake.\n *\n * @public\n */\nexport type LQTYStakeChange<T> =\n  | { stakeLQTY: T; unstakeLQTY?: undefined }\n  | { stakeLQTY?: undefined; unstakeLQTY: T; unstakeAllLQTY: boolean };\n\n/** \n * Represents a user's LQTY stake and accrued gains.\n * \n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\nexport class LQTYStake {\n  /** The amount of LQTY that's staked. */\n  readonly stakedLQTY: Decimal;\n\n  /** Collateral gain available to withdraw. */\n  readonly collateralGain: Decimal;\n\n  /** LUSD gain available to withdraw. */\n  readonly lusdGain: Decimal;\n\n  /** @internal */\n  constructor(stakedLQTY = Decimal.ZERO, collateralGain = Decimal.ZERO, lusdGain = Decimal.ZERO) {\n    this.stakedLQTY = stakedLQTY;\n    this.collateralGain = collateralGain;\n    this.lusdGain = lusdGain;\n  }\n\n  get isEmpty(): boolean {\n    return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n  }\n\n  /** @internal */\n  toString(): string {\n    return (\n      `{ stakedLQTY: ${this.stakedLQTY}` +\n      `, collateralGain: ${this.collateralGain}` +\n      `, lusdGain: ${this.lusdGain} }`\n    );\n  }\n\n  /**\n   * Compare to another instance of `LQTYStake`.\n   */\n  equals(that: LQTYStake): boolean {\n    return (\n      this.stakedLQTY.eq(that.stakedLQTY) &&\n      this.collateralGain.eq(that.collateralGain) &&\n      this.lusdGain.eq(that.lusdGain)\n    );\n  }\n\n  /**\n   * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n   *\n   * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n   */\n  whatChanged(thatStakedLQTY: Decimalish): LQTYStakeChange<Decimal> | undefined {\n    thatStakedLQTY = Decimal.from(thatStakedLQTY);\n\n    if (thatStakedLQTY.lt(this.stakedLQTY)) {\n      return {\n        unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n        unstakeAllLQTY: thatStakedLQTY.isZero\n      };\n    }\n\n    if (thatStakedLQTY.gt(this.stakedLQTY)) {\n      return { stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY) };\n    }\n  }\n\n  /**\n   * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n   *\n   * @returns The new staked LQTY amount.\n   */\n  apply(change: LQTYStakeChange<Decimalish> | undefined): Decimal {\n    if (!change) {\n      return this.stakedLQTY;\n    }\n\n    if (change.unstakeLQTY !== undefined) {\n      return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY)\n        ? Decimal.ZERO\n        : this.stakedLQTY.sub(change.unstakeLQTY);\n    } else {\n      return this.stakedLQTY.add(change.stakeLQTY);\n    }\n  }\n}\n", "import assert from \"assert\";\n\nimport { Decimal, Decimalish } from \"./Decimal\";\n\nimport {\n  MAXIMUM_BORROWING_RATE,\n  MINIMUM_BORROWING_RATE,\n  MINIMUM_REDEMPTION_RATE\n} from \"./constants\";\n\n/**\n * Calculator for fees.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getFees | getFees()} function.\n *\n * @public\n */\nexport class Fees {\n  private readonly _baseRateWithoutDecay: Decimal;\n  private readonly _minuteDecayFactor: Decimal;\n  private readonly _beta: Decimal;\n  private readonly _lastFeeOperation: Date;\n  private readonly _timeOfLatestBlock: Date;\n  private readonly _recoveryMode: boolean;\n\n  /** @internal */\n  constructor(\n    baseRateWithoutDecay: Decimalish,\n    minuteDecayFactor: Decimalish,\n    beta: Decimalish,\n    lastFeeOperation: Date,\n    timeOfLatestBlock: Date,\n    recoveryMode: boolean\n  ) {\n    this._baseRateWithoutDecay = Decimal.from(baseRateWithoutDecay);\n    this._minuteDecayFactor = Decimal.from(minuteDecayFactor);\n    this._beta = Decimal.from(beta);\n    this._lastFeeOperation = lastFeeOperation;\n    this._timeOfLatestBlock = timeOfLatestBlock;\n    this._recoveryMode = recoveryMode;\n\n    assert(this._minuteDecayFactor.lt(1));\n  }\n\n  /** @internal */\n  _setRecoveryMode(recoveryMode: boolean): Fees {\n    return new Fees(\n      this._baseRateWithoutDecay,\n      this._minuteDecayFactor,\n      this._beta,\n      this._lastFeeOperation,\n      this._timeOfLatestBlock,\n      recoveryMode\n    );\n  }\n\n  /**\n   * Compare to another instance of `Fees`.\n   */\n  equals(that: Fees): boolean {\n    return (\n      this._baseRateWithoutDecay.eq(that._baseRateWithoutDecay) &&\n      this._minuteDecayFactor.eq(that._minuteDecayFactor) &&\n      this._beta.eq(that._beta) &&\n      this._lastFeeOperation.getTime() === that._lastFeeOperation.getTime() &&\n      this._timeOfLatestBlock.getTime() === that._timeOfLatestBlock.getTime() &&\n      this._recoveryMode === that._recoveryMode\n    );\n  }\n\n  /** @internal */\n  toString(): string {\n    return (\n      `{ baseRateWithoutDecay: ${this._baseRateWithoutDecay}` +\n      `, lastFeeOperation: \"${this._lastFeeOperation.toLocaleString()}\"` +\n      `, recoveryMode: ${this._recoveryMode} } `\n    );\n  }\n\n  /** @internal */\n  baseRate(when = this._timeOfLatestBlock): Decimal {\n    const millisecondsSinceLastFeeOperation = Math.max(\n      when.getTime() - this._lastFeeOperation.getTime(),\n      0 // Clamp negative elapsed time to 0, in case the client's time is in the past.\n      // We will calculate slightly higher than actual fees, which is fine.\n    );\n\n    const minutesSinceLastFeeOperation = Math.floor(millisecondsSinceLastFeeOperation / 60000);\n\n    return this._minuteDecayFactor.pow(minutesSinceLastFeeOperation).mul(this._baseRateWithoutDecay);\n  }\n\n  /**\n   * Calculate the current borrowing rate.\n   *\n   * @param when - Optional timestamp that can be used to calculate what the borrowing rate would\n   *               decay to at a point of time in the future.\n   *\n   * @remarks\n   * By default, the fee is calculated at the time of the latest block. This can be overridden using\n   * the `when` parameter.\n   *\n   * To calculate the borrowing fee in LUSD, multiply the borrowed LUSD amount by the borrowing rate.\n   *\n   * @example\n   * ```typescript\n   * const fees = await liquity.getFees();\n   *\n   * const borrowedLUSDAmount = 100;\n   * const borrowingRate = fees.borrowingRate();\n   * const borrowingFeeLUSD = borrowingRate.mul(borrowedLUSDAmount);\n   * ```\n   */\n  borrowingRate(when?: Date): Decimal {\n    return this._recoveryMode\n      ? Decimal.ZERO\n      : Decimal.min(MINIMUM_BORROWING_RATE.add(this.baseRate(when)), MAXIMUM_BORROWING_RATE);\n  }\n\n  /**\n   * Calculate the current redemption rate.\n   *\n   * @param redeemedFractionOfSupply - The amount of LUSD being redeemed divided by the total supply.\n   * @param when - Optional timestamp that can be used to calculate what the redemption rate would\n   *               decay to at a point of time in the future.\n   *\n   * @remarks\n   * By default, the fee is calculated at the time of the latest block. This can be overridden using\n   * the `when` parameter.\n\n   * Unlike the borrowing rate, the redemption rate depends on the amount being redeemed. To be more\n   * precise, it depends on the fraction of the redeemed amount compared to the total LUSD supply,\n   * which must be passed as a parameter.\n   *\n   * To calculate the redemption fee in LUSD, multiply the redeemed LUSD amount with the redemption\n   * rate.\n   *\n   * @example\n   * ```typescript\n   * const fees = await liquity.getFees();\n   * const total = await liquity.getTotal();\n   *\n   * const redeemedLUSDAmount = Decimal.from(100);\n   * const redeemedFractionOfSupply = redeemedLUSDAmount.div(total.debt);\n   * const redemptionRate = fees.redemptionRate(redeemedFractionOfSupply);\n   * const redemptionFeeLUSD = redemptionRate.mul(redeemedLUSDAmount);\n   * ```\n   */\n  redemptionRate(redeemedFractionOfSupply: Decimalish = Decimal.ZERO, when?: Date): Decimal {\n    redeemedFractionOfSupply = Decimal.from(redeemedFractionOfSupply);\n    let baseRate = this.baseRate(when);\n\n    if (redeemedFractionOfSupply.nonZero) {\n      baseRate = redeemedFractionOfSupply.div(this._beta).add(baseRate);\n    }\n\n    return Decimal.min(MINIMUM_REDEMPTION_RATE.add(baseRate), Decimal.ONE);\n  }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ReadableLiquity.js.map", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ObservableLiquity.js.map", "import { Decimal, Decimalish } from \"./Decimal\";\nimport { Trove, TroveAdjustmentParams, TroveClosureParams, TroveCreationParams } from \"./Trove\";\nimport { StabilityDepositChange } from \"./StabilityDeposit\";\nimport { FailedReceipt } from \"./SendableLiquity\";\n\n/**\n * Thrown by {@link TransactableLiquity} functions in case of transaction failure.\n *\n * @public\n */\nexport class TransactionFailedError<T extends FailedReceipt = FailedReceipt> extends Error {\n  readonly failedReceipt: T;\n\n  /** @internal */\n  constructor(name: string, message: string, failedReceipt: T) {\n    super(message);\n    this.name = name;\n    this.failedReceipt = failedReceipt;\n  }\n}\n\n/**\n * Details of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n *\n * @public\n */\nexport interface TroveCreationDetails {\n  /** How much was deposited and borrowed. */\n  params: TroveCreationParams<Decimal>;\n\n  /** The Trove that was created by the transaction. */\n  newTrove: Trove;\n\n  /** Amount of LUSD added to the Trove's debt as borrowing fee. */\n  fee: Decimal;\n}\n\n/**\n * Details of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction.\n *\n * @public\n */\nexport interface TroveAdjustmentDetails {\n  /** Parameters of the adjustment. */\n  params: TroveAdjustmentParams<Decimal>;\n\n  /** New state of the adjusted Trove directly after the transaction. */\n  newTrove: Trove;\n\n  /** Amount of LUSD added to the Trove's debt as borrowing fee. */\n  fee: Decimal;\n}\n\n/**\n * Details of a {@link TransactableLiquity.closeTrove | closeTrove()} transaction.\n *\n * @public\n */\nexport interface TroveClosureDetails {\n  /** How much was withdrawn and repaid. */\n  params: TroveClosureParams<Decimal>;\n}\n\n/**\n * Details of a {@link TransactableLiquity.liquidate | liquidate()} or\n * {@link TransactableLiquity.liquidateUpTo | liquidateUpTo()} transaction.\n *\n * @public\n */\nexport interface LiquidationDetails {\n  /** Addresses whose Troves were liquidated by the transaction. */\n  liquidatedAddresses: string[];\n\n  /** Total collateral liquidated and debt cleared by the transaction. */\n  totalLiquidated: Trove;\n\n  /** Amount of LUSD paid to the liquidator as gas compensation. */\n  lusdGasCompensation: Decimal;\n\n  /** Amount of native currency (e.g. Ether) paid to the liquidator as gas compensation. */\n  collateralGasCompensation: Decimal;\n}\n\n/**\n * Details of a {@link TransactableLiquity.redeemLUSD | redeemLUSD()} transaction.\n *\n * @public\n */\nexport interface RedemptionDetails {\n  /** Amount of LUSD the redeemer tried to redeem. */\n  attemptedLUSDAmount: Decimal;\n\n  /**\n   * Amount of LUSD that was actually redeemed by the transaction.\n   *\n   * @remarks\n   * This can end up being lower than `attemptedLUSDAmount` due to interference from another\n   * transaction that modifies the list of Troves.\n   *\n   * @public\n   */\n  actualLUSDAmount: Decimal;\n\n  /** Amount of collateral (e.g. Ether) taken from Troves by the transaction. */\n  collateralTaken: Decimal;\n\n  /** Amount of native currency (e.g. Ether) deducted as fee from collateral taken. */\n  fee: Decimal;\n}\n\n/**\n * Details of a\n * {@link TransactableLiquity.withdrawGainsFromStabilityPool | withdrawGainsFromStabilityPool()}\n * transaction.\n *\n * @public\n */\nexport interface StabilityPoolGainsWithdrawalDetails {\n  /** Amount of LUSD burned from the deposit by liquidations since the last modification. */\n  lusdLoss: Decimal;\n\n  /** Amount of LUSD in the deposit directly after this transaction. */\n  newLUSDDeposit: Decimal;\n\n  /** Amount of native currency (e.g. Ether) paid out to the depositor in this transaction. */\n  collateralGain: Decimal;\n\n  /** Amount of LQTY rewarded to the depositor in this transaction. */\n  lqtyReward: Decimal;\n}\n\n/**\n * Details of a\n * {@link TransactableLiquity.depositLUSDInStabilityPool | depositLUSDInStabilityPool()} or\n * {@link TransactableLiquity.withdrawLUSDFromStabilityPool | withdrawLUSDFromStabilityPool()}\n * transaction.\n *\n * @public\n */\nexport interface StabilityDepositChangeDetails extends StabilityPoolGainsWithdrawalDetails {\n  /** Change that was made to the deposit by this transaction. */\n  change: StabilityDepositChange<Decimal>;\n}\n\n/**\n * Details of a\n * {@link TransactableLiquity.transferCollateralGainToTrove | transferCollateralGainToTrove()}\n * transaction.\n *\n * @public\n */\nexport interface CollateralGainTransferDetails extends StabilityPoolGainsWithdrawalDetails {\n  /** New state of the depositor's Trove directly after the transaction. */\n  newTrove: Trove;\n}\n\n/**\n * Send Liquity transactions and wait for them to succeed.\n *\n * @remarks\n * The functions return the details of the transaction (if any), or throw an implementation-specific\n * subclass of {@link TransactionFailedError} in case of transaction failure.\n *\n * Implemented by {@link @liquity/lib-ethers#EthersLiquity}.\n *\n * @public\n */\nexport interface TransactableLiquity {\n  /**\n   * Open a new Trove by depositing collateral and borrowing LUSD.\n   *\n   * @param params - How much to deposit and borrow.\n   * @param maxBorrowingRate - Maximum acceptable\n   *                           {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum\n   * acceptable rate.\n   */\n  openTrove(\n    params: TroveCreationParams<Decimalish>,\n    maxBorrowingRate?: Decimalish\n  ): Promise<TroveCreationDetails>;\n\n  /**\n   * Close existing Trove by repaying all debt and withdrawing all collateral.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  closeTrove(): Promise<TroveClosureDetails>;\n\n  /**\n   * Adjust existing Trove by changing its collateral, debt, or both.\n   *\n   * @param params - Parameters of the adjustment.\n   * @param maxBorrowingRate - Maximum acceptable\n   *                           {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate} if\n   *                           `params` includes `borrowLUSD`.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * The transaction will fail if the Trove's debt would fall below\n   * {@link @liquity/lib-base#LUSD_MINIMUM_DEBT}.\n   *\n   * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum\n   * acceptable rate.\n   */\n  adjustTrove(\n    params: TroveAdjustmentParams<Decimalish>,\n    maxBorrowingRate?: Decimalish\n  ): Promise<TroveAdjustmentDetails>;\n\n  /**\n   * Adjust existing Trove by depositing more collateral.\n   *\n   * @param amount - The amount of collateral to add to the Trove's existing collateral.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * Equivalent to:\n   *\n   * ```typescript\n   * adjustTrove({ depositCollateral: amount })\n   * ```\n   */\n  depositCollateral(amount: Decimalish): Promise<TroveAdjustmentDetails>;\n\n  /**\n   * Adjust existing Trove by withdrawing some of its collateral.\n   *\n   * @param amount - The amount of collateral to withdraw from the Trove.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * Equivalent to:\n   *\n   * ```typescript\n   * adjustTrove({ withdrawCollateral: amount })\n   * ```\n   */\n  withdrawCollateral(amount: Decimalish): Promise<TroveAdjustmentDetails>;\n\n  /**\n   * Adjust existing Trove by borrowing more LUSD.\n   *\n   * @param amount - The amount of LUSD to borrow.\n   * @param maxBorrowingRate - Maximum acceptable\n   *                           {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * Equivalent to:\n   *\n   * ```typescript\n   * adjustTrove({ borrowLUSD: amount }, maxBorrowingRate)\n   * ```\n   */\n  borrowLUSD(amount: Decimalish, maxBorrowingRate?: Decimalish): Promise<TroveAdjustmentDetails>;\n\n  /**\n   * Adjust existing Trove by repaying some of its debt.\n   *\n   * @param amount - The amount of LUSD to repay.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * Equivalent to:\n   *\n   * ```typescript\n   * adjustTrove({ repayLUSD: amount })\n   * ```\n   */\n  repayLUSD(amount: Decimalish): Promise<TroveAdjustmentDetails>;\n\n  /** @internal */\n  setPrice(price: Decimalish): Promise<void>;\n\n  /**\n   * Liquidate one or more undercollateralized Troves.\n   *\n   * @param address - Address or array of addresses whose Troves to liquidate.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  liquidate(address: string | string[]): Promise<LiquidationDetails>;\n\n  /**\n   * Liquidate the least collateralized Troves up to a maximum number.\n   *\n   * @param maximumNumberOfTrovesToLiquidate - Stop after liquidating this many Troves.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  liquidateUpTo(maximumNumberOfTrovesToLiquidate: number): Promise<LiquidationDetails>;\n\n  /**\n   * Make a new Stability Deposit, or top up existing one.\n   *\n   * @param amount - Amount of LUSD to add to new or existing deposit.\n   * @param frontendTag - Address that should receive a share of this deposit's LQTY rewards.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * The `frontendTag` parameter is only effective when making a new deposit.\n   *\n   * As a side-effect, the transaction will also pay out an existing Stability Deposit's\n   * {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and\n   * {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n   */\n  depositLUSDInStabilityPool(\n    amount: Decimalish,\n    frontendTag?: string\n  ): Promise<StabilityDepositChangeDetails>;\n\n  /**\n   * Withdraw LUSD from Stability Deposit.\n   *\n   * @param amount - Amount of LUSD to withdraw.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * As a side-effect, the transaction will also pay out the Stability Deposit's\n   * {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and\n   * {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n   */\n  withdrawLUSDFromStabilityPool(amount: Decimalish): Promise<StabilityDepositChangeDetails>;\n\n  /**\n   * Withdraw {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and\n   * {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward} from Stability Deposit.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  withdrawGainsFromStabilityPool(): Promise<StabilityPoolGainsWithdrawalDetails>;\n\n  /**\n   * Transfer {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} from\n   * Stability Deposit to Trove.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * The collateral gain is transfered to the Trove as additional collateral.\n   *\n   * As a side-effect, the transaction will also pay out the Stability Deposit's\n   * {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n   */\n  transferCollateralGainToTrove(): Promise<CollateralGainTransferDetails>;\n\n  /**\n   * Send LUSD tokens to an address.\n   *\n   * @param toAddress - Address of receipient.\n   * @param amount - Amount of LUSD to send.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  sendLUSD(toAddress: string, amount: Decimalish): Promise<void>;\n\n  /**\n   * Send LQTY tokens to an address.\n   *\n   * @param toAddress - Address of receipient.\n   * @param amount - Amount of LQTY to send.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  sendLQTY(toAddress: string, amount: Decimalish): Promise<void>;\n\n  /**\n   * Redeem LUSD to native currency (e.g. Ether) at face value.\n   *\n   * @param amount - Amount of LUSD to be redeemed.\n   * @param maxRedemptionRate - Maximum acceptable\n   *                            {@link @liquity/lib-base#Fees.redemptionRate | redemption rate}.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * If `maxRedemptionRate` is omitted, the current redemption rate (based on `amount`) plus 0.1%\n   * is used as maximum acceptable rate.\n   */\n  redeemLUSD(amount: Decimalish, maxRedemptionRate?: Decimalish): Promise<RedemptionDetails>;\n\n  /**\n   * Claim leftover collateral after a liquidation or redemption.\n   *\n   * @remarks\n   * Use {@link @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance | getCollateralSurplusBalance()}\n   * to check the amount of collateral available for withdrawal.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  claimCollateralSurplus(): Promise<void>;\n\n  /**\n   * Stake LQTY to start earning fee revenue or increase existing stake.\n   *\n   * @param amount - Amount of LQTY to add to new or existing stake.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * As a side-effect, the transaction will also pay out an existing LQTY stake's\n   * {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and\n   * {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n   */\n  stakeLQTY(amount: Decimalish): Promise<void>;\n\n  /**\n   * Withdraw LQTY from staking.\n   *\n   * @param amount - Amount of LQTY to withdraw.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   *\n   * @remarks\n   * As a side-effect, the transaction will also pay out the LQTY stake's\n   * {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and\n   * {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n   */\n  unstakeLQTY(amount: Decimalish): Promise<void>;\n\n  /**\n   * Withdraw {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and\n   * {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain} from LQTY stake.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  withdrawGainsFromStaking(): Promise<void>;\n\n  /**\n   * Allow the liquidity mining contract to use Uniswap ETH/LUSD LP tokens for\n   * {@link @liquity/lib-base#TransactableLiquity.stakeUniTokens | staking}.\n   *\n   * @param allowance - Maximum amount of LP tokens that will be transferrable to liquidity mining\n   *                    (`2^256 - 1` by default).\n   *\n   * @remarks\n   * Must be performed before calling\n   * {@link @liquity/lib-base#TransactableLiquity.stakeUniTokens | stakeUniTokens()}.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  approveUniTokens(allowance?: Decimalish): Promise<void>;\n\n  /**\n   * Stake Uniswap ETH/LUSD LP tokens to participate in liquidity mining and earn LQTY.\n   *\n   * @param amount - Amount of LP tokens to add to new or existing stake.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  stakeUniTokens(amount: Decimalish): Promise<void>;\n\n  /**\n   * Withdraw Uniswap ETH/LUSD LP tokens from liquidity mining.\n   *\n   * @param amount - Amount of LP tokens to withdraw.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  unstakeUniTokens(amount: Decimalish): Promise<void>;\n\n  /**\n   * Withdraw LQTY that has been earned by mining liquidity.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  withdrawLQTYRewardFromLiquidityMining(): Promise<void>;\n\n  /**\n   * Withdraw all staked LP tokens from liquidity mining and claim reward.\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  exitLiquidityMining(): Promise<void>;\n\n  /**\n   * Register current wallet address as a Liquity frontend.\n   *\n   * @param kickbackRate - The portion of LQTY rewards to pass onto users of the frontend\n   *                       (between 0 and 1).\n   *\n   * @throws\n   * Throws {@link TransactionFailedError} in case of transaction failure.\n   */\n  registerFrontend(kickbackRate: Decimalish): Promise<void>;\n}\n", "import { Decimalish } from \"./Decimal\";\nimport { TroveAdjustmentParams, TroveCreationParams } from \"./Trove\";\n\nimport {\n  CollateralGainTransferDetails,\n  LiquidationDetails,\n  RedemptionDetails,\n  StabilityDepositChangeDetails,\n  StabilityPoolGainsWithdrawalDetails,\n  TransactableLiquity,\n  TroveAdjustmentDetails,\n  TroveClosureDetails,\n  TroveCreationDetails\n} from \"./TransactableLiquity\";\n\n/**\n * A transaction that has already been sent.\n *\n * @remarks\n * Implemented by {@link @liquity/lib-ethers#SentEthersLiquityTransaction}.\n *\n * @public\n */\nexport interface SentLiquityTransaction<S = unknown, T extends LiquityReceipt = LiquityReceipt> {\n  /** Implementation-specific sent transaction object. */\n  readonly rawSentTransaction: S;\n\n  /**\n   * Check whether the transaction has been mined, and whether it was successful.\n   *\n   * @remarks\n   * Unlike {@link @liquity/lib-base#SentLiquityTransaction.waitForReceipt | waitForReceipt()},\n   * this function doesn't wait for the transaction to be mined.\n   */\n  getReceipt(): Promise<T>;\n\n  /**\n   * Wait for the transaction to be mined, and check whether it was successful.\n   *\n   * @returns Either a {@link @liquity/lib-base#FailedReceipt} or a\n   *          {@link @liquity/lib-base#SuccessfulReceipt}.\n   */\n  waitForReceipt(): Promise<Extract<T, MinedReceipt>>;\n}\n\n/**\n * Indicates that the transaction hasn't been mined yet.\n *\n * @remarks\n * Returned by {@link SentLiquityTransaction.getReceipt}.\n *\n * @public\n */\nexport type PendingReceipt = { status: \"pending\" };\n\n/** @internal */\nexport const _pendingReceipt: PendingReceipt = { status: \"pending\" };\n\n/**\n * Indicates that the transaction has been mined, but it failed.\n *\n * @remarks\n * The `rawReceipt` property is an implementation-specific transaction receipt object.\n *\n * Returned by {@link SentLiquityTransaction.getReceipt} and\n * {@link SentLiquityTransaction.waitForReceipt}.\n *\n * @public\n */\nexport type FailedReceipt<R = unknown> = { status: \"failed\"; rawReceipt: R };\n\n/** @internal */\nexport const _failedReceipt = <R>(rawReceipt: R): FailedReceipt<R> => ({\n  status: \"failed\",\n  rawReceipt\n});\n\n/**\n * Indicates that the transaction has succeeded.\n *\n * @remarks\n * The `rawReceipt` property is an implementation-specific transaction receipt object.\n *\n * The `details` property may contain more information about the transaction.\n * See the return types of {@link TransactableLiquity} functions for the exact contents of `details`\n * for each type of Liquity transaction.\n *\n * Returned by {@link SentLiquityTransaction.getReceipt} and\n * {@link SentLiquityTransaction.waitForReceipt}.\n *\n * @public\n */\nexport type SuccessfulReceipt<R = unknown, D = unknown> = {\n  status: \"succeeded\";\n  rawReceipt: R;\n  details: D;\n};\n\n/** @internal */\nexport const _successfulReceipt = <R, D>(\n  rawReceipt: R,\n  details: D,\n  toString?: () => string\n): SuccessfulReceipt<R, D> => ({\n  status: \"succeeded\",\n  rawReceipt,\n  details,\n  ...(toString ? { toString } : {})\n});\n\n/**\n * Either a {@link FailedReceipt} or a {@link SuccessfulReceipt}.\n *\n * @public\n */\nexport type MinedReceipt<R = unknown, D = unknown> = FailedReceipt<R> | SuccessfulReceipt<R, D>;\n\n/**\n * One of either a {@link PendingReceipt}, a {@link FailedReceipt} or a {@link SuccessfulReceipt}.\n *\n * @public\n */\nexport type LiquityReceipt<R = unknown, D = unknown> = PendingReceipt | MinedReceipt<R, D>;\n\n/** @internal */\nexport type _SendableFrom<T, R, S> = {\n  [M in keyof T]: T[M] extends (...args: infer A) => Promise<infer D>\n    ? (...args: A) => Promise<SentLiquityTransaction<S, LiquityReceipt<R, D>>>\n    : never;\n};\n\n/**\n * Send Liquity transactions.\n *\n * @remarks\n * The functions return an object implementing {@link SentLiquityTransaction}, which can be used\n * to monitor the transaction and get its details when it succeeds.\n *\n * Implemented by {@link @liquity/lib-ethers#SendableEthersLiquity}.\n *\n * @public\n */\nexport interface SendableLiquity<R = unknown, S = unknown>\n  extends _SendableFrom<TransactableLiquity, R, S> {\n  // Methods re-declared for documentation purposes\n\n  /** {@inheritDoc TransactableLiquity.openTrove} */\n  openTrove(\n    params: TroveCreationParams<Decimalish>,\n    maxBorrowingRate?: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveCreationDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.closeTrove} */\n  closeTrove(): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveClosureDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.adjustTrove} */\n  adjustTrove(\n    params: TroveAdjustmentParams<Decimalish>,\n    maxBorrowingRate?: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveAdjustmentDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.depositCollateral} */\n  depositCollateral(\n    amount: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveAdjustmentDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.withdrawCollateral} */\n  withdrawCollateral(\n    amount: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveAdjustmentDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.borrowLUSD} */\n  borrowLUSD(\n    amount: Decimalish,\n    maxBorrowingRate?: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveAdjustmentDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.repayLUSD} */\n  repayLUSD(\n    amount: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, TroveAdjustmentDetails>>>;\n\n  /** @internal */\n  setPrice(price: Decimalish): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.liquidate} */\n  liquidate(\n    address: string | string[]\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, LiquidationDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.liquidateUpTo} */\n  liquidateUpTo(\n    maximumNumberOfTrovesToLiquidate: number\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, LiquidationDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.depositLUSDInStabilityPool} */\n  depositLUSDInStabilityPool(\n    amount: Decimalish,\n    frontendTag?: string\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, StabilityDepositChangeDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.withdrawLUSDFromStabilityPool} */\n  withdrawLUSDFromStabilityPool(\n    amount: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, StabilityDepositChangeDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.withdrawGainsFromStabilityPool} */\n  withdrawGainsFromStabilityPool(): Promise<\n    SentLiquityTransaction<S, LiquityReceipt<R, StabilityPoolGainsWithdrawalDetails>>\n  >;\n\n  /** {@inheritDoc TransactableLiquity.transferCollateralGainToTrove} */\n  transferCollateralGainToTrove(): Promise<\n    SentLiquityTransaction<S, LiquityReceipt<R, CollateralGainTransferDetails>>\n  >;\n\n  /** {@inheritDoc TransactableLiquity.sendLUSD} */\n  sendLUSD(\n    toAddress: string,\n    amount: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.sendLQTY} */\n  sendLQTY(\n    toAddress: string,\n    amount: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.redeemLUSD} */\n  redeemLUSD(\n    amount: Decimalish,\n    maxRedemptionRate?: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, RedemptionDetails>>>;\n\n  /** {@inheritDoc TransactableLiquity.claimCollateralSurplus} */\n  claimCollateralSurplus(): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.stakeLQTY} */\n  stakeLQTY(amount: Decimalish): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.unstakeLQTY} */\n  unstakeLQTY(amount: Decimalish): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.withdrawGainsFromStaking} */\n  withdrawGainsFromStaking(): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.approveUniTokens} */\n  approveUniTokens(\n    allowance?: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.stakeUniTokens} */\n  stakeUniTokens(amount: Decimalish): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.unstakeUniTokens} */\n  unstakeUniTokens(amount: Decimalish): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.withdrawLQTYRewardFromLiquidityMining} */\n  withdrawLQTYRewardFromLiquidityMining(): Promise<\n    SentLiquityTransaction<S, LiquityReceipt<R, void>>\n  >;\n\n  /** {@inheritDoc TransactableLiquity.exitLiquidityMining} */\n  exitLiquidityMining(): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n\n  /** {@inheritDoc TransactableLiquity.registerFrontend} */\n  registerFrontend(\n    kickbackRate: Decimalish\n  ): Promise<SentLiquityTransaction<S, LiquityReceipt<R, void>>>;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=PopulatableLiquity.js.map", "import assert from \"assert\";\n\nimport { Decimal } from \"./Decimal\";\nimport { StabilityDeposit } from \"./StabilityDeposit\";\nimport { Trove, TroveWithPendingRedistribution, UserTrove } from \"./Trove\";\nimport { Fees } from \"./Fees\";\nimport { LQTYStake } from \"./LQTYStake\";\nimport { FrontendStatus } from \"./ReadableLiquity\";\n\n/**\n * State variables read from the blockchain.\n *\n * @public\n */\nexport interface LiquityStoreBaseState {\n  /** Status of currently used frontend. */\n  frontend: FrontendStatus;\n\n  /** Status of user's own frontend. */\n  ownFrontend: FrontendStatus;\n\n  /** Number of Troves that are currently open. */\n  numberOfTroves: number;\n\n  /** User's native currency balance (e.g. Ether). */\n  accountBalance: Decimal;\n\n  /** User's LUSD token balance. */\n  lusdBalance: Decimal;\n\n  /** User's LQTY token balance. */\n  lqtyBalance: Decimal;\n\n  /** User's Uniswap ETH/LUSD LP token balance. */\n  uniTokenBalance: Decimal;\n\n  /** The liquidity mining contract's allowance of user's Uniswap ETH/LUSD LP tokens. */\n  uniTokenAllowance: Decimal;\n\n  /** Remaining LQTY that will be collectively rewarded to liquidity miners. */\n  remainingLiquidityMiningLQTYReward: Decimal;\n\n  /** Amount of Uniswap ETH/LUSD LP tokens the user has staked in liquidity mining. */\n  liquidityMiningStake: Decimal;\n\n  /** Total amount of Uniswap ETH/LUSD LP tokens currently staked in liquidity mining. */\n  totalStakedUniTokens: Decimal;\n\n  /** Amount of LQTY the user has earned through mining liquidity. */\n  liquidityMiningLQTYReward: Decimal;\n\n  /**\n   * Amount of leftover collateral available for withdrawal to the user.\n   *\n   * @remarks\n   * See {@link ReadableLiquity.getCollateralSurplusBalance | getCollateralSurplusBalance()} for\n   * more information.\n   */\n  collateralSurplusBalance: Decimal;\n\n  /** Current price of the native currency (e.g. Ether) in USD. */\n  price: Decimal;\n\n  /** Total amount of LUSD currently deposited in the Stability Pool. */\n  lusdInStabilityPool: Decimal;\n\n  /** Total collateral and debt in the Liquity system. */\n  total: Trove;\n\n  /**\n   * Total collateral and debt per stake that has been liquidated through redistribution.\n   *\n   * @remarks\n   * Needed when dealing with instances of {@link TroveWithPendingRedistribution}.\n   */\n  totalRedistributed: Trove;\n\n  /**\n   * User's Trove in its state after the last direct modification.\n   *\n   * @remarks\n   * The current state of the user's Trove can be found as\n   * {@link LiquityStoreDerivedState.trove | trove}.\n   */\n  troveBeforeRedistribution: TroveWithPendingRedistribution;\n\n  /** User's stability deposit. */\n  stabilityDeposit: StabilityDeposit;\n\n  /** Remaining LQTY that will be collectively rewarded to stability depositors. */\n  remainingStabilityPoolLQTYReward: Decimal;\n\n  /** @internal */\n  _feesInNormalMode: Fees;\n\n  /** User's LQTY stake. */\n  lqtyStake: LQTYStake;\n\n  /** Total amount of LQTY currently staked. */\n  totalStakedLQTY: Decimal;\n\n  /** @internal */\n  _riskiestTroveBeforeRedistribution: TroveWithPendingRedistribution;\n}\n\n/**\n * State variables derived from {@link LiquityStoreBaseState}.\n *\n * @public\n */\nexport interface LiquityStoreDerivedState {\n  /** Current state of user's Trove */\n  trove: UserTrove;\n\n  /** Calculator for current fees. */\n  fees: Fees;\n\n  /**\n   * Current borrowing rate.\n   *\n   * @remarks\n   * A value between 0 and 1.\n   *\n   * @example\n   * For example a value of 0.01 amounts to a borrowing fee of 1% of the borrowed amount.\n   */\n  borrowingRate: Decimal;\n\n  /**\n   * Current redemption rate.\n   *\n   * @remarks\n   * Note that the actual rate paid by a redemption transaction will depend on the amount of LUSD\n   * being redeemed.\n   *\n   * Use {@link Fees.redemptionRate} to calculate a precise redemption rate.\n   */\n  redemptionRate: Decimal;\n\n  /**\n   * Whether there are any Troves with collateral ratio below the\n   * {@link MINIMUM_COLLATERAL_RATIO | minimum}.\n   */\n  haveUndercollateralizedTroves: boolean;\n}\n\n/**\n * Type of {@link LiquityStore}'s {@link LiquityStore.state | state}.\n *\n * @remarks\n * It combines all properties of {@link LiquityStoreBaseState} and {@link LiquityStoreDerivedState}\n * with optional extra state added by the particular `LiquityStore` implementation.\n *\n * The type parameter `T` may be used to type the extra state.\n *\n * @public\n */\nexport type LiquityStoreState<T = unknown> = LiquityStoreBaseState & LiquityStoreDerivedState & T;\n\n/**\n * Parameters passed to {@link LiquityStore} listeners.\n *\n * @remarks\n * Use the {@link LiquityStore.subscribe | subscribe()} function to register a listener.\n\n * @public\n */\nexport interface LiquityStoreListenerParams<T = unknown> {\n  /** The entire previous state. */\n  newState: LiquityStoreState<T>;\n\n  /** The entire new state. */\n  oldState: LiquityStoreState<T>;\n\n  /** Only the state variables that have changed. */\n  stateChange: Partial<LiquityStoreState<T>>;\n}\n\nconst strictEquals = <T>(a: T, b: T) => a === b;\nconst eq = <T extends { eq(that: T): boolean }>(a: T, b: T) => a.eq(b);\nconst equals = <T extends { equals(that: T): boolean }>(a: T, b: T) => a.equals(b);\n\nconst frontendStatusEquals = (a: FrontendStatus, b: FrontendStatus) =>\n  a.status === \"unregistered\"\n    ? b.status === \"unregistered\"\n    : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\n\nconst showFrontendStatus = (x: FrontendStatus) =>\n  x.status === \"unregistered\"\n    ? '{ status: \"unregistered\" }'\n    : `{ status: \"registered\", kickbackRate: ${x.kickbackRate} }`;\n\nconst wrap = <A extends unknown[], R>(f: (...args: A) => R) => (...args: A) => f(...args);\n\nconst difference = <T>(a: T, b: T) =>\n  Object.fromEntries(\n    Object.entries(a).filter(([key, value]) => value !== (b as Record<string, unknown>)[key])\n  ) as Partial<T>;\n\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\nexport abstract class LiquityStore<T = unknown> {\n  /** Turn console logging on/off. */\n  logging = false;\n\n  /**\n   * Called after the state is fetched for the first time.\n   *\n   * @remarks\n   * See {@link LiquityStore.start | start()}.\n   */\n  onLoaded?: () => void;\n\n  /** @internal */\n  protected _loaded = false;\n\n  private _baseState?: LiquityStoreBaseState;\n  private _derivedState?: LiquityStoreDerivedState;\n  private _extraState?: T;\n\n  private _updateTimeoutId: ReturnType<typeof setTimeout> | undefined;\n  private _listeners = new Set<(params: LiquityStoreListenerParams<T>) => void>();\n\n  /**\n   * The current store state.\n   *\n   * @remarks\n   * Should not be accessed before the store is loaded. Assign a function to\n   * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n   *\n   * See {@link LiquityStoreState} for the list of properties returned.\n   */\n  get state(): LiquityStoreState<T> {\n    return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n  }\n\n  /** @internal */\n  protected abstract _doStart(): () => void;\n\n  /**\n   * Start monitoring the blockchain for Liquity state changes.\n   *\n   * @remarks\n   * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n   * for the first time.\n   *\n   * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n   *\n   * @returns Function to stop the monitoring.\n   */\n  start(): () => void {\n    const doStop = this._doStart();\n\n    return () => {\n      doStop();\n\n      this._cancelUpdateIfScheduled();\n    };\n  }\n\n  private _cancelUpdateIfScheduled() {\n    if (this._updateTimeoutId !== undefined) {\n      clearTimeout(this._updateTimeoutId);\n    }\n  }\n\n  private _scheduleUpdate() {\n    this._cancelUpdateIfScheduled();\n\n    this._updateTimeoutId = setTimeout(() => {\n      this._updateTimeoutId = undefined;\n      this._update();\n    }, 30000);\n  }\n\n  private _logUpdate<U>(name: string, next: U, show?: (next: U) => string): U {\n    if (this.logging) {\n      console.log(`${name} updated to ${show ? show(next) : next}`);\n    }\n\n    return next;\n  }\n\n  private _updateIfChanged<U>(\n    equals: (a: U, b: U) => boolean,\n    name: string,\n    prev: U,\n    next?: U,\n    show?: (next: U) => string\n  ): U {\n    return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n  }\n\n  private _silentlyUpdateIfChanged<U>(equals: (a: U, b: U) => boolean, prev: U, next?: U): U {\n    return next !== undefined && !equals(prev, next) ? next : prev;\n  }\n\n  private _updateFees(name: string, prev: Fees, next?: Fees): Fees {\n    if (next && !next.equals(prev)) {\n      // Filter out fee update spam that happens on every new block by only logging when string\n      // representation changes.\n      if (`${next}` !== `${prev}`) {\n        this._logUpdate(name, next);\n      }\n      return next;\n    } else {\n      return prev;\n    }\n  }\n\n  private _reduce(\n    baseState: LiquityStoreBaseState,\n    baseStateUpdate: Partial<LiquityStoreBaseState>\n  ): LiquityStoreBaseState {\n    return {\n      frontend: this._updateIfChanged(\n        frontendStatusEquals,\n        \"frontend\",\n        baseState.frontend,\n        baseStateUpdate.frontend,\n        showFrontendStatus\n      ),\n\n      ownFrontend: this._updateIfChanged(\n        frontendStatusEquals,\n        \"ownFrontend\",\n        baseState.ownFrontend,\n        baseStateUpdate.ownFrontend,\n        showFrontendStatus\n      ),\n\n      numberOfTroves: this._updateIfChanged(\n        strictEquals,\n        \"numberOfTroves\",\n        baseState.numberOfTroves,\n        baseStateUpdate.numberOfTroves\n      ),\n\n      accountBalance: this._updateIfChanged(\n        eq,\n        \"accountBalance\",\n        baseState.accountBalance,\n        baseStateUpdate.accountBalance\n      ),\n\n      lusdBalance: this._updateIfChanged(\n        eq,\n        \"lusdBalance\",\n        baseState.lusdBalance,\n        baseStateUpdate.lusdBalance\n      ),\n\n      lqtyBalance: this._updateIfChanged(\n        eq,\n        \"lqtyBalance\",\n        baseState.lqtyBalance,\n        baseStateUpdate.lqtyBalance\n      ),\n\n      uniTokenBalance: this._updateIfChanged(\n        eq,\n        \"uniTokenBalance\",\n        baseState.uniTokenBalance,\n        baseStateUpdate.uniTokenBalance\n      ),\n\n      uniTokenAllowance: this._updateIfChanged(\n        eq,\n        \"uniTokenAllowance\",\n        baseState.uniTokenAllowance,\n        baseStateUpdate.uniTokenAllowance\n      ),\n\n      remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(\n        eq,\n        baseState.remainingLiquidityMiningLQTYReward,\n        baseStateUpdate.remainingLiquidityMiningLQTYReward\n      ),\n\n      liquidityMiningStake: this._updateIfChanged(\n        eq,\n        \"liquidityMiningStake\",\n        baseState.liquidityMiningStake,\n        baseStateUpdate.liquidityMiningStake\n      ),\n\n      totalStakedUniTokens: this._updateIfChanged(\n        eq,\n        \"totalStakedUniTokens\",\n        baseState.totalStakedUniTokens,\n        baseStateUpdate.totalStakedUniTokens\n      ),\n\n      liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(\n        eq,\n        baseState.liquidityMiningLQTYReward,\n        baseStateUpdate.liquidityMiningLQTYReward\n      ),\n\n      collateralSurplusBalance: this._updateIfChanged(\n        eq,\n        \"collateralSurplusBalance\",\n        baseState.collateralSurplusBalance,\n        baseStateUpdate.collateralSurplusBalance\n      ),\n\n      price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n\n      lusdInStabilityPool: this._updateIfChanged(\n        eq,\n        \"lusdInStabilityPool\",\n        baseState.lusdInStabilityPool,\n        baseStateUpdate.lusdInStabilityPool\n      ),\n\n      total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n\n      totalRedistributed: this._updateIfChanged(\n        equals,\n        \"totalRedistributed\",\n        baseState.totalRedistributed,\n        baseStateUpdate.totalRedistributed\n      ),\n\n      troveBeforeRedistribution: this._updateIfChanged(\n        equals,\n        \"troveBeforeRedistribution\",\n        baseState.troveBeforeRedistribution,\n        baseStateUpdate.troveBeforeRedistribution\n      ),\n\n      stabilityDeposit: this._updateIfChanged(\n        equals,\n        \"stabilityDeposit\",\n        baseState.stabilityDeposit,\n        baseStateUpdate.stabilityDeposit\n      ),\n\n      remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(\n        eq,\n        baseState.remainingStabilityPoolLQTYReward,\n        baseStateUpdate.remainingStabilityPoolLQTYReward\n      ),\n\n      _feesInNormalMode: this._silentlyUpdateIfChanged(\n        equals,\n        baseState._feesInNormalMode,\n        baseStateUpdate._feesInNormalMode\n      ),\n\n      lqtyStake: this._updateIfChanged(\n        equals,\n        \"lqtyStake\",\n        baseState.lqtyStake,\n        baseStateUpdate.lqtyStake\n      ),\n\n      totalStakedLQTY: this._updateIfChanged(\n        eq,\n        \"totalStakedLQTY\",\n        baseState.totalStakedLQTY,\n        baseStateUpdate.totalStakedLQTY\n      ),\n\n      _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(\n        equals,\n        baseState._riskiestTroveBeforeRedistribution,\n        baseStateUpdate._riskiestTroveBeforeRedistribution\n      )\n    };\n  }\n\n  private _derive({\n    troveBeforeRedistribution,\n    totalRedistributed,\n    _feesInNormalMode,\n    total,\n    price,\n    _riskiestTroveBeforeRedistribution\n  }: LiquityStoreBaseState): LiquityStoreDerivedState {\n    const fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n\n    return {\n      trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n      fees,\n      borrowingRate: fees.borrowingRate(),\n      redemptionRate: fees.redemptionRate(),\n      haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution\n        .applyRedistribution(totalRedistributed)\n        .collateralRatioIsBelowMinimum(price)\n    };\n  }\n\n  private _reduceDerived(\n    derivedState: LiquityStoreDerivedState,\n    derivedStateUpdate: LiquityStoreDerivedState\n  ): LiquityStoreDerivedState {\n    return {\n      fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n\n      trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n\n      borrowingRate: this._silentlyUpdateIfChanged(\n        eq,\n        derivedState.borrowingRate,\n        derivedStateUpdate.borrowingRate\n      ),\n\n      redemptionRate: this._silentlyUpdateIfChanged(\n        eq,\n        derivedState.redemptionRate,\n        derivedStateUpdate.redemptionRate\n      ),\n\n      haveUndercollateralizedTroves: this._updateIfChanged(\n        strictEquals,\n        \"haveUndercollateralizedTroves\",\n        derivedState.haveUndercollateralizedTroves,\n        derivedStateUpdate.haveUndercollateralizedTroves\n      )\n    };\n  }\n\n  /** @internal */\n  protected abstract _reduceExtra(extraState: T, extraStateUpdate: Partial<T>): T;\n\n  private _notify(params: LiquityStoreListenerParams<T>) {\n    // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n    // existing listeners, as that could result in infinite loops.\n    //\n    // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n    // the original set. This way we avoid calling listeners that have already been unsubscribed\n    // by an earlier listener callback.\n    [...this._listeners].forEach(listener => {\n      if (this._listeners.has(listener)) {\n        listener(params);\n      }\n    });\n  }\n\n  /**\n   * Register a state change listener.\n   *\n   * @param listener - Function that will be called whenever state changes.\n   * @returns Function to unregister this listener.\n   */\n  subscribe(listener: (params: LiquityStoreListenerParams<T>) => void): () => void {\n    const uniqueListener = wrap(listener);\n\n    this._listeners.add(uniqueListener);\n\n    return () => {\n      this._listeners.delete(uniqueListener);\n    };\n  }\n\n  /** @internal */\n  protected _load(baseState: LiquityStoreBaseState, extraState?: T): void {\n    assert(!this._loaded);\n\n    this._baseState = baseState;\n    this._derivedState = this._derive(baseState);\n    this._extraState = extraState;\n    this._loaded = true;\n\n    this._scheduleUpdate();\n\n    if (this.onLoaded) {\n      this.onLoaded();\n    }\n  }\n\n  /** @internal */\n  protected _update(\n    baseStateUpdate?: Partial<LiquityStoreBaseState>,\n    extraStateUpdate?: Partial<T>\n  ): void {\n    assert(this._baseState && this._derivedState);\n\n    const oldState = this.state;\n\n    if (baseStateUpdate) {\n      this._baseState = this._reduce(this._baseState, baseStateUpdate);\n    }\n\n    // Always running this lets us derive state based on passage of time, like baseRate decay\n    this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n\n    if (extraStateUpdate) {\n      assert(this._extraState);\n      this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n    }\n\n    this._scheduleUpdate();\n\n    this._notify({\n      newState: this.state,\n      oldState,\n      stateChange: difference(this.state, oldState)\n    });\n  }\n}\n", "import { Decimal } from \"./Decimal\";\nimport { Fees } from \"./Fees\";\nimport { LQTYStake } from \"./LQTYStake\";\nimport { StabilityDeposit } from \"./StabilityDeposit\";\nimport { Trove, TroveWithPendingRedistribution, UserTrove } from \"./Trove\";\nimport { FrontendStatus, ReadableLiquity, TroveListingParams } from \"./ReadableLiquity\";\n\n/** @internal */\nexport type _ReadableLiquityWithExtraParamsBase<T extends unknown[]> = {\n  [P in keyof ReadableLiquity]: ReadableLiquity[P] extends (...params: infer A) => infer R\n    ? (...params: [...originalParams: A, ...extraParams: T]) => R\n    : never;\n};\n\n/** @internal */\nexport type _LiquityReadCacheBase<T extends unknown[]> = {\n  [P in keyof ReadableLiquity]: ReadableLiquity[P] extends (...args: infer A) => Promise<infer R>\n    ? (...params: [...originalParams: A, ...extraParams: T]) => R | undefined\n    : never;\n};\n\n// Overloads get lost in the mapping, so we need to define them again...\n\n/** @internal */\nexport interface _ReadableLiquityWithExtraParams<T extends unknown[]>\n  extends _ReadableLiquityWithExtraParamsBase<T> {\n  getTroves(\n    params: TroveListingParams & { beforeRedistribution: true },\n    ...extraParams: T\n  ): Promise<TroveWithPendingRedistribution[]>;\n\n  getTroves(params: TroveListingParams, ...extraParams: T): Promise<UserTrove[]>;\n}\n\n/** @internal */\nexport interface _LiquityReadCache<T extends unknown[]> extends _LiquityReadCacheBase<T> {\n  getTroves(\n    params: TroveListingParams & { beforeRedistribution: true },\n    ...extraParams: T\n  ): TroveWithPendingRedistribution[] | undefined;\n\n  getTroves(params: TroveListingParams, ...extraParams: T): UserTrove[] | undefined;\n}\n\n/** @internal */\nexport class _CachedReadableLiquity<T extends unknown[]>\n  implements _ReadableLiquityWithExtraParams<T> {\n  private _readable: _ReadableLiquityWithExtraParams<T>;\n  private _cache: _LiquityReadCache<T>;\n\n  constructor(readable: _ReadableLiquityWithExtraParams<T>, cache: _LiquityReadCache<T>) {\n    this._readable = readable;\n    this._cache = cache;\n  }\n\n  async getTotalRedistributed(...extraParams: T): Promise<Trove> {\n    return (\n      this._cache.getTotalRedistributed(...extraParams) ??\n      this._readable.getTotalRedistributed(...extraParams)\n    );\n  }\n\n  async getTroveBeforeRedistribution(\n    address?: string,\n    ...extraParams: T\n  ): Promise<TroveWithPendingRedistribution> {\n    return (\n      this._cache.getTroveBeforeRedistribution(address, ...extraParams) ??\n      this._readable.getTroveBeforeRedistribution(address, ...extraParams)\n    );\n  }\n\n  async getTrove(address?: string, ...extraParams: T): Promise<UserTrove> {\n    const [troveBeforeRedistribution, totalRedistributed] = await Promise.all([\n      this.getTroveBeforeRedistribution(address, ...extraParams),\n      this.getTotalRedistributed(...extraParams)\n    ]);\n\n    return troveBeforeRedistribution.applyRedistribution(totalRedistributed);\n  }\n\n  async getNumberOfTroves(...extraParams: T): Promise<number> {\n    return (\n      this._cache.getNumberOfTroves(...extraParams) ??\n      this._readable.getNumberOfTroves(...extraParams)\n    );\n  }\n\n  async getPrice(...extraParams: T): Promise<Decimal> {\n    return this._cache.getPrice(...extraParams) ?? this._readable.getPrice(...extraParams);\n  }\n\n  async getTotal(...extraParams: T): Promise<Trove> {\n    return this._cache.getTotal(...extraParams) ?? this._readable.getTotal(...extraParams);\n  }\n\n  async getStabilityDeposit(address?: string, ...extraParams: T): Promise<StabilityDeposit> {\n    return (\n      this._cache.getStabilityDeposit(address, ...extraParams) ??\n      this._readable.getStabilityDeposit(address, ...extraParams)\n    );\n  }\n\n  async getRemainingStabilityPoolLQTYReward(...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getRemainingStabilityPoolLQTYReward(...extraParams) ??\n      this._readable.getRemainingStabilityPoolLQTYReward(...extraParams)\n    );\n  }\n\n  async getLUSDInStabilityPool(...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getLUSDInStabilityPool(...extraParams) ??\n      this._readable.getLUSDInStabilityPool(...extraParams)\n    );\n  }\n\n  async getLUSDBalance(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getLUSDBalance(address, ...extraParams) ??\n      this._readable.getLUSDBalance(address, ...extraParams)\n    );\n  }\n\n  async getLQTYBalance(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getLQTYBalance(address, ...extraParams) ??\n      this._readable.getLQTYBalance(address, ...extraParams)\n    );\n  }\n\n  async getUniTokenBalance(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getUniTokenBalance(address, ...extraParams) ??\n      this._readable.getUniTokenBalance(address, ...extraParams)\n    );\n  }\n\n  async getUniTokenAllowance(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getUniTokenAllowance(address, ...extraParams) ??\n      this._readable.getUniTokenAllowance(address, ...extraParams)\n    );\n  }\n\n  async getRemainingLiquidityMiningLQTYReward(...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getRemainingLiquidityMiningLQTYReward(...extraParams) ??\n      this._readable.getRemainingLiquidityMiningLQTYReward(...extraParams)\n    );\n  }\n\n  async getLiquidityMiningStake(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getLiquidityMiningStake(address, ...extraParams) ??\n      this._readable.getLiquidityMiningStake(address, ...extraParams)\n    );\n  }\n\n  async getTotalStakedUniTokens(...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getTotalStakedUniTokens(...extraParams) ??\n      this._readable.getTotalStakedUniTokens(...extraParams)\n    );\n  }\n\n  async getLiquidityMiningLQTYReward(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getLiquidityMiningLQTYReward(address, ...extraParams) ??\n      this._readable.getLiquidityMiningLQTYReward(address, ...extraParams)\n    );\n  }\n\n  async getCollateralSurplusBalance(address?: string, ...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getCollateralSurplusBalance(address, ...extraParams) ??\n      this._readable.getCollateralSurplusBalance(address, ...extraParams)\n    );\n  }\n\n  getTroves(\n    params: TroveListingParams & { beforeRedistribution: true },\n    ...extraParams: T\n  ): Promise<TroveWithPendingRedistribution[]>;\n\n  getTroves(params: TroveListingParams, ...extraParams: T): Promise<UserTrove[]>;\n\n  async getTroves(params: TroveListingParams, ...extraParams: T): Promise<UserTrove[]> {\n    const { beforeRedistribution, ...restOfParams } = params;\n\n    const [totalRedistributed, troves] = await Promise.all([\n      beforeRedistribution ? undefined : this.getTotalRedistributed(...extraParams),\n      this._cache.getTroves({ beforeRedistribution: true, ...restOfParams }, ...extraParams) ??\n        this._readable.getTroves({ beforeRedistribution: true, ...restOfParams }, ...extraParams)\n    ]);\n\n    if (totalRedistributed) {\n      return troves.map(trove => trove.applyRedistribution(totalRedistributed));\n    } else {\n      return troves;\n    }\n  }\n\n  async getFees(...extraParams: T): Promise<Fees> {\n    return this._cache.getFees(...extraParams) ?? this._readable.getFees(...extraParams);\n  }\n\n  async getLQTYStake(address?: string, ...extraParams: T): Promise<LQTYStake> {\n    return (\n      this._cache.getLQTYStake(address, ...extraParams) ??\n      this._readable.getLQTYStake(address, ...extraParams)\n    );\n  }\n\n  async getTotalStakedLQTY(...extraParams: T): Promise<Decimal> {\n    return (\n      this._cache.getTotalStakedLQTY(...extraParams) ??\n      this._readable.getTotalStakedLQTY(...extraParams)\n    );\n  }\n\n  async getFrontendStatus(address?: string, ...extraParams: T): Promise<FrontendStatus> {\n    return (\n      this._cache.getFrontendStatus(address, ...extraParams) ??\n      this._readable.getFrontendStatus(address, ...extraParams)\n    );\n  }\n}\n", "export * from \"./src/constants\";\nexport * from \"./src/Decimal\";\nexport * from \"./src/Trove\";\nexport * from \"./src/StabilityDeposit\";\nexport * from \"./src/LQTYStake\";\nexport * from \"./src/Fees\";\nexport * from \"./src/ReadableLiquity\";\nexport * from \"./src/ObservableLiquity\";\nexport * from \"./src/TransactableLiquity\";\nexport * from \"./src/SendableLiquity\";\nexport * from \"./src/PopulatableLiquity\";\nexport * from \"./src/LiquityStore\";\nexport * from \"./src/_CachedReadableLiquity\";\n"],
  "mappings": "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",
  "names": ["inspect", "equals"]
}
