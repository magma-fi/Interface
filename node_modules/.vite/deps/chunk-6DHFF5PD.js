// ../../node_modules/@theme-ui/css/dist/index.esm.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function __internalGetUseRootStyles(theme) {
  if (theme === void 0) {
    theme = {};
  }
  var _theme = theme, useRootStyles = _theme.useRootStyles, useBodyStyles = _theme.useBodyStyles;
  var root = "useRootStyles" in theme && useRootStyles != null;
  return {
    scope: root ? "html" : "body",
    rootStyles: root ? useRootStyles : useBodyStyles
  };
}
var THEME_UI_DEFAULT_KEY = "__default";
var hasDefault = function hasDefault2(x) {
  return typeof x === "object" && x !== null && THEME_UI_DEFAULT_KEY in x;
};
function get(obj, path, fallback, p, undef) {
  var pathArray = path && typeof path === "string" ? path.split(".") : [path];
  for (p = 0; p < pathArray.length; p++) {
    obj = obj ? obj[pathArray[p]] : undef;
  }
  if (obj === undef)
    return fallback;
  return hasDefault(obj) ? obj[THEME_UI_DEFAULT_KEY] : obj;
}
var getObjectWithVariants = function getObjectWithVariants2(obj, theme) {
  if (obj && obj["variant"]) {
    var result = {};
    for (var key in obj) {
      var x = obj[key];
      if (key === "variant") {
        var val = typeof x === "function" ? x(theme) : x;
        var variant = getObjectWithVariants2(get(theme, val), theme);
        result = _extends({}, result, variant);
      } else {
        result[key] = x;
      }
    }
    return result;
  }
  return obj;
};
var defaultBreakpoints = [40, 52, 64].map(function(n) {
  return n + "em";
});
var defaultTheme = {
  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
};
var aliases = {
  bg: "backgroundColor",
  m: "margin",
  mt: "marginTop",
  mr: "marginRight",
  mb: "marginBottom",
  ml: "marginLeft",
  mx: "marginX",
  my: "marginY",
  p: "padding",
  pt: "paddingTop",
  pr: "paddingRight",
  pb: "paddingBottom",
  pl: "paddingLeft",
  px: "paddingX",
  py: "paddingY"
};
var multiples = {
  marginX: ["marginLeft", "marginRight"],
  marginY: ["marginTop", "marginBottom"],
  paddingX: ["paddingLeft", "paddingRight"],
  paddingY: ["paddingTop", "paddingBottom"],
  scrollPaddingX: ["scrollPaddingLeft", "scrollPaddingRight"],
  scrollPaddingY: ["scrollPaddingTop", "scrollPaddingBottom"],
  size: ["width", "height"]
};
var scales = {
  color: "colors",
  backgroundColor: "colors",
  borderColor: "colors",
  caretColor: "colors",
  columnRuleColor: "colors",
  opacity: "opacities",
  transition: "transitions",
  margin: "space",
  marginTop: "space",
  marginRight: "space",
  marginBottom: "space",
  marginLeft: "space",
  marginX: "space",
  marginY: "space",
  marginBlock: "space",
  marginBlockEnd: "space",
  marginBlockStart: "space",
  marginInline: "space",
  marginInlineEnd: "space",
  marginInlineStart: "space",
  padding: "space",
  paddingTop: "space",
  paddingRight: "space",
  paddingBottom: "space",
  paddingLeft: "space",
  paddingX: "space",
  paddingY: "space",
  paddingBlock: "space",
  paddingBlockEnd: "space",
  paddingBlockStart: "space",
  paddingInline: "space",
  paddingInlineEnd: "space",
  paddingInlineStart: "space",
  scrollPadding: "space",
  scrollPaddingTop: "space",
  scrollPaddingRight: "space",
  scrollPaddingBottom: "space",
  scrollPaddingLeft: "space",
  scrollPaddingX: "space",
  scrollPaddingY: "space",
  inset: "space",
  insetBlock: "space",
  insetBlockEnd: "space",
  insetBlockStart: "space",
  insetInline: "space",
  insetInlineEnd: "space",
  insetInlineStart: "space",
  top: "space",
  right: "space",
  bottom: "space",
  left: "space",
  gridGap: "space",
  gridColumnGap: "space",
  gridRowGap: "space",
  gap: "space",
  columnGap: "space",
  rowGap: "space",
  fontFamily: "fonts",
  fontSize: "fontSizes",
  fontWeight: "fontWeights",
  lineHeight: "lineHeights",
  letterSpacing: "letterSpacings",
  border: "borders",
  borderTop: "borders",
  borderRight: "borders",
  borderBottom: "borders",
  borderLeft: "borders",
  borderWidth: "borderWidths",
  borderStyle: "borderStyles",
  borderRadius: "radii",
  borderTopRightRadius: "radii",
  borderTopLeftRadius: "radii",
  borderBottomRightRadius: "radii",
  borderBottomLeftRadius: "radii",
  borderTopWidth: "borderWidths",
  borderTopColor: "colors",
  borderTopStyle: "borderStyles",
  borderBottomWidth: "borderWidths",
  borderBottomColor: "colors",
  borderBottomStyle: "borderStyles",
  borderLeftWidth: "borderWidths",
  borderLeftColor: "colors",
  borderLeftStyle: "borderStyles",
  borderRightWidth: "borderWidths",
  borderRightColor: "colors",
  borderRightStyle: "borderStyles",
  borderBlock: "borders",
  borderBlockEnd: "borders",
  borderBlockEndStyle: "borderStyles",
  borderBlockEndWidth: "borderWidths",
  borderBlockStart: "borders",
  borderBlockStartStyle: "borderStyles",
  borderBlockStartWidth: "borderWidths",
  borderBlockStyle: "borderStyles",
  borderBlockWidth: "borderWidths",
  borderEndEndRadius: "radii",
  borderEndStartRadius: "radii",
  borderInline: "borders",
  borderInlineEnd: "borders",
  borderInlineEndStyle: "borderStyles",
  borderInlineEndWidth: "borderWidths",
  borderInlineStart: "borders",
  borderInlineStartStyle: "borderStyles",
  borderInlineStartWidth: "borderWidths",
  borderInlineStyle: "borderStyles",
  borderInlineWidth: "borderWidths",
  borderStartEndRadius: "radii",
  borderStartStartRadius: "radii",
  outlineColor: "colors",
  boxShadow: "shadows",
  textShadow: "shadows",
  zIndex: "zIndices",
  width: "sizes",
  minWidth: "sizes",
  maxWidth: "sizes",
  height: "sizes",
  minHeight: "sizes",
  maxHeight: "sizes",
  flexBasis: "sizes",
  size: "sizes",
  blockSize: "sizes",
  inlineSize: "sizes",
  maxBlockSize: "sizes",
  maxInlineSize: "sizes",
  minBlockSize: "sizes",
  minInlineSize: "sizes",
  // svg
  fill: "colors",
  stroke: "colors"
};
var positiveOrNegative = function positiveOrNegative2(scale, value) {
  if (typeof value !== "number" || value >= 0) {
    if (typeof value === "string" && value.startsWith("-")) {
      var valueWithoutMinus = value.substring(1);
      var _n = get(scale, valueWithoutMinus, valueWithoutMinus);
      return "-" + _n;
    }
    return get(scale, value, value);
  }
  var absolute = Math.abs(value);
  var n = get(scale, absolute, absolute);
  if (typeof n === "string")
    return "-" + n;
  return Number(n) * -1;
};
var transforms = ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginBlock", "marginBlockEnd", "marginBlockStart", "marginInline", "marginInlineEnd", "marginInlineStart", "top", "bottom", "left", "right"].reduce(function(acc, curr) {
  var _extends2;
  return _extends({}, acc, (_extends2 = {}, _extends2[curr] = positiveOrNegative, _extends2));
}, {});
var responsive = function responsive2(styles) {
  return function(theme) {
    var next = {};
    var breakpoints = theme && theme.breakpoints || defaultBreakpoints;
    var mediaQueries = [null].concat(breakpoints.map(function(n) {
      return "@media screen and (min-width: " + n + ")";
    }));
    for (var k in styles) {
      var key = k;
      var value = styles[key];
      if (typeof value === "function") {
        value = value(theme || {});
      }
      if (value === false || value == null) {
        continue;
      }
      if (!Array.isArray(value)) {
        next[key] = value;
        continue;
      }
      for (var i = 0; i < value.slice(0, mediaQueries.length).length; i++) {
        var media = mediaQueries[i];
        if (!media) {
          next[key] = value[i];
          continue;
        }
        next[media] = next[media] || {};
        if (value[i] == null)
          continue;
        next[media][key] = value[i];
      }
    }
    return next;
  };
};
var css = function css2(args) {
  if (args === void 0) {
    args = {};
  }
  return function(props) {
    if (props === void 0) {
      props = {};
    }
    var theme = _extends({}, defaultTheme, "theme" in props ? props.theme : props);
    var obj = getObjectWithVariants(typeof args === "function" ? args(theme) : args, theme);
    var styles = responsive(obj)(theme);
    var result = {};
    for (var key in styles) {
      var x = styles[key];
      var val = typeof x === "function" ? x(theme) : x;
      if (val && typeof val === "object") {
        if (hasDefault(val)) {
          result[key] = val[THEME_UI_DEFAULT_KEY];
          continue;
        }
        result[key] = css2(val)(theme);
        continue;
      }
      var prop = key in aliases ? aliases[key] : key;
      var scaleName = prop in scales ? scales[prop] : void 0;
      var scale = scaleName ? theme == null ? void 0 : theme[scaleName] : get(theme, prop, {});
      var transform = get(transforms, prop, get);
      var value = transform(scale, val, val);
      if (prop in multiples) {
        var dirs = multiples[prop];
        for (var i = 0; i < dirs.length; i++) {
          result[dirs[i]] = value;
        }
      } else {
        result[prop] = value;
      }
    }
    return result;
  };
};

// ../../node_modules/@theme-ui/parse-props/dist/index.esm.js
var getCSS = function getCSS2(props) {
  return function(theme) {
    var styles = css(props.sx)(theme);
    var raw = typeof props.css === "function" ? props.css(theme) : props.css;
    return [styles, raw];
  };
};
var parseProps = function parseProps2(props) {
  if (!props || !props.sx && !props.css)
    return props;
  var next = {};
  for (var key in props) {
    if (key === "sx")
      continue;
    next[key] = props[key];
  }
  next.css = getCSS(props);
  return next;
};
var index_esm_default = parseProps;

export {
  __internalGetUseRootStyles,
  get,
  css,
  index_esm_default
};
//# sourceMappingURL=chunk-6DHFF5PD.js.map
