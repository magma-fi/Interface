{
  "version": 3,
  "sources": ["../../../../../node_modules/@ethersproject/abi/src.ts/_version.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/fragments.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/abstract-coder.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/address.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/anonymous.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/array.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/boolean.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/bytes.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/fixed-bytes.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/null.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/number.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/string.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/coders/tuple.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/abi-coder.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/interface.ts", "../../../../../node_modules/@ethersproject/abi/src.ts/index.ts"],
  "sourcesContent": ["export const version = \"abi/5.7.0\";\n", "\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n", "\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nexport interface Result extends ReadonlyArray<any> {\n    readonly [key: string]: any;\n}\n\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n\n    _throwError(message: string, value: any): void {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\nexport class Writer {\n    readonly wordSize: number;\n\n    _data: Array<Uint8Array>;\n    _dataLength: number;\n    _padding: Uint8Array;\n\n    constructor(wordSize?: number) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [ ];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n\n    get data(): string {\n        return hexConcat(this._data);\n    }\n    get length(): number { return this._dataLength; }\n\n    _writeData(data: Uint8Array): number {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this._writeData(concat(writer._data));\n    }\n\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([ bytes, this._padding.slice(paddingOffset) ])\n        }\n        return this._writeData(bytes);\n    }\n\n    _getValue(value: BigNumberish): Uint8Array {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([ this._padding.slice(bytes.length % this.wordSize), bytes ]);\n        }\n        return bytes;\n    }\n\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value: BigNumberish): number {\n        return this._writeData(this._getValue(value));\n    }\n\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value: BigNumberish) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\n\nexport class Reader {\n    readonly wordSize: number;\n    readonly allowLoose: boolean;\n\n    readonly _data: Uint8Array;\n    readonly _coerceFunc: CoerceFunc;\n\n    _offset: number;\n\n    constructor(data: BytesLike, wordSize?: number, coerceFunc?: CoerceFunc, allowLoose?: boolean) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n\n        this._offset = 0;\n    }\n\n    get data(): string { return hexlify(this._data); }\n    get consumed(): number { return this._offset; }\n\n    // The default Coerce function\n    static coerce(name: string, value: any): any {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) { value =  value.toNumber(); }\n        return value;\n    }\n\n    coerce(name: string, value: any): any {\n        if (this._coerceFunc) { return this._coerceFunc(name, value); }\n        return Reader.coerce(name, value);\n    }\n\n    _peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength)\n    }\n\n    subReader(offset: number): Reader {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    readValue(): BigNumber {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n", "\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, value: string): number {\n        try {\n            value = getAddress(value)\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n\n", "\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    private coder: Coder;\n\n    constructor(coder: Coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n\n    defaultValue(): any {\n        return this.coder.defaultValue();\n    }\n\n    encode(writer: Writer, value: any): number {\n        return this.coder.encode(writer, value);\n    }\n\n    decode(reader: Reader): any {\n        return this.coder.decode(reader);\n    }\n}\n", "\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\n\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = null;\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\nexport function unpack(reader: Reader, coders: Array<Coder>): Result {\n    let values: any = [];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) { accum[name] = 0; }\n            accum[name]++;\n        }\n        return accum;\n    }, <{ [ name: string ]: number }>{ });\n\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder: Coder, index: number) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) { return; }\n\n        if (name === \"length\") { name = \"_length\"; }\n\n        if (values[name] != null) { return; }\n\n        const value = values[index];\n\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n\n    return Object.freeze(values);\n}\n\n\nexport class ArrayCoder extends Coder {\n    readonly coder: Coder;\n    readonly length: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n\n        this.coder = coder;\n        this.length = length;\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, value: Array<any>): number {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n\n", "\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class BooleanCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n\n    defaultValue(): boolean {\n        return false;\n    }\n\n    encode(writer: Writer, value: boolean): number {\n        return writer.writeValue(value ? 1: 0);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n\n", "\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class DynamicBytesCoder extends Coder {\n    constructor(type: string, localName: string) {\n       super(type, type, localName, true);\n    }\n\n    defaultValue(): string {\n        return \"0x\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n\n    decode(reader: Reader): any {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\n\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName: string) {\n        super(\"bytes\", localName);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n\n\n", "\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    readonly size: number;\n\n    constructor(size: number, localName: string) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n\n    defaultValue(): string {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n\n    encode(writer: Writer, value: BytesLike): number {\n        let data = arrayify(value);\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", value); }\n        return writer.writeBytes(data);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n", "\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NullCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"null\", \"\", localName, false);\n    }\n\n    defaultValue(): null {\n        return null;\n    }\n\n    encode(writer: Writer, value: any): number {\n        if (value != null) { this._throwError(\"not null\", value); }\n        return writer.writeBytes([ ]);\n    }\n\n    decode(reader: Reader): any {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n", "\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NumberCoder extends Coder {\n    readonly size: number;\n    readonly signed: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        this.size = size;\n        this.signed = signed;\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, value: BigNumberish): number {\n        let v = BigNumber.from(value);\n\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n    }\n\n    decode(reader: Reader): any {\n        let value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n    }\n}\n\n", "\"use strict\";\n\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Reader, Writer } from \"./abstract-coder\";\nimport { DynamicBytesCoder } from \"./bytes\";\n\nexport class StringCoder extends DynamicBytesCoder {\n\n    constructor(localName: string) {\n        super(\"string\", localName);\n    }\n\n    defaultValue(): string {\n        return \"\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n\n    decode(reader: Reader): any {\n        return toUtf8String(super.decode(reader));\n    }\n}\n", "\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\n\nexport class TupleCoder extends Coder {\n    readonly coders: Array<Coder>;\n\n    constructor(coders: Array<Coder>, localName: string) {\n        let dynamic = false;\n        const types: Array<string> = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) { dynamic = true; }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n\n    defaultValue(): any {\n        const values: any = [ ];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) { accum[name] = 0; }\n                accum[name]++;\n            }\n            return accum;\n        }, <{ [ name: string ]: number }>{ });\n\n        // Add named values\n        this.coders.forEach((coder: Coder, index: number) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) { return; }\n\n            if (name === \"length\") { name = \"_length\"; }\n\n            if (values[name] != null) { return; }\n\n            values[name] = values[index];\n        });\n\n        return Object.freeze(values);\n    }\n\n    encode(writer: Writer, value: Array<any> | { [ name: string ]: any }): number {\n        return pack(writer, this.coders, value);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n\n", "\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n", "\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment | string, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = (<EventFragment>eventFragment).inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n", "\"use strict\";\n\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, JsonFragmentType, ParamType } from \"./fragments\";\nimport { AbiCoder, CoerceFunc, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Indexed, Interface, LogDescription, Result, TransactionDescription } from \"./interface\";\n\nexport {\n    ConstructorFragment,\n    ErrorFragment,\n    EventFragment,\n    Fragment,\n    FunctionFragment,\n    ParamType,\n    FormatTypes,\n\n    AbiCoder,\n    defaultAbiCoder,\n\n    Interface,\n    Indexed,\n\n    /////////////////////////\n    // Types\n\n    CoerceFunc,\n    JsonFragment,\n    JsonFragmentType,\n\n    Result,\n    checkResultErrors,\n\n    LogDescription,\n    TransactionDescription\n};\n"],
  "mappings": "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",
  "names": ["parent", "node", "init_lib", "result", "logger", "init_lib", "init_lib", "logger", "init_lib", "init_lib", "init_lib", "init_lib", "logger", "init_lib", "logger", "init_lib", "value", "init_lib"]
}
