import {
  init_lib3 as init_lib6,
  lib_exports3 as lib_exports6
} from "./chunk-YWBGZ5UC.js";
import "./chunk-CMU2ARS3.js";
import {
  init_lib as init_lib5,
  lib_exports as lib_exports5
} from "./chunk-7F3IPCMU.js";
import "./chunk-5IOYYMYR.js";
import "./chunk-ZWLQA6XW.js";
import "./chunk-7IGKFX3U.js";
import {
  init_lib as init_lib4,
  lib_exports as lib_exports4
} from "./chunk-T52DPOSF.js";
import "./chunk-XHZS53IJ.js";
import "./chunk-OJOX7W3C.js";
import {
  require_assert,
  require_dist
} from "./chunk-PHAN2QNE.js";
import "./chunk-M2ER3SZV.js";
import "./chunk-D4XBSYTF.js";
import "./chunk-OEYWMA6Q.js";
import "./chunk-NX6UMJZK.js";
import {
  init_lib as init_lib3,
  lib_exports as lib_exports3
} from "./chunk-PPBSEKDQ.js";
import "./chunk-HWCAXKAJ.js";
import {
  init_lib as init_lib2,
  lib_exports as lib_exports2
} from "./chunk-WJIB2CDQ.js";
import "./chunk-5OUNQ6TZ.js";
import "./chunk-YV7UKSM3.js";
import "./chunk-5AVNCSA7.js";
import "./chunk-GMRHNXBP.js";
import {
  init_lib,
  lib_exports
} from "./chunk-ILADNUF6.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-W7S2ME4R.js";

// ../lib-ethers/dist/deployments/dev.json
var require_dev = __commonJS({
  "../lib-ethers/dist/deployments/dev.json"(exports, module) {
    module.exports = {
      chainId: 1337,
      version: "5d1c47b87e3bc9a34844a565f76a90506c7727e0",
      deploymentDate: 1699788797e3,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.257201646090534979",
      _priceFeedIsTestnet: true,
      _uniTokenIsMock: true,
      _isDev: true,
      startBlock: 45,
      addresses: {
        activePool: "0x65500A622D5E812E3D4FfB20D369F7442e9F3C46",
        borrowerOperations: "0xB6d395E3302228969DE1592b5eEdf4F27D248D56",
        troveManager: "0x37bd3E248F1bE2a1ECFdE0B81d951CD43D152c3c",
        collSurplusPool: "0xac6Aa2c03FCFBCe2eEdE63b627eC07284f2Cf3D9",
        communityIssuance: "0xA6D97bCe2571B631414ee04EF04604cb8ACe9d6e",
        defaultPool: "0xb16CE51a13909001B2038fC793418125Eea63ba6",
        hintHelpers: "0x5a4716017E8cff6B46fB2475Bb3F73C61dae97c5",
        lockupContractFactory: "0xD7eaCC30c92034142dE3bA11BBA6FD5b4e928e76",
        lqtyStaking: "0xb029Fc8EC25E5DC52Ca6C9091C7cfae9eda73101",
        priceFeed: "0x7f1eC7534aC0b926cED2F123F7a2250A7c221d9B",
        sortedTroves: "0x88ee1651551433bbfFD94d75b5532b1B40E22303",
        stabilityPool: "0xE6e710C92CF844D1eCe390b6eFe7C64687729CFC",
        gasPool: "0xa11ECb62766F8c3F41764a1E0Ccf587198110047",
        unipool: "0x8a6C78817c182180b423D23D2CC630ec6fBA4403",
        lusdToken: "0x71b8f0646B827556B55b028f2B83390D9238c6A8",
        lqtyToken: "0x05234e72eac31F1Efa5297dcf39EA1004efaf352",
        multiTroveGetter: "0xe053d08d289F76cFbf0b9eee8767a3Dda6836b4d",
        uniToken: "0x3fB7Ee7206B1a6bbe81e193A94263c048c92CA58"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/goerli.json
var require_goerli = __commonJS({
  "../lib-ethers/dist/deployments/goerli.json"(exports, module) {
    module.exports = {
      chainId: 5,
      version: "e2f7dc41994854e0b1e1287f73c55894cc501740",
      deploymentDate: 16766202e5,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.257201646090534979",
      _priceFeedIsTestnet: false,
      _uniTokenIsMock: true,
      _isDev: false,
      startBlock: 8506292,
      addresses: {
        activePool: "0x7426EFda9B17992B3F7cE3680D5D128E1F876C05",
        borrowerOperations: "0x94f0835Aa7cEe67fF122419BeE52b82Abe637a16",
        troveManager: "0x6412c93AB383B87Af7c5E673fb3a295c8977A3Ed",
        collSurplusPool: "0x82869137C51e0DC1Bf3aeE5bc1f0B73EADfEBB25",
        communityIssuance: "0x65188ae9dDE4A59b73796Eb26AE33a3D5fe9b84d",
        defaultPool: "0x63a7c03b921f5A59D9f583A34585bC6eFc832b59",
        hintHelpers: "0x7151f3828948B8824C677DA8daf7BD13014c1187",
        lockupContractFactory: "0xA401f217DB7d84432C98272F637E9d450c6D16f2",
        lqtyStaking: "0x02dD2a33d0bBF40343CD09941F275978b1cd4ab9",
        priceFeed: "0x8c2706b7bF86576F16Db7C099F5a62E7Ce8F0661",
        sortedTroves: "0x8C2C33247A691a98d05B60c2D7448687b6C56a86",
        stabilityPool: "0x99Fda92878c1d2f1e0971D1937C50CC578A33E3D",
        gasPool: "0x25fE5Ed43aD2370f31414AC9De11E028A699a40e",
        unipool: "0xDA7Aa96fC750B456a63af90D894063009e26f6ba",
        lusdToken: "0x76ea225E132609D387464e11ce5EFA1764A3799B",
        lqtyToken: "0x220aa3EE61009E33F84901021A271B197e925df2",
        multiTroveGetter: "0x64e8Bc7b037E61c0d2dd53ae7Fc4faF1E6429a19",
        uniToken: "0x94F5C9f75857De515bce1181CEdB3c463E3654C0"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/kovan.json
var require_kovan = __commonJS({
  "../lib-ethers/dist/deployments/kovan.json"(exports, module) {
    module.exports = {
      chainId: 42,
      version: "5174ecd0da4842157aba989499200d690b7e374f",
      deploymentDate: 1617374516e3,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.257201646090534979",
      _priceFeedIsTestnet: false,
      _uniTokenIsMock: false,
      _isDev: false,
      startBlock: 24134777,
      addresses: {
        activePool: "0x2FEB8CC8eD32117D1F39168543f29c30fdf10105",
        borrowerOperations: "0xA289111CC4b306E3F5F15c654D4c318B3dA51813",
        troveManager: "0x5EBeC1ecc36a760A54E35d474F889EfB9E7eD2aD",
        collSurplusPool: "0x1Ce340cC663BDbda54ccb6055da4064C0B7f68cd",
        communityIssuance: "0x7baD384C67302df52Ee78Acc3581c9d9c51F9527",
        defaultPool: "0x706431F2252ba2e5A9a6F7EEFE5CB4902acc23E7",
        hintHelpers: "0xEEBfA9A488E9d83cd1a49b838c14D9231F5F2fCb",
        lockupContractFactory: "0xc34B9083Bf5b5794eFD202A8c3B51A5577e087c1",
        lqtyStaking: "0x82b7384e360DD3f16ed23D15921BB7a878a08b87",
        priceFeed: "0xbA49275F8F890E7296F64b3e81F1Ada656030150",
        sortedTroves: "0x91656701b33eca6425A239930FccAA842D0E2031",
        stabilityPool: "0x04d630Bff6dea193Fd644dEcfC460db249854a02",
        gasPool: "0xd97E194C0659F0d7b051EdF3E317BF4F7A675770",
        unipool: "0xeed1782CaD8bad6eD2072C85e4c5821e67cCf1E1",
        lusdToken: "0x0b02b94638daa719290b5214825dA625af08A02F",
        lqtyToken: "0xd8FABEa5752D52Ee0dEbF6c90948F5446694EE7c",
        multiTroveGetter: "0x9c5977268592E964784EFF50043BFFC035B6b0C7",
        uniToken: "0x6E14b68E16e4211C06bcc8527D6b92A43AA47806"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/rinkeby.json
var require_rinkeby = __commonJS({
  "../lib-ethers/dist/deployments/rinkeby.json"(exports, module) {
    module.exports = {
      chainId: 4,
      version: "5174ecd0da4842157aba989499200d690b7e374f",
      deploymentDate: 1617355618e3,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.257201646090534979",
      _priceFeedIsTestnet: false,
      _uniTokenIsMock: false,
      _isDev: false,
      startBlock: 8341450,
      addresses: {
        activePool: "0xbA49275F8F890E7296F64b3e81F1Ada656030150",
        borrowerOperations: "0x91656701b33eca6425A239930FccAA842D0E2031",
        troveManager: "0x04d630Bff6dea193Fd644dEcfC460db249854a02",
        collSurplusPool: "0xd97E194C0659F0d7b051EdF3E317BF4F7A675770",
        communityIssuance: "0xeed1782CaD8bad6eD2072C85e4c5821e67cCf1E1",
        defaultPool: "0x0b02b94638daa719290b5214825dA625af08A02F",
        hintHelpers: "0xd8FABEa5752D52Ee0dEbF6c90948F5446694EE7c",
        lockupContractFactory: "0x9c5977268592E964784EFF50043BFFC035B6b0C7",
        lqtyStaking: "0x988749E04e5B0863Da4E0Fdb1EaD85C1FA59fCe3",
        priceFeed: "0x692Cd2D9Df7EFD91Ccd17F9eEFD72BAEE0584DB9",
        sortedTroves: "0xac064890c6343F67450ba7aB97df6De38A8D7da8",
        stabilityPool: "0xB8eb11f9eFF55378dfB692296C32DF020f5CC7fF",
        gasPool: "0xbbb26b40c1B32ba1F342DAbC65234516dd29BB44",
        unipool: "0x866b252Acff4c45d6978032865aFb9923D11992A",
        lusdToken: "0x9C5AE6852622ddE455B6Fca4C1551FC0352531a3",
        lqtyToken: "0xF74dcAbeA0954AeB6903c8a71d41e468a6B77357",
        multiTroveGetter: "0x1bE036A6A82b4b774757a48a1bb79653f89eD9fD",
        uniToken: "0x36A5ec67B9C25D765186FBAd2735f1746bd894D8"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/ropsten.json
var require_ropsten = __commonJS({
  "../lib-ethers/dist/deployments/ropsten.json"(exports, module) {
    module.exports = {
      chainId: 3,
      version: "5174ecd0da4842157aba989499200d690b7e374f",
      deploymentDate: 1617356113e3,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.257201646090534979",
      _priceFeedIsTestnet: true,
      _uniTokenIsMock: false,
      _isDev: false,
      startBlock: 9961294,
      addresses: {
        activePool: "0x8bE79B54Bff7754B57294077c2B5017AF9f57dC2",
        borrowerOperations: "0xfe9049E677C5773dd72ac7E19c38c68aB0891744",
        troveManager: "0xcd89b25a565Ad0895c551DAe040c2b5F9Eb11D64",
        collSurplusPool: "0x7426EFda9B17992B3F7cE3680D5D128E1F876C05",
        communityIssuance: "0x94f0835Aa7cEe67fF122419BeE52b82Abe637a16",
        defaultPool: "0x6412c93AB383B87Af7c5E673fb3a295c8977A3Ed",
        hintHelpers: "0x82869137C51e0DC1Bf3aeE5bc1f0B73EADfEBB25",
        lockupContractFactory: "0x65188ae9dDE4A59b73796Eb26AE33a3D5fe9b84d",
        lqtyStaking: "0x63a7c03b921f5A59D9f583A34585bC6eFc832b59",
        priceFeed: "0x7151f3828948B8824C677DA8daf7BD13014c1187",
        sortedTroves: "0xA401f217DB7d84432C98272F637E9d450c6D16f2",
        stabilityPool: "0x02dD2a33d0bBF40343CD09941F275978b1cd4ab9",
        gasPool: "0x8c2706b7bF86576F16Db7C099F5a62E7Ce8F0661",
        unipool: "0x8C2C33247A691a98d05B60c2D7448687b6C56a86",
        lusdToken: "0x99Fda92878c1d2f1e0971D1937C50CC578A33E3D",
        lqtyToken: "0x25fE5Ed43aD2370f31414AC9De11E028A699a40e",
        multiTroveGetter: "0xDA7Aa96fC750B456a63af90D894063009e26f6ba",
        uniToken: "0x14E87Db22A5a402a0A1461FAE94fade1976AAaF7"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/mainnet.json
var require_mainnet = __commonJS({
  "../lib-ethers/dist/deployments/mainnet.json"(exports, module) {
    module.exports = {
      chainId: 1,
      version: "5174ecd0da4842157aba989499200d690b7e374f",
      deploymentDate: 161761159e4,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.367430922986478542",
      _priceFeedIsTestnet: false,
      _uniTokenIsMock: false,
      _isDev: false,
      startBlock: 12178551,
      addresses: {
        activePool: "0xDf9Eb223bAFBE5c5271415C75aeCD68C21fE3D7F",
        borrowerOperations: "0x24179CD81c9e782A4096035f7eC97fB8B783e007",
        troveManager: "0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2",
        collSurplusPool: "0x3D32e8b97Ed5881324241Cf03b2DA5E2EBcE5521",
        communityIssuance: "0xD8c9D9071123a059C6E0A945cF0e0c82b508d816",
        defaultPool: "0x896a3F03176f05CFbb4f006BfCd8723F2B0D741C",
        hintHelpers: "0xE84251b93D9524E0d2e621Ba7dc7cb3579F997C0",
        lockupContractFactory: "0x2eBeF24dA09489218Ba2BECb01867F6DaAeDcD4B",
        lqtyStaking: "0x4f9Fbb3f1E99B56e0Fe2892e623Ed36A76Fc605d",
        priceFeed: "0x4c517D4e2C851CA76d7eC94B805269Df0f2201De",
        sortedTroves: "0x8FdD3fbFEb32b28fb73555518f8b361bCeA741A6",
        stabilityPool: "0x66017D22b0f8556afDd19FC67041899Eb65a21bb",
        gasPool: "0x9555b042F969E561855e5F28cB1230819149A8d9",
        unipool: "0xd37a77E71ddF3373a79BE2eBB76B6c4808bDF0d5",
        lusdToken: "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
        lqtyToken: "0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D",
        multiTroveGetter: "0xFc92d0E9Fa35df17E3A6d9F40716ca2cE749922B",
        uniToken: "0xF20EF17b889b437C151eB5bA15A47bFc62bfF469"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/kiln.json
var require_kiln = __commonJS({
  "../lib-ethers/dist/deployments/kiln.json"(exports, module) {
    module.exports = {
      chainId: 1337802,
      version: "5174ecd0da4842157aba989499200d690b7e374f",
      deploymentDate: 1648542144e3,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.257201646090534979",
      _priceFeedIsTestnet: true,
      _uniTokenIsMock: true,
      _isDev: false,
      startBlock: 146577,
      addresses: {
        activePool: "0xE7d135D2B43EF53D5f644F4A4F39F639174dfFb5",
        borrowerOperations: "0x98695e9bf7DEb6113a6e5d5920d032bD721Fee6E",
        troveManager: "0x6645E03DA2a711f780af7cCE1019Cb9a9135C898",
        collSurplusPool: "0x69E686BBF16f6C04aC2fb49AA0d2f78Ff9f37596",
        communityIssuance: "0x86F51bB9F0A3Ee1d5CfDD2df6e6282170a02Bb59",
        defaultPool: "0x480cB1864e570221ABcADd3316D947864D3F264B",
        hintHelpers: "0x00248273044d46E690e3234cDdd480C5290b325c",
        lockupContractFactory: "0xc27b50C919B36C1b4C7fA0a74AA65E28C92d87Fc",
        lqtyStaking: "0xb21a1c4F84A772397FEfb43CAa5a91947F786E1f",
        priceFeed: "0x92167BE3A0D4c95055342a2fe0bC910f76dE34aC",
        sortedTroves: "0xAe6b0165E406CAB9FEAa503314DFB19Ed1Ea777a",
        stabilityPool: "0x8716B3C98A33D0FF1a922063D1D67B7e40feB80f",
        gasPool: "0x24c925a2570E17718256fe1416dC45837A60b847",
        unipool: "0x2585B38EFeeB31E4a041686Ef78D925871cD957b",
        lusdToken: "0xF47816aa488Ae548ECE5D3051Fb8F5411e774f8B",
        lqtyToken: "0x8CeA94Affd1B7ae5d623A2287403bB33f7Cb83f6",
        multiTroveGetter: "0x59BC9902e0b2c8831E55eF9ee8678e377643c468",
        uniToken: "0x7b6c5109F353236294123B0a55896b760708008c"
      }
    };
  }
});

// ../lib-ethers/dist/deployments/iotexTestnet.json
var require_iotexTestnet = __commonJS({
  "../lib-ethers/dist/deployments/iotexTestnet.json"(exports, module) {
    module.exports = {
      chainId: 4690,
      version: "1",
      deploymentDate: 161761159e4,
      bootstrapPeriod: 1209600,
      totalStabilityPoolLQTYReward: "32000000",
      liquidityMiningLQTYRewardRate: "0.367430922986478542",
      _priceFeedIsTestnet: false,
      _uniTokenIsMock: false,
      _isDev: false,
      startBlock: 8506292,
      addresses: {
        activePool: "0x28347DA75a26955995738B6dB54aEAa6321a807d",
        borrowerOperations: "0xc69c70cBa1Bbe39E4E3a77Ec0cA13F686C15112D",
        troveManager: "0x321708a3057fe4497e5854ba905063520047A103",
        collSurplusPool: "0xA0cAd8E0291D0396C4A9Ff691Eae21dd8dfd7De0",
        communityIssuance: "0xcCE1Bd32CDaCa7Bb8401ABb7f2bD12de24C534C7",
        defaultPool: "0xA0fA73ce0F1F457028dBd1F6337f7FDfa64E68EB",
        hintHelpers: "0x424F05ffE2e897baf024dE543D4C5Fd346548d5F",
        lockupContractFactory: "0x115F50025F23a87388D8AC6c62C13CF691525Aea",
        lqtyStaking: "0xCBdf9D0C66CE1b380ABbdDF082da8fc5A927b1B6",
        priceFeed: "0x247BF943a0b8DE77536742FCEF1d70DdaBF2f4a8",
        sortedTroves: "0xAbad362b4DFfaFE3047EC10c68155EB99f4b9301",
        stabilityPool: "0xe00cEd490624c622dAB8419974020b6d53425C4a",
        gasPool: "0xba24a083a88B93b46604BE05fBD90e43a6f1c181",
        lusdToken: "0x91cD0E1a9fE6D83801B22a4Fd421Db42c0287e46",
        unipool: "",
        lqtyToken: "",
        multiTroveGetter: "0x680693EFFC3E8F61dAbFb00150e8120682360A13",
        uniToken: ""
      }
    };
  }
});

// ../lib-ethers/dist/src/_utils.js
var require_utils = __commonJS({
  "../lib-ethers/dist/src/_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.promiseAllValues = exports.panic = exports.decimalify = exports.numberify = void 0;
    var lib_base_1 = require_dist();
    var numberify = (bigNumber) => bigNumber.toNumber();
    exports.numberify = numberify;
    var decimalify = (bigNumber) => lib_base_1.Decimal.fromBigNumberString(bigNumber.toHexString());
    exports.decimalify = decimalify;
    var panic = (e) => {
      throw e;
    };
    exports.panic = panic;
    var promiseAllValues = (object) => {
      const keys = Object.keys(object);
      return Promise.all(Object.values(object)).then((values) => Object.fromEntries(values.map((value, i) => [keys[i], value])));
    };
    exports.promiseAllValues = promiseAllValues;
  }
});

// ../lib-ethers/dist/abi/ActivePool.json
var require_ActivePool = __commonJS({
  "../lib-ethers/dist/abi/ActivePool.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newActivePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_ETH",
            type: "uint256"
          }
        ],
        name: "ActivePoolETHBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_LUSDDebt",
            type: "uint256"
          }
        ],
        name: "ActivePoolLUSDDebtUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newBorrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newDefaultPoolAddress",
            type: "address"
          }
        ],
        name: "DefaultPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "ETHBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "EtherSent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "LUSDBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newStabilityPoolAddress",
            type: "address"
          }
        ],
        name: "StabilityPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newTroveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperationsAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "decreaseLUSDDebt",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "defaultPoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getETH",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getLUSDDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "increaseLUSDDebt",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "sendETH",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_defaultPoolAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "stabilityPoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManagerAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/BorrowerOperations.json
var require_BorrowerOperations = __commonJS({
  "../lib-ethers/dist/abi/BorrowerOperations.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_collSurplusPoolAddress",
            type: "address"
          }
        ],
        name: "CollSurplusPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_defaultPoolAddress",
            type: "address"
          }
        ],
        name: "DefaultPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_gasPoolAddress",
            type: "address"
          }
        ],
        name: "GasPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyStakingAddress",
            type: "address"
          }
        ],
        name: "LQTYStakingAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_LUSDFee",
            type: "uint256"
          }
        ],
        name: "LUSDBorrowingFeePaid",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lusdTokenAddress",
            type: "address"
          }
        ],
        name: "LUSDTokenAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newPriceFeedAddress",
            type: "address"
          }
        ],
        name: "PriceFeedAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          }
        ],
        name: "SortedTrovesAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          }
        ],
        name: "StabilityPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "arrayIndex",
            type: "uint256"
          }
        ],
        name: "TroveCreated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newTroveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_debt",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_coll",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "stake",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "enum BorrowerOperations.BorrowerOperation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "TroveUpdated",
        type: "event"
      },
      {
        inputs: [],
        name: "BORROWING_FEE_FLOOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "CCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "LUSD_GAS_COMPENSATION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MIN_NET_DEBT",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "PERCENT_DIVISOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "_100pct",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "activePool",
        outputs: [
          {
            internalType: "contract IActivePool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "addColl",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_maxFeePercentage",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_collWithdrawal",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_LUSDChange",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "_isDebtIncrease",
            type: "bool"
          },
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "adjustTrove",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [],
        name: "claimCollateral",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "closeTrove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "defaultPool",
        outputs: [
          {
            internalType: "contract IDefaultPool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_debt",
            type: "uint256"
          }
        ],
        name: "getCompositeDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemColl",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemColl",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemDebt",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyStaking",
        outputs: [
          {
            internalType: "contract ILQTYStaking",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyStakingAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lusdToken",
        outputs: [
          {
            internalType: "contract ILUSDToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "moveETHGainToTrove",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_maxFeePercentage",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_LUSDAmount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "openTrove",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priceFeed",
        outputs: [
          {
            internalType: "contract IPriceFeed",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LUSDAmount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "repayLUSD",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_defaultPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_gasPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_collSurplusPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_priceFeedAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lusdTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lqtyStakingAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "sortedTroves",
        outputs: [
          {
            internalType: "contract ISortedTroves",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManager",
        outputs: [
          {
            internalType: "contract ITroveManager",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_collWithdrawal",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "withdrawColl",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_maxFeePercentage",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_LUSDAmount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "withdrawLUSD",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/TroveManager.json
var require_TroveManager = __commonJS({
  "../lib-ethers/dist/abi/TroveManager.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_baseRate",
            type: "uint256"
          }
        ],
        name: "BaseRateUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newBorrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_collSurplusPoolAddress",
            type: "address"
          }
        ],
        name: "CollSurplusPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_defaultPoolAddress",
            type: "address"
          }
        ],
        name: "DefaultPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_gasPoolAddress",
            type: "address"
          }
        ],
        name: "GasPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyStakingAddress",
            type: "address"
          }
        ],
        name: "LQTYStakingAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          }
        ],
        name: "LQTYTokenAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_L_ETH",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_L_LUSDDebt",
            type: "uint256"
          }
        ],
        name: "LTermsUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newLUSDTokenAddress",
            type: "address"
          }
        ],
        name: "LUSDTokenAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_lastFeeOpTime",
            type: "uint256"
          }
        ],
        name: "LastFeeOpTimeUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_liquidatedDebt",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_liquidatedColl",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_collGasCompensation",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_LUSDGasCompensation",
            type: "uint256"
          }
        ],
        name: "Liquidation",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newPriceFeedAddress",
            type: "address"
          }
        ],
        name: "PriceFeedAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_attemptedLUSDAmount",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_actualLUSDAmount",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_ETHSent",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_ETHFee",
            type: "uint256"
          }
        ],
        name: "Redemption",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          }
        ],
        name: "SortedTrovesAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          }
        ],
        name: "StabilityPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_totalStakesSnapshot",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_totalCollateralSnapshot",
            type: "uint256"
          }
        ],
        name: "SystemSnapshotsUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newTotalStakes",
            type: "uint256"
          }
        ],
        name: "TotalStakesUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_newIndex",
            type: "uint256"
          }
        ],
        name: "TroveIndexUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_debt",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_coll",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "enum TroveManager.TroveManagerOperation",
            name: "_operation",
            type: "uint8"
          }
        ],
        name: "TroveLiquidated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_L_ETH",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_L_LUSDDebt",
            type: "uint256"
          }
        ],
        name: "TroveSnapshotsUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_debt",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_coll",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_stake",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "enum TroveManager.TroveManagerOperation",
            name: "_operation",
            type: "uint8"
          }
        ],
        name: "TroveUpdated",
        type: "event"
      },
      {
        inputs: [],
        name: "BETA",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "BOOTSTRAP_PERIOD",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "BORROWING_FEE_FLOOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "CCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "LUSD_GAS_COMPENSATION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "L_ETH",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "L_LUSDDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MAX_BORROWING_FEE",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MINUTE_DECAY_FACTOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MIN_NET_DEBT",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "PERCENT_DIVISOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "REDEMPTION_FEE_FLOOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "SECONDS_IN_ONE_MINUTE",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        name: "TroveOwners",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "Troves",
        outputs: [
          {
            internalType: "uint256",
            name: "debt",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "coll",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256"
          },
          {
            internalType: "enum TroveManager.Status",
            name: "status",
            type: "uint8"
          },
          {
            internalType: "uint128",
            name: "arrayIndex",
            type: "uint128"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "_100pct",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "activePool",
        outputs: [
          {
            internalType: "contract IActivePool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "addTroveOwnerToArray",
        outputs: [
          {
            internalType: "uint256",
            name: "index",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "applyPendingRewards",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "baseRate",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_troveArray",
            type: "address[]"
          }
        ],
        name: "batchLiquidateTroves",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperationsAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_price",
            type: "uint256"
          }
        ],
        name: "checkRecoveryMode",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "closeTrove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "decayBaseRateFromBorrowing",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_collDecrease",
            type: "uint256"
          }
        ],
        name: "decreaseTroveColl",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_debtDecrease",
            type: "uint256"
          }
        ],
        name: "decreaseTroveDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "defaultPool",
        outputs: [
          {
            internalType: "contract IDefaultPool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LUSDDebt",
            type: "uint256"
          }
        ],
        name: "getBorrowingFee",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LUSDDebt",
            type: "uint256"
          }
        ],
        name: "getBorrowingFeeWithDecay",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getBorrowingRate",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getBorrowingRateWithDecay",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_price",
            type: "uint256"
          }
        ],
        name: "getCurrentICR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getEntireDebtAndColl",
        outputs: [
          {
            internalType: "uint256",
            name: "debt",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "coll",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "pendingLUSDDebtReward",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "pendingETHReward",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemColl",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemColl",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemDebt",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getNominalICR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getPendingETHReward",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getPendingLUSDDebtReward",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_ETHDrawn",
            type: "uint256"
          }
        ],
        name: "getRedemptionFeeWithDecay",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getRedemptionRate",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getRedemptionRateWithDecay",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_price",
            type: "uint256"
          }
        ],
        name: "getTCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getTroveColl",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getTroveDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_index",
            type: "uint256"
          }
        ],
        name: "getTroveFromTroveOwnersArray",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTroveOwnersCount",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getTroveStake",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "getTroveStatus",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "hasPendingRewards",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_collIncrease",
            type: "uint256"
          }
        ],
        name: "increaseTroveColl",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_debtIncrease",
            type: "uint256"
          }
        ],
        name: "increaseTroveDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastETHError_Redistribution",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastFeeOperationTime",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastLUSDDebtError_Redistribution",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "liquidate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_n",
            type: "uint256"
          }
        ],
        name: "liquidateTroves",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyStaking",
        outputs: [
          {
            internalType: "contract ILQTYStaking",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyToken",
        outputs: [
          {
            internalType: "contract ILQTYToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lusdToken",
        outputs: [
          {
            internalType: "contract ILUSDToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priceFeed",
        outputs: [
          {
            internalType: "contract IPriceFeed",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LUSDamount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_firstRedemptionHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_upperPartialRedemptionHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerPartialRedemptionHint",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_partialRedemptionHintNICR",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_maxIterations",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_maxFeePercentage",
            type: "uint256"
          }
        ],
        name: "redeemCollateral",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "removeStake",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "rewardSnapshots",
        outputs: [
          {
            internalType: "uint256",
            name: "ETH",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "LUSDDebt",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_defaultPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_gasPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_collSurplusPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_priceFeedAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lusdTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lqtyStakingAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_num",
            type: "uint256"
          }
        ],
        name: "setTroveStatus",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "sortedTroves",
        outputs: [
          {
            internalType: "contract ISortedTroves",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "stabilityPool",
        outputs: [
          {
            internalType: "contract IStabilityPool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalCollateralSnapshot",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalStakes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalStakesSnapshot",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "updateStakeAndTotalStakes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrower",
            type: "address"
          }
        ],
        name: "updateTroveRewardSnapshots",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/LUSDToken.json
var require_LUSDToken = __commonJS({
  "../lib-ethers/dist/abi/LUSDToken.json"(exports, module) {
    module.exports = [
      {
        inputs: [
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newBorrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_user",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "LUSDTokenBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newStabilityPoolAddress",
            type: "address"
          }
        ],
        name: "StabilityPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperationsAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "burn",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "subtractedValue",
            type: "uint256"
          }
        ],
        name: "decreaseAllowance",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "addedValue",
            type: "uint256"
          }
        ],
        name: "increaseAllowance",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "nonces",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8"
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32"
          }
        ],
        name: "permit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "permitTypeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_poolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_receiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "returnFromPool",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "_poolAddress",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "sendToPool",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "stabilityPoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManagerAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "version",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/CollSurplusPool.json
var require_CollSurplusPool = __commonJS({
  "../lib-ethers/dist/abi/CollSurplusPool.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newActivePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newBorrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "CollBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "EtherSent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newTroveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "accountSurplus",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "activePoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperationsAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          }
        ],
        name: "claimColl",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          }
        ],
        name: "getCollateral",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getETH",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManagerAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/CommunityIssuance.json
var require_CommunityIssuance = __commonJS({
  "../lib-ethers/dist/abi/CommunityIssuance.json"(exports, module) {
    module.exports = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          }
        ],
        name: "LQTYTokenAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          }
        ],
        name: "StabilityPoolAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_totalLQTYIssued",
            type: "uint256"
          }
        ],
        name: "TotalLQTYIssuedUpdated",
        type: "event"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "ISSUANCE_FACTOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "LQTYSupplyCap",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "SECONDS_IN_ONE_MINUTE",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "deploymentTime",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "issueLQTY",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyToken",
        outputs: [
          {
            internalType: "contract ILQTYToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_LQTYamount",
            type: "uint256"
          }
        ],
        name: "sendLQTY",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_stabilityPoolAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "stabilityPoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalLQTYIssued",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/DefaultPool.json
var require_DefaultPool = __commonJS({
  "../lib-ethers/dist/abi/DefaultPool.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newActivePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newDefaultPoolAddress",
            type: "address"
          }
        ],
        name: "DefaultPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_ETH",
            type: "uint256"
          }
        ],
        name: "DefaultPoolETHBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_LUSDDebt",
            type: "uint256"
          }
        ],
        name: "DefaultPoolLUSDDebtUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "ETHBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "EtherSent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "LUSDBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newStabilityPoolAddress",
            type: "address"
          }
        ],
        name: "StabilityPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newTroveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "activePoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "decreaseLUSDDebt",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getETH",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getLUSDDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "increaseLUSDDebt",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "sendETHToActivePool",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManagerAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/LQTYToken.json
var require_LQTYToken = __commonJS({
  "../lib-ethers/dist/abi/LQTYToken.json"(exports, module) {
    module.exports = [
      {
        inputs: [
          {
            internalType: "address",
            name: "_communityIssuanceAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lqtyStakingAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lockupFactoryAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_bountyAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lpRewardsAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_multisigAddress",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_communityIssuanceAddress",
            type: "address"
          }
        ],
        name: "CommunityIssuanceAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyStakingAddress",
            type: "address"
          }
        ],
        name: "LQTYStakingAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lockupContractFactoryAddress",
            type: "address"
          }
        ],
        name: "LockupContractFactoryAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [],
        name: "ONE_YEAR_IN_SECONDS",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "communityIssuanceAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "subtractedValue",
            type: "uint256"
          }
        ],
        name: "decreaseAllowance",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getDeploymentStartTime",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getLpRewardsEntitlement",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "addedValue",
            type: "uint256"
          }
        ],
        name: "increaseAllowance",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "lockupContractFactory",
        outputs: [
          {
            internalType: "contract ILockupContractFactory",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyStakingAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "multisigAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "nonces",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8"
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32"
          }
        ],
        name: "permit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "permitTypeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_sender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "sendToLQTYStaking",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "version",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/HintHelpers.json
var require_HintHelpers = __commonJS({
  "../lib-ethers/dist/abi/HintHelpers.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          }
        ],
        name: "SortedTrovesAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "BORROWING_FEE_FLOOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "CCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "LUSD_GAS_COMPENSATION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MIN_NET_DEBT",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "PERCENT_DIVISOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "_100pct",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "activePool",
        outputs: [
          {
            internalType: "contract IActivePool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_coll",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_debt",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_price",
            type: "uint256"
          }
        ],
        name: "computeCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_coll",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_debt",
            type: "uint256"
          }
        ],
        name: "computeNominalCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "defaultPool",
        outputs: [
          {
            internalType: "contract IDefaultPool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_CR",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_numTrials",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_inputRandomSeed",
            type: "uint256"
          }
        ],
        name: "getApproxHint",
        outputs: [
          {
            internalType: "address",
            name: "hintAddress",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "diff",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "latestRandomSeed",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemColl",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemColl",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemDebt",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LUSDamount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_price",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_maxIterations",
            type: "uint256"
          }
        ],
        name: "getRedemptionHints",
        outputs: [
          {
            internalType: "address",
            name: "firstRedemptionHint",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "partialRedemptionHintNICR",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "truncatedLUSDamount",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priceFeed",
        outputs: [
          {
            internalType: "contract IPriceFeed",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "sortedTroves",
        outputs: [
          {
            internalType: "contract ISortedTroves",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManager",
        outputs: [
          {
            internalType: "contract ITroveManager",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/LockupContractFactory.json
var require_LockupContractFactory = __commonJS({
  "../lib-ethers/dist/abi/LockupContractFactory.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          }
        ],
        name: "LQTYTokenAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lockupContractAddress",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "_beneficiary",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_unlockTime",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "address",
            name: "_deployer",
            type: "address"
          }
        ],
        name: "LockupContractDeployedThroughFactory",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "SECONDS_IN_ONE_YEAR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_beneficiary",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_unlockTime",
            type: "uint256"
          }
        ],
        name: "deployLockupContract",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_contractAddress",
            type: "address"
          }
        ],
        name: "isRegisteredLockup",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "lockupContractToDeployer",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyTokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          }
        ],
        name: "setLQTYTokenAddress",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/LQTYStaking.json
var require_LQTYStaking = __commonJS({
  "../lib-ethers/dist/abi/LQTYStaking.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "EtherSent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_F_ETH",
            type: "uint256"
          }
        ],
        name: "F_ETHUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_F_LUSD",
            type: "uint256"
          }
        ],
        name: "F_LUSDUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          }
        ],
        name: "LQTYTokenAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lusdTokenAddress",
            type: "address"
          }
        ],
        name: "LUSDTokenAddressSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "staker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "newStake",
            type: "uint256"
          }
        ],
        name: "StakeChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_staker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_F_ETH",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_F_LUSD",
            type: "uint256"
          }
        ],
        name: "StakerSnapshotsUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "staker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "LUSDGain",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "ETHGain",
            type: "uint256"
          }
        ],
        name: "StakingGainsWithdrawn",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_totalLQTYStaked",
            type: "uint256"
          }
        ],
        name: "TotalLQTYStakedUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_troveManager",
            type: "address"
          }
        ],
        name: "TroveManagerAddressSet",
        type: "event"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "F_ETH",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "F_LUSD",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "activePoolAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperationsAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_user",
            type: "address"
          }
        ],
        name: "getPendingETHGain",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_user",
            type: "address"
          }
        ],
        name: "getPendingLUSDGain",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_ETHFee",
            type: "uint256"
          }
        ],
        name: "increaseF_ETH",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LUSDFee",
            type: "uint256"
          }
        ],
        name: "increaseF_LUSD",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyToken",
        outputs: [
          {
            internalType: "contract ILQTYToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lusdToken",
        outputs: [
          {
            internalType: "contract ILUSDToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lusdTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "snapshots",
        outputs: [
          {
            internalType: "uint256",
            name: "F_ETH_Snapshot",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "F_LUSD_Snapshot",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LQTYamount",
            type: "uint256"
          }
        ],
        name: "stake",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "stakes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalLQTYStaked",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManagerAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_LQTYamount",
            type: "uint256"
          }
        ],
        name: "unstake",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/MultiTroveGetter.json
var require_MultiTroveGetter = __commonJS({
  "../lib-ethers/dist/abi/MultiTroveGetter.json"(exports, module) {
    module.exports = [
      {
        inputs: [
          {
            internalType: "contract TroveManager",
            name: "_troveManager",
            type: "address"
          },
          {
            internalType: "contract ISortedTroves",
            name: "_sortedTroves",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "int256",
            name: "_startIdx",
            type: "int256"
          },
          {
            internalType: "uint256",
            name: "_count",
            type: "uint256"
          }
        ],
        name: "getMultipleSortedTroves",
        outputs: [
          {
            components: [
              {
                internalType: "address",
                name: "owner",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "debt",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "coll",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "stake",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "snapshotETH",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "snapshotLUSDDebt",
                type: "uint256"
              }
            ],
            internalType: "struct MultiTroveGetter.CombinedTroveData[]",
            name: "_troves",
            type: "tuple[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "sortedTroves",
        outputs: [
          {
            internalType: "contract ISortedTroves",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManager",
        outputs: [
          {
            internalType: "contract TroveManager",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/PriceFeed.json
var require_PriceFeed = __commonJS({
  "../lib-ethers/dist/abi/PriceFeed.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_lastGoodPrice",
            type: "uint256"
          }
        ],
        name: "LastGoodPriceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "enum PriceFeed.Status",
            name: "newStatus",
            type: "uint8"
          }
        ],
        name: "PriceFeedStatusChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "ETHUSD_TELLOR_REQ_ID",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "TARGET_DIGITS",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "TELLOR_DIGITS",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "TIMEOUT",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "fetchPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastGoodPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priceAggregator",
        outputs: [
          {
            internalType: "contract AggregatorV3Interface",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_priceAggregatorAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_tellorCallerAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "status",
        outputs: [
          {
            internalType: "enum PriceFeed.Status",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "tellorCaller",
        outputs: [
          {
            internalType: "contract ITellorCaller",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/PriceFeedTestnet.json
var require_PriceFeedTestnet = __commonJS({
  "../lib-ethers/dist/abi/PriceFeedTestnet.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_lastGoodPrice",
            type: "uint256"
          }
        ],
        name: "LastGoodPriceUpdated",
        type: "event"
      },
      {
        inputs: [],
        name: "fetchPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256"
          }
        ],
        name: "setPrice",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/SortedTroves.json
var require_SortedTroves = __commonJS({
  "../lib-ethers/dist/abi/SortedTroves.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_id",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_NICR",
            type: "uint256"
          }
        ],
        name: "NodeAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_id",
            type: "address"
          }
        ],
        name: "NodeRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_sortedDoublyLLAddress",
            type: "address"
          }
        ],
        name: "SortedTrovesAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperationsAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_id",
            type: "address"
          }
        ],
        name: "contains",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "data",
        outputs: [
          {
            internalType: "address",
            name: "head",
            type: "address"
          },
          {
            internalType: "address",
            name: "tail",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "maxSize",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "size",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_NICR",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_prevId",
            type: "address"
          },
          {
            internalType: "address",
            name: "_nextId",
            type: "address"
          }
        ],
        name: "findInsertPosition",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getFirst",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getLast",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getMaxSize",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_id",
            type: "address"
          }
        ],
        name: "getNext",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_id",
            type: "address"
          }
        ],
        name: "getPrev",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getSize",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_id",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_NICR",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_prevId",
            type: "address"
          },
          {
            internalType: "address",
            name: "_nextId",
            type: "address"
          }
        ],
        name: "insert",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "isEmpty",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isFull",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_id",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_newNICR",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_prevId",
            type: "address"
          },
          {
            internalType: "address",
            name: "_nextId",
            type: "address"
          }
        ],
        name: "reInsert",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_id",
            type: "address"
          }
        ],
        name: "remove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_size",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "setParams",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManager",
        outputs: [
          {
            internalType: "contract ITroveManager",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_NICR",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_prevId",
            type: "address"
          },
          {
            internalType: "address",
            name: "_nextId",
            type: "address"
          }
        ],
        name: "validInsertPosition",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/StabilityPool.json
var require_StabilityPool = __commonJS({
  "../lib-ethers/dist/abi/StabilityPool.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newActivePoolAddress",
            type: "address"
          }
        ],
        name: "ActivePoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newBorrowerOperationsAddress",
            type: "address"
          }
        ],
        name: "BorrowerOperationsAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newCommunityIssuanceAddress",
            type: "address"
          }
        ],
        name: "CommunityIssuanceAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newDefaultPoolAddress",
            type: "address"
          }
        ],
        name: "DefaultPoolAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_depositor",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_P",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_S",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_G",
            type: "uint256"
          }
        ],
        name: "DepositSnapshotUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_depositor",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_ETH",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_LUSDLoss",
            type: "uint256"
          }
        ],
        name: "ETHGainWithdrawn",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint128",
            name: "_currentEpoch",
            type: "uint128"
          }
        ],
        name: "EpochUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "EtherSent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_kickbackRate",
            type: "uint256"
          }
        ],
        name: "FrontEndRegistered",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_P",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_G",
            type: "uint256"
          }
        ],
        name: "FrontEndSnapshotUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_newFrontEndStake",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "address",
            name: "_depositor",
            type: "address"
          }
        ],
        name: "FrontEndStakeChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_depositor",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          }
        ],
        name: "FrontEndTagSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_G",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint128",
            name: "_epoch",
            type: "uint128"
          },
          {
            indexed: false,
            internalType: "uint128",
            name: "_scale",
            type: "uint128"
          }
        ],
        name: "G_Updated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_depositor",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_LQTY",
            type: "uint256"
          }
        ],
        name: "LQTYPaidToDepositor",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_LQTY",
            type: "uint256"
          }
        ],
        name: "LQTYPaidToFrontEnd",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newLUSDTokenAddress",
            type: "address"
          }
        ],
        name: "LUSDTokenAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_P",
            type: "uint256"
          }
        ],
        name: "P_Updated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newPriceFeedAddress",
            type: "address"
          }
        ],
        name: "PriceFeedAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_S",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint128",
            name: "_epoch",
            type: "uint128"
          },
          {
            indexed: false,
            internalType: "uint128",
            name: "_scale",
            type: "uint128"
          }
        ],
        name: "S_Updated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint128",
            name: "_currentScale",
            type: "uint128"
          }
        ],
        name: "ScaleUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newSortedTrovesAddress",
            type: "address"
          }
        ],
        name: "SortedTrovesAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "StabilityPoolETHBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "_newBalance",
            type: "uint256"
          }
        ],
        name: "StabilityPoolLUSDBalanceUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_newTroveManagerAddress",
            type: "address"
          }
        ],
        name: "TroveManagerAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_depositor",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_newDeposit",
            type: "uint256"
          }
        ],
        name: "UserDepositChanged",
        type: "event"
      },
      {
        inputs: [],
        name: "BORROWING_FEE_FLOOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "CCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "DECIMAL_PRECISION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "LUSD_GAS_COMPENSATION",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MCR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "MIN_NET_DEBT",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "P",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "PERCENT_DIVISOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "SCALE_FACTOR",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "_100pct",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "activePool",
        outputs: [
          {
            internalType: "contract IActivePool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "borrowerOperations",
        outputs: [
          {
            internalType: "contract IBorrowerOperations",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "communityIssuance",
        outputs: [
          {
            internalType: "contract ICommunityIssuance",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "currentEpoch",
        outputs: [
          {
            internalType: "uint128",
            name: "",
            type: "uint128"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "currentScale",
        outputs: [
          {
            internalType: "uint128",
            name: "",
            type: "uint128"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "defaultPool",
        outputs: [
          {
            internalType: "contract IDefaultPool",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "depositSnapshots",
        outputs: [
          {
            internalType: "uint256",
            name: "S",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "P",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "G",
            type: "uint256"
          },
          {
            internalType: "uint128",
            name: "scale",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "epoch",
            type: "uint128"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "deposits",
        outputs: [
          {
            internalType: "uint256",
            name: "initialValue",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "frontEndTag",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint128",
            name: "",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "",
            type: "uint128"
          }
        ],
        name: "epochToScaleToG",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint128",
            name: "",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "",
            type: "uint128"
          }
        ],
        name: "epochToScaleToSum",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "frontEndSnapshots",
        outputs: [
          {
            internalType: "uint256",
            name: "S",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "P",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "G",
            type: "uint256"
          },
          {
            internalType: "uint128",
            name: "scale",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "epoch",
            type: "uint128"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "frontEndStakes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "frontEnds",
        outputs: [
          {
            internalType: "uint256",
            name: "kickbackRate",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "registered",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          }
        ],
        name: "getCompoundedFrontEndStake",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_depositor",
            type: "address"
          }
        ],
        name: "getCompoundedLUSDDeposit",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_depositor",
            type: "address"
          }
        ],
        name: "getDepositorETHGain",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_depositor",
            type: "address"
          }
        ],
        name: "getDepositorLQTYGain",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getETH",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemColl",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemColl",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getEntireSystemDebt",
        outputs: [
          {
            internalType: "uint256",
            name: "entireSystemDebt",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_frontEnd",
            type: "address"
          }
        ],
        name: "getFrontEndLQTYGain",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalLUSDDeposits",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastETHError_Offset",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastLQTYError",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastLUSDLossError_Offset",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lusdToken",
        outputs: [
          {
            internalType: "contract ILUSDToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_debtToOffset",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_collToAdd",
            type: "uint256"
          }
        ],
        name: "offset",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priceFeed",
        outputs: [
          {
            internalType: "contract IPriceFeed",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "_frontEndTag",
            type: "address"
          }
        ],
        name: "provideToSP",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_kickbackRate",
            type: "uint256"
          }
        ],
        name: "registerFrontEnd",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_borrowerOperationsAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_troveManagerAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_activePoolAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lusdTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_sortedTrovesAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_priceFeedAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_communityIssuanceAddress",
            type: "address"
          }
        ],
        name: "setAddresses",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "sortedTroves",
        outputs: [
          {
            internalType: "contract ISortedTroves",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "troveManager",
        outputs: [
          {
            internalType: "contract ITroveManager",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_upperHint",
            type: "address"
          },
          {
            internalType: "address",
            name: "_lowerHint",
            type: "address"
          }
        ],
        name: "withdrawETHGainToTrove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "withdrawFromSP",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/GasPool.json
var require_GasPool = __commonJS({
  "../lib-ethers/dist/abi/GasPool.json"(exports, module) {
    module.exports = [];
  }
});

// ../lib-ethers/dist/abi/Unipool.json
var require_Unipool = __commonJS({
  "../lib-ethers/dist/abi/Unipool.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          }
        ],
        name: "LQTYTokenAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "reward",
            type: "uint256"
          }
        ],
        name: "RewardAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "user",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "reward",
            type: "uint256"
          }
        ],
        name: "RewardPaid",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "user",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "Staked",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "_uniTokenAddress",
            type: "address"
          }
        ],
        name: "UniTokenAddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "user",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "Withdrawn",
        type: "event"
      },
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "claimReward",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "duration",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "earned",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastTimeRewardApplicable",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lastUpdateTime",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "lqtyToken",
        outputs: [
          {
            internalType: "contract ILQTYToken",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "periodFinish",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "rewardPerToken",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "rewardPerTokenStored",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "rewardRate",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "rewards",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_lqtyTokenAddress",
            type: "address"
          },
          {
            internalType: "address",
            name: "_uniTokenAddress",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_duration",
            type: "uint256"
          }
        ],
        name: "setParams",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "stake",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "uniToken",
        outputs: [
          {
            internalType: "contract IERC20",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "userRewardPerTokenPaid",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "withdraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "withdrawAndClaim",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/IERC20.json
var require_IERC20 = __commonJS({
  "../lib-ethers/dist/abi/IERC20.json"(exports, module) {
    module.exports = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/abi/ERC20Mock.json
var require_ERC20Mock = __commonJS({
  "../lib-ethers/dist/abi/ERC20Mock.json"(exports, module) {
    module.exports = [
      {
        inputs: [
          {
            internalType: "string",
            name: "name",
            type: "string"
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string"
          },
          {
            internalType: "address",
            name: "initialAccount",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "initialBalance",
            type: "uint256"
          }
        ],
        stateMutability: "payable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "approveInternal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "burn",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "subtractedValue",
            type: "uint256"
          }
        ],
        name: "decreaseAllowance",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "addedValue",
            type: "uint256"
          }
        ],
        name: "increaseAllowance",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "transferInternal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// ../lib-ethers/dist/src/contracts.js
var require_contracts = __commonJS({
  "../lib-ethers/dist/src/contracts.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._connectToContracts = exports._uniTokenIsMock = exports._priceFeedIsTestnet = exports._LiquityContract = void 0;
    var contracts_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var ActivePool_json_1 = __importDefault(require_ActivePool());
    var BorrowerOperations_json_1 = __importDefault(require_BorrowerOperations());
    var TroveManager_json_1 = __importDefault(require_TroveManager());
    var LUSDToken_json_1 = __importDefault(require_LUSDToken());
    var CollSurplusPool_json_1 = __importDefault(require_CollSurplusPool());
    var CommunityIssuance_json_1 = __importDefault(require_CommunityIssuance());
    var DefaultPool_json_1 = __importDefault(require_DefaultPool());
    var LQTYToken_json_1 = __importDefault(require_LQTYToken());
    var HintHelpers_json_1 = __importDefault(require_HintHelpers());
    var LockupContractFactory_json_1 = __importDefault(require_LockupContractFactory());
    var LQTYStaking_json_1 = __importDefault(require_LQTYStaking());
    var MultiTroveGetter_json_1 = __importDefault(require_MultiTroveGetter());
    var PriceFeed_json_1 = __importDefault(require_PriceFeed());
    var PriceFeedTestnet_json_1 = __importDefault(require_PriceFeedTestnet());
    var SortedTroves_json_1 = __importDefault(require_SortedTroves());
    var StabilityPool_json_1 = __importDefault(require_StabilityPool());
    var GasPool_json_1 = __importDefault(require_GasPool());
    var Unipool_json_1 = __importDefault(require_Unipool());
    var IERC20_json_1 = __importDefault(require_IERC20());
    var ERC20Mock_json_1 = __importDefault(require_ERC20Mock());
    var buildEstimatedFunctions = (estimateFunctions, functions) => Object.fromEntries(Object.keys(estimateFunctions).map((functionName) => [
      functionName,
      async (overrides, adjustEstimate, ...args) => {
        if (overrides.gasLimit === void 0) {
          const estimatedGas = await estimateFunctions[functionName](...args, overrides);
          overrides = {
            ...overrides,
            gasLimit: adjustEstimate(estimatedGas)
          };
        }
        return functions[functionName](...args, overrides);
      }
    ]));
    var _LiquityContract = class extends contracts_1.Contract {
      constructor(addressOrName, contractInterface, signerOrProvider) {
        super(addressOrName, contractInterface, signerOrProvider);
        this.estimateAndPopulate = buildEstimatedFunctions(this.estimateGas, this.populateTransaction);
      }
      extractEvents(logs, name) {
        return logs.filter((log) => log.address === this.address).map((log) => this.interface.parseLog(log)).filter((e) => e.name === name);
      }
    };
    exports._LiquityContract = _LiquityContract;
    var _priceFeedIsTestnet = (priceFeed) => "setPrice" in priceFeed;
    exports._priceFeedIsTestnet = _priceFeedIsTestnet;
    var _uniTokenIsMock = (uniToken) => "mint" in uniToken;
    exports._uniTokenIsMock = _uniTokenIsMock;
    var getAbi = (priceFeedIsTestnet, uniTokenIsMock) => ({
      activePool: ActivePool_json_1.default,
      borrowerOperations: BorrowerOperations_json_1.default,
      troveManager: TroveManager_json_1.default,
      lusdToken: LUSDToken_json_1.default,
      communityIssuance: CommunityIssuance_json_1.default,
      defaultPool: DefaultPool_json_1.default,
      lqtyToken: LQTYToken_json_1.default,
      hintHelpers: HintHelpers_json_1.default,
      lockupContractFactory: LockupContractFactory_json_1.default,
      lqtyStaking: LQTYStaking_json_1.default,
      multiTroveGetter: MultiTroveGetter_json_1.default,
      priceFeed: priceFeedIsTestnet ? PriceFeedTestnet_json_1.default : PriceFeed_json_1.default,
      sortedTroves: SortedTroves_json_1.default,
      stabilityPool: StabilityPool_json_1.default,
      gasPool: GasPool_json_1.default,
      collSurplusPool: CollSurplusPool_json_1.default,
      unipool: Unipool_json_1.default,
      uniToken: uniTokenIsMock ? ERC20Mock_json_1.default : IERC20_json_1.default
    });
    var mapLiquityContracts = (contracts, f) => Object.fromEntries(Object.entries(contracts).map(([key, t]) => {
      const res = [key, f(t, key)];
      console.debug("lib-ethers: mapLiquityContracts() res =", res);
      return res;
    }));
    var _connectToContracts = (signerOrProvider, { addresses, _priceFeedIsTestnet: _priceFeedIsTestnet2, _uniTokenIsMock: _uniTokenIsMock2 }) => {
      console.debug("lib-ethers: 检查合约是否存在 _connectToContracts() 参数", addresses);
      const abi = getAbi(_priceFeedIsTestnet2, _uniTokenIsMock2);
      return mapLiquityContracts(addresses, (address, key) => {
        console.debug("lib-ethers: 检查合约是否存在 遍历", address, key, !!address, address === "");
        if (address) {
          const res = new _LiquityContract(address, abi[key], signerOrProvider);
          return res;
        }
      });
    };
    exports._connectToContracts = _connectToContracts;
  }
});

// ../lib-ethers/dist/src/_Multicall.js
var require_Multicall = __commonJS({
  "../lib-ethers/dist/src/_Multicall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._connectToMulticall = void 0;
    var contracts_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var multicallAbi = [
      {
        constant: true,
        inputs: [],
        name: "getCurrentBlockTimestamp",
        outputs: [
          {
            name: "timestamp",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var multicallAddress = {
      1: "0xeefba1e63905ef1d7acba5a8513c70307c1ce441",
      3: "0x53c43764255c17bd724f74c4ef150724ac50a3ed",
      4: "0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821",
      5: "0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e",
      42: "0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a"
    };
    var hasMulticall = (chainId) => chainId in multicallAddress;
    var _connectToMulticall = (signerOrProvider, chainId) => hasMulticall(chainId) ? new contracts_1.Contract(multicallAddress[chainId], multicallAbi, signerOrProvider) : void 0;
    exports._connectToMulticall = _connectToMulticall;
  }
});

// ../lib-ethers/dist/src/EthersLiquityConnection.js
var require_EthersLiquityConnection = __commonJS({
  "../lib-ethers/dist/src/EthersLiquityConnection.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._connect = exports._connectByChainId = exports._connectToDeployment = exports.UnsupportedNetworkError = exports._usingStore = exports._requireFrontendAddress = exports._requireAddress = exports._getProvider = exports._requireSigner = exports._getBlockTimestamp = exports._getContracts = void 0;
    var abstract_signer_1 = (init_lib4(), __toCommonJS(lib_exports4));
    var lib_base_1 = require_dist();
    var dev_json_1 = __importDefault(require_dev());
    var goerli_json_1 = __importDefault(require_goerli());
    var kovan_json_1 = __importDefault(require_kovan());
    var rinkeby_json_1 = __importDefault(require_rinkeby());
    var ropsten_json_1 = __importDefault(require_ropsten());
    var mainnet_json_1 = __importDefault(require_mainnet());
    var kiln_json_1 = __importDefault(require_kiln());
    var iotexTestnet_json_1 = __importDefault(require_iotexTestnet());
    var _utils_1 = require_utils();
    var contracts_1 = require_contracts();
    var _Multicall_1 = require_Multicall();
    var dev = dev_json_1.default;
    var deployments = {
      [mainnet_json_1.default.chainId]: mainnet_json_1.default,
      [ropsten_json_1.default.chainId]: ropsten_json_1.default,
      [rinkeby_json_1.default.chainId]: rinkeby_json_1.default,
      [goerli_json_1.default.chainId]: goerli_json_1.default,
      [kovan_json_1.default.chainId]: kovan_json_1.default,
      [kiln_json_1.default.chainId]: kiln_json_1.default,
      [iotexTestnet_json_1.default.chainId]: iotexTestnet_json_1.default,
      ...dev !== null ? { [dev.chainId]: dev } : {}
    };
    var branded = (t) => t;
    var connectionFrom = (provider, signer, _contracts, _multicall, { deploymentDate, totalStabilityPoolLQTYReward, liquidityMiningLQTYRewardRate, ...deployment }, optionalParams) => {
      if (optionalParams && optionalParams.useStore !== void 0 && !validStoreOptions.includes(optionalParams.useStore)) {
        throw new Error(`Invalid useStore value ${optionalParams.useStore}`);
      }
      return branded({
        provider,
        signer,
        _contracts,
        _multicall,
        deploymentDate: new Date(deploymentDate),
        totalStabilityPoolLQTYReward: lib_base_1.Decimal.from(totalStabilityPoolLQTYReward),
        liquidityMiningLQTYRewardRate: lib_base_1.Decimal.from(liquidityMiningLQTYRewardRate),
        ...deployment,
        ...optionalParams
      });
    };
    var _getContracts = (connection) => connection._contracts;
    exports._getContracts = _getContracts;
    var getMulticall = (connection) => connection._multicall;
    var getTimestampFromBlock = ({ timestamp }) => timestamp;
    var _getBlockTimestamp = (connection, blockTag = "latest") => {
      var _a, _b;
      return (_b = (_a = // Get the timestamp via a contract call whenever possible, to make it batchable with other calls
      getMulticall(connection)) === null || _a === void 0 ? void 0 : _a.getCurrentBlockTimestamp({ blockTag }).then(_utils_1.numberify)) !== null && _b !== void 0 ? _b : exports._getProvider(connection).getBlock(blockTag).then(getTimestampFromBlock);
    };
    exports._getBlockTimestamp = _getBlockTimestamp;
    var _requireSigner = (connection) => {
      var _a;
      return (_a = connection.signer) !== null && _a !== void 0 ? _a : _utils_1.panic(new Error("Must be connected through a Signer"));
    };
    exports._requireSigner = _requireSigner;
    var _getProvider = (connection) => connection.provider;
    exports._getProvider = _getProvider;
    var _requireAddress = (connection, overrides) => {
      var _a, _b;
      return (_b = (_a = overrides === null || overrides === void 0 ? void 0 : overrides.from) !== null && _a !== void 0 ? _a : connection.userAddress) !== null && _b !== void 0 ? _b : _utils_1.panic(new Error("A user address is required"));
    };
    exports._requireAddress = _requireAddress;
    var _requireFrontendAddress = (connection) => {
      var _a;
      return (_a = connection.frontendTag) !== null && _a !== void 0 ? _a : _utils_1.panic(new Error("A frontend address is required"));
    };
    exports._requireFrontendAddress = _requireFrontendAddress;
    var _usingStore = (connection) => connection.useStore !== void 0;
    exports._usingStore = _usingStore;
    var UnsupportedNetworkError = class extends Error {
      /** @internal */
      constructor(chainId) {
        super(`Unsupported network (chainId = ${chainId})`);
        this.name = "UnsupportedNetworkError";
        this.chainId = chainId;
      }
    };
    exports.UnsupportedNetworkError = UnsupportedNetworkError;
    var getProviderAndSigner = (signerOrProvider) => {
      var _a;
      const provider = abstract_signer_1.Signer.isSigner(signerOrProvider) ? (_a = signerOrProvider.provider) !== null && _a !== void 0 ? _a : _utils_1.panic(new Error("Signer must have a Provider")) : signerOrProvider;
      const signer = abstract_signer_1.Signer.isSigner(signerOrProvider) ? signerOrProvider : void 0;
      return [provider, signer];
    };
    var _connectToDeployment = (deployment, signerOrProvider, optionalParams) => connectionFrom(...getProviderAndSigner(signerOrProvider), contracts_1._connectToContracts(signerOrProvider, deployment), void 0, deployment, optionalParams);
    exports._connectToDeployment = _connectToDeployment;
    var validStoreOptions = ["blockPolled"];
    function _connectByChainId(provider, signer, chainId, optionalParams) {
      var _a;
      console.debug("lib-ethers: deployments =", deployments);
      const deployment = (_a = deployments[chainId]) !== null && _a !== void 0 ? _a : _utils_1.panic(new UnsupportedNetworkError(chainId));
      return connectionFrom(provider, signer, contracts_1._connectToContracts(provider, deployment), _Multicall_1._connectToMulticall(provider, chainId), deployment, optionalParams);
    }
    exports._connectByChainId = _connectByChainId;
    var _connect = async (signerOrProvider, optionalParams) => {
      const [provider, signer] = getProviderAndSigner(signerOrProvider);
      if (signer) {
        if ((optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.userAddress) !== void 0) {
          throw new Error("Can't override userAddress when connecting through Signer");
        }
        optionalParams = {
          ...optionalParams,
          userAddress: await signer.getAddress()
        };
      }
      return _connectByChainId(provider, signer, (await provider.getNetwork()).chainId, optionalParams);
    };
    exports._connect = _connect;
  }
});

// ../lib-ethers/dist/src/types.js
var require_types = __commonJS({
  "../lib-ethers/dist/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../lib-ethers/dist/src/BlockPolledLiquityStore.js
var require_BlockPolledLiquityStore = __commonJS({
  "../lib-ethers/dist/src/BlockPolledLiquityStore.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlockPolledLiquityStore = void 0;
    var assert_1 = __importDefault(require_assert());
    var constants_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var lib_base_1 = require_dist();
    var _utils_1 = require_utils();
    var EthersLiquityConnection_1 = require_EthersLiquityConnection();
    var BlockPolledLiquityStore = class extends lib_base_1.LiquityStore {
      constructor(readable) {
        super();
        this.connection = readable.connection;
        this._readable = readable;
        this._provider = EthersLiquityConnection_1._getProvider(readable.connection);
      }
      async _getRiskiestTroveBeforeRedistribution(overrides) {
        const riskiestTroves = await this._readable.getTroves({ first: 1, sortedBy: "ascendingCollateralRatio", beforeRedistribution: true }, overrides);
        if (riskiestTroves.length === 0) {
          return new lib_base_1.TroveWithPendingRedistribution(constants_1.AddressZero, "nonExistent");
        }
        return riskiestTroves[0];
      }
      async _get(blockTag) {
        const { userAddress, frontendTag } = this.connection;
        const { blockTimestamp, _feesFactory, calculateRemainingLQTY, ...baseState } = await _utils_1.promiseAllValues({
          blockTimestamp: this._readable._getBlockTimestamp(blockTag),
          _feesFactory: this._readable._getFeesFactory({ blockTag }),
          calculateRemainingLQTY: this._readable._getRemainingLiquidityMiningLQTYRewardCalculator({
            blockTag
          }),
          price: this._readable.getPrice({ blockTag }),
          numberOfTroves: this._readable.getNumberOfTroves({ blockTag }),
          totalRedistributed: this._readable.getTotalRedistributed({ blockTag }),
          total: this._readable.getTotal({ blockTag }),
          lusdInStabilityPool: this._readable.getLUSDInStabilityPool({ blockTag }),
          totalStakedLQTY: this._readable.getTotalStakedLQTY({ blockTag }),
          _riskiestTroveBeforeRedistribution: this._getRiskiestTroveBeforeRedistribution({ blockTag }),
          totalStakedUniTokens: this._readable.getTotalStakedUniTokens({ blockTag }),
          remainingStabilityPoolLQTYReward: this._readable.getRemainingStabilityPoolLQTYReward({
            blockTag
          }),
          frontend: frontendTag ? this._readable.getFrontendStatus(frontendTag, { blockTag }) : { status: "unregistered" },
          ...userAddress ? {
            accountBalance: this._provider.getBalance(userAddress, blockTag).then(_utils_1.decimalify),
            lusdBalance: this._readable.getLUSDBalance(userAddress, { blockTag }),
            lqtyBalance: this._readable.getLQTYBalance(userAddress, { blockTag }),
            uniTokenBalance: this._readable.getUniTokenBalance(userAddress, { blockTag }),
            uniTokenAllowance: this._readable.getUniTokenAllowance(userAddress, { blockTag }),
            liquidityMiningStake: this._readable.getLiquidityMiningStake(userAddress, { blockTag }),
            liquidityMiningLQTYReward: this._readable.getLiquidityMiningLQTYReward(userAddress, {
              blockTag
            }),
            collateralSurplusBalance: this._readable.getCollateralSurplusBalance(userAddress, {
              blockTag
            }),
            troveBeforeRedistribution: this._readable.getTroveBeforeRedistribution(userAddress, {
              blockTag
            }),
            stabilityDeposit: this._readable.getStabilityDeposit(userAddress, { blockTag }),
            lqtyStake: this._readable.getLQTYStake(userAddress, { blockTag }),
            ownFrontend: this._readable.getFrontendStatus(userAddress, { blockTag })
          } : {
            accountBalance: lib_base_1.Decimal.ZERO,
            lusdBalance: lib_base_1.Decimal.ZERO,
            lqtyBalance: lib_base_1.Decimal.ZERO,
            uniTokenBalance: lib_base_1.Decimal.ZERO,
            uniTokenAllowance: lib_base_1.Decimal.ZERO,
            liquidityMiningStake: lib_base_1.Decimal.ZERO,
            liquidityMiningLQTYReward: lib_base_1.Decimal.ZERO,
            collateralSurplusBalance: lib_base_1.Decimal.ZERO,
            troveBeforeRedistribution: new lib_base_1.TroveWithPendingRedistribution(constants_1.AddressZero, "nonExistent"),
            stabilityDeposit: new lib_base_1.StabilityDeposit(lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, constants_1.AddressZero),
            lqtyStake: new lib_base_1.LQTYStake(),
            ownFrontend: { status: "unregistered" }
          }
        });
        return [
          {
            ...baseState,
            _feesInNormalMode: _feesFactory(blockTimestamp, false),
            remainingLiquidityMiningLQTYReward: calculateRemainingLQTY(blockTimestamp)
          },
          {
            blockTag,
            blockTimestamp,
            _feesFactory
          }
        ];
      }
      /** @internal @override */
      _doStart() {
        this._get().then((state) => {
          if (!this._loaded) {
            this._load(...state);
          }
        });
        const handleBlock = async (blockTag) => {
          const state = await this._get(blockTag);
          if (this._loaded) {
            this._update(...state);
          } else {
            this._load(...state);
          }
        };
        let latestBlock;
        let timerId;
        const blockListener = (blockTag) => {
          latestBlock = Math.max(blockTag, latestBlock !== null && latestBlock !== void 0 ? latestBlock : blockTag);
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          timerId = setTimeout(() => {
            assert_1.default(latestBlock !== void 0);
            handleBlock(latestBlock);
          }, 50);
        };
        this._provider.on("block", blockListener);
        return () => {
          this._provider.off("block", blockListener);
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
        };
      }
      /** @internal @override */
      _reduceExtra(oldState, stateUpdate) {
        var _a, _b, _c;
        return {
          blockTag: (_a = stateUpdate.blockTag) !== null && _a !== void 0 ? _a : oldState.blockTag,
          blockTimestamp: (_b = stateUpdate.blockTimestamp) !== null && _b !== void 0 ? _b : oldState.blockTimestamp,
          _feesFactory: (_c = stateUpdate._feesFactory) !== null && _c !== void 0 ? _c : oldState._feesFactory
        };
      }
    };
    exports.BlockPolledLiquityStore = BlockPolledLiquityStore;
  }
});

// ../lib-ethers/dist/src/ReadableEthersLiquity.js
var require_ReadableEthersLiquity = __commonJS({
  "../lib-ethers/dist/src/ReadableEthersLiquity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReadableEthersLiquity = void 0;
    var lib_base_1 = require_dist();
    var _utils_1 = require_utils();
    var EthersLiquityConnection_1 = require_EthersLiquityConnection();
    var BlockPolledLiquityStore_1 = require_BlockPolledLiquityStore();
    var ethers_1 = (init_lib6(), __toCommonJS(lib_exports6));
    var MINUTE_DECAY_FACTOR = lib_base_1.Decimal.from("0.999037758833783000");
    var BETA = lib_base_1.Decimal.from(2);
    var BackendTroveStatus;
    (function(BackendTroveStatus2) {
      BackendTroveStatus2[BackendTroveStatus2["nonExistent"] = 0] = "nonExistent";
      BackendTroveStatus2[BackendTroveStatus2["active"] = 1] = "active";
      BackendTroveStatus2[BackendTroveStatus2["closedByOwner"] = 2] = "closedByOwner";
      BackendTroveStatus2[BackendTroveStatus2["closedByLiquidation"] = 3] = "closedByLiquidation";
      BackendTroveStatus2[BackendTroveStatus2["closedByRedemption"] = 4] = "closedByRedemption";
    })(BackendTroveStatus || (BackendTroveStatus = {}));
    var userTroveStatusFrom = (backendStatus) => backendStatus === BackendTroveStatus.nonExistent ? "nonExistent" : backendStatus === BackendTroveStatus.active ? "open" : backendStatus === BackendTroveStatus.closedByOwner ? "closedByOwner" : backendStatus === BackendTroveStatus.closedByLiquidation ? "closedByLiquidation" : backendStatus === BackendTroveStatus.closedByRedemption ? "closedByRedemption" : _utils_1.panic(new Error(`invalid backendStatus ${backendStatus}`));
    var convertToDate = (timestamp) => new Date(timestamp * 1e3);
    var validSortingOptions = ["ascendingCollateralRatio", "descendingCollateralRatio"];
    var expectPositiveInt = (obj, key) => {
      if (obj[key] !== void 0) {
        if (!Number.isInteger(obj[key])) {
          throw new Error(`${key} must be an integer`);
        }
        if (obj[key] < 0) {
          throw new Error(`${key} must not be negative`);
        }
      }
    };
    var ReadableEthersLiquity = class _ReadableEthersLiquity {
      /** @internal */
      constructor(connection) {
        this.connection = connection;
      }
      /** @internal */
      static _from(connection) {
        const readable = new _ReadableEthersLiquity(connection);
        return connection.useStore === "blockPolled" ? new _BlockPolledReadableEthersLiquity(readable) : readable;
      }
      /**
       * Connect to the Liquity protocol and create a `ReadableEthersLiquity` object.
       *
       * @param signerOrProvider - Ethers `Signer` or `Provider` to use for connecting to the Ethereum
       *                           network.
       * @param optionalParams - Optional parameters that can be used to customize the connection.
       */
      static async connect(signerOrProvider, optionalParams) {
        return _ReadableEthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));
      }
      hasStore() {
        return false;
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */
      async getTotalRedistributed(overrides) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);
        const [collateral, debt] = await Promise.all([
          troveManager.L_ETH({ ...overrides }).then(_utils_1.decimalify),
          troveManager.L_LUSDDebt({ ...overrides }).then(_utils_1.decimalify)
        ]);
        return new lib_base_1.Trove(collateral, debt);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */
      async getTroveBeforeRedistribution(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);
        const [trove, snapshot] = await Promise.all([
          troveManager.Troves(address, { ...overrides }),
          troveManager.rewardSnapshots(address, { ...overrides })
        ]);
        if (trove.status === BackendTroveStatus.active) {
          return new lib_base_1.TroveWithPendingRedistribution(address, userTroveStatusFrom(trove.status), _utils_1.decimalify(trove.coll), _utils_1.decimalify(trove.debt), _utils_1.decimalify(trove.stake), new lib_base_1.Trove(_utils_1.decimalify(snapshot.ETH), _utils_1.decimalify(snapshot.LUSDDebt)));
        } else {
          return new lib_base_1.TroveWithPendingRedistribution(address, userTroveStatusFrom(trove.status));
        }
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */
      async getTrove(address, overrides) {
        const [trove, totalRedistributed] = await Promise.all([
          this.getTroveBeforeRedistribution(address, overrides),
          this.getTotalRedistributed(overrides)
        ]);
        return trove.applyRedistribution(totalRedistributed);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */
      async getNumberOfTroves(overrides) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);
        return (await troveManager.getTroveOwnersCount({ ...overrides })).toNumber();
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */
      getPrice(overrides) {
        const { priceFeed } = EthersLiquityConnection_1._getContracts(this.connection);
        return priceFeed.callStatic.fetchPrice({ ...overrides }).then(_utils_1.decimalify);
      }
      /** @internal */
      async _getActivePool(overrides) {
        const { activePool } = EthersLiquityConnection_1._getContracts(this.connection);
        const [activeCollateral, activeDebt] = await Promise.all([
          activePool.getETH({ ...overrides }),
          activePool.getLUSDDebt({ ...overrides })
        ].map((getBigNumber) => getBigNumber.then(_utils_1.decimalify)));
        return new lib_base_1.Trove(activeCollateral, activeDebt);
      }
      /** @internal */
      async _getDefaultPool(overrides) {
        const { defaultPool } = EthersLiquityConnection_1._getContracts(this.connection);
        const [liquidatedCollateral, closedDebt] = await Promise.all([
          defaultPool.getETH({ ...overrides }),
          defaultPool.getLUSDDebt({ ...overrides })
        ].map((getBigNumber) => getBigNumber.then(_utils_1.decimalify)));
        return new lib_base_1.Trove(liquidatedCollateral, closedDebt);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */
      async getTotal(overrides) {
        const [activePool, defaultPool] = await Promise.all([
          this._getActivePool(overrides),
          this._getDefaultPool(overrides)
        ]);
        return activePool.add(defaultPool);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */
      async getStabilityDeposit(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);
        const [{ frontEndTag, initialValue }, currentLUSD, collateralGain, lqtyReward] = await Promise.all([
          stabilityPool.deposits(address, { ...overrides }),
          stabilityPool.getCompoundedLUSDDeposit(address, { ...overrides }),
          stabilityPool.getDepositorETHGain(address, { ...overrides }),
          stabilityPool.getDepositorLQTYGain(address, { ...overrides })
        ]);
        return new lib_base_1.StabilityDeposit(_utils_1.decimalify(initialValue), _utils_1.decimalify(currentLUSD), _utils_1.decimalify(collateralGain), _utils_1.decimalify(lqtyReward), frontEndTag);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */
      async getRemainingStabilityPoolLQTYReward(overrides) {
        const { communityIssuance } = EthersLiquityConnection_1._getContracts(this.connection);
        const issuanceCap = this.connection.totalStabilityPoolLQTYReward;
        const totalLQTYIssued = _utils_1.decimalify(await communityIssuance.totalLQTYIssued({ ...overrides }));
        return issuanceCap.sub(totalLQTYIssued);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */
      getLUSDInStabilityPool(overrides) {
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);
        return stabilityPool.getTotalLUSDDeposits({ ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */
      getLUSDBalance(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { lusdToken } = EthersLiquityConnection_1._getContracts(this.connection);
        return lusdToken.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */
      getLQTYBalance(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { lqtyToken } = EthersLiquityConnection_1._getContracts(this.connection);
        if (!lqtyToken) {
          return new Promise((resolve, reject) => {
            return resolve(lib_base_1.Decimal.ZERO);
          });
        }
        return lqtyToken.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */
      getUniTokenBalance(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { uniToken } = EthersLiquityConnection_1._getContracts(this.connection);
        if (!uniToken) {
          return new Promise((resolve, reject) => {
            return resolve(lib_base_1.Decimal.ZERO);
          });
        }
        return uniToken.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */
      getUniTokenAllowance(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { uniToken, unipool } = EthersLiquityConnection_1._getContracts(this.connection);
        if (!uniToken || !unipool) {
          return new Promise((resolve, reject) => {
            return resolve(lib_base_1.Decimal.ZERO);
          });
        }
        return uniToken.allowance(address, unipool.address, { ...overrides }).then(_utils_1.decimalify);
      }
      /** @internal */
      async _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {
        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);
        const zero = ethers_1.BigNumber.from(0);
        const [totalSupply, rewardRate, periodFinish, lastUpdateTime] = await Promise.all([
          (unipool === null || unipool === void 0 ? void 0 : unipool.totalSupply({ ...overrides })) || zero,
          (unipool === null || unipool === void 0 ? void 0 : unipool.rewardRate({ ...overrides }).then(_utils_1.decimalify)) || zero,
          (unipool === null || unipool === void 0 ? void 0 : unipool.periodFinish({ ...overrides }).then(_utils_1.numberify)) || zero,
          (unipool === null || unipool === void 0 ? void 0 : unipool.lastUpdateTime({ ...overrides }).then(_utils_1.numberify)) || zero
        ]);
        return (blockTimestamp) => rewardRate.mul(Math.max(0, periodFinish - (totalSupply.isZero() ? lastUpdateTime : blockTimestamp)));
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */
      async getRemainingLiquidityMiningLQTYReward(overrides) {
        const [calculateRemainingLQTY, blockTimestamp] = await Promise.all([
          this._getRemainingLiquidityMiningLQTYRewardCalculator(overrides),
          this._getBlockTimestamp(overrides === null || overrides === void 0 ? void 0 : overrides.blockTag)
        ]);
        return calculateRemainingLQTY(blockTimestamp);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */
      getLiquidityMiningStake(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);
        if (!unipool) {
          return new Promise((resolve, reject) => {
            return resolve(lib_base_1.Decimal.ZERO);
          });
        }
        return unipool.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */
      getTotalStakedUniTokens(overrides) {
        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);
        if (!(unipool === null || unipool === void 0 ? void 0 : unipool.address)) {
          return new Promise((resolve, reject) => {
            return resolve(lib_base_1.Decimal.ZERO);
          });
        }
        return unipool.totalSupply({ ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */
      getLiquidityMiningLQTYReward(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);
        if (!unipool) {
          return new Promise((resolve, reject) => {
            return resolve(lib_base_1.Decimal.ZERO);
          });
        }
        return unipool.earned(address, { ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */
      getCollateralSurplusBalance(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { collSurplusPool } = EthersLiquityConnection_1._getContracts(this.connection);
        return collSurplusPool.getCollateral(address, { ...overrides }).then(_utils_1.decimalify);
      }
      async getTroves(params, overrides) {
        var _a, _b;
        const { multiTroveGetter } = EthersLiquityConnection_1._getContracts(this.connection);
        expectPositiveInt(params, "first");
        expectPositiveInt(params, "startingAt");
        if (!validSortingOptions.includes(params.sortedBy)) {
          throw new Error(`sortedBy must be one of: ${validSortingOptions.map((x) => `"${x}"`).join(", ")}`);
        }
        const [totalRedistributed, backendTroves] = await Promise.all([
          params.beforeRedistribution ? void 0 : this.getTotalRedistributed({ ...overrides }),
          multiTroveGetter.getMultipleSortedTroves(params.sortedBy === "descendingCollateralRatio" ? (_a = params.startingAt) !== null && _a !== void 0 ? _a : 0 : -(((_b = params.startingAt) !== null && _b !== void 0 ? _b : 0) + 1), params.first, { ...overrides })
        ]);
        const troves = mapBackendTroves(backendTroves);
        if (totalRedistributed) {
          return troves.map((trove) => trove.applyRedistribution(totalRedistributed));
        } else {
          return troves;
        }
      }
      /** @internal */
      _getBlockTimestamp(blockTag) {
        return EthersLiquityConnection_1._getBlockTimestamp(this.connection, blockTag);
      }
      /** @internal */
      async _getFeesFactory(overrides) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);
        const [lastFeeOperationTime, baseRateWithoutDecay] = await Promise.all([
          troveManager.lastFeeOperationTime({ ...overrides }),
          troveManager.baseRate({ ...overrides }).then(_utils_1.decimalify)
        ]);
        return (blockTimestamp, recoveryMode) => new lib_base_1.Fees(baseRateWithoutDecay, MINUTE_DECAY_FACTOR, BETA, convertToDate(lastFeeOperationTime.toNumber()), convertToDate(blockTimestamp), recoveryMode);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */
      async getFees(overrides) {
        const [createFees, total, price, blockTimestamp] = await Promise.all([
          this._getFeesFactory(overrides),
          this.getTotal(overrides),
          this.getPrice(overrides),
          this._getBlockTimestamp(overrides === null || overrides === void 0 ? void 0 : overrides.blockTag)
        ]);
        return createFees(blockTimestamp, total.collateralRatioIsBelowCritical(price));
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */
      async getLQTYStake(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this.connection);
        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this.connection);
        const [stakedLQTY, collateralGain, lusdGain] = await Promise.all([
          lqtyStaking.stakes(address, { ...overrides }),
          lqtyStaking.getPendingETHGain(address, { ...overrides }),
          lqtyStaking.getPendingLUSDGain(address, { ...overrides })
        ].map((getBigNumber) => getBigNumber.then(_utils_1.decimalify)));
        return new lib_base_1.LQTYStake(stakedLQTY, collateralGain, lusdGain);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */
      async getTotalStakedLQTY(overrides) {
        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this.connection);
        return lqtyStaking.totalLQTYStaked({ ...overrides }).then(_utils_1.decimalify);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */
      async getFrontendStatus(address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireFrontendAddress(this.connection);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);
        const { registered, kickbackRate } = await stabilityPool.frontEnds(address, { ...overrides });
        return registered ? { status: "registered", kickbackRate: _utils_1.decimalify(kickbackRate) } : { status: "unregistered" };
      }
    };
    exports.ReadableEthersLiquity = ReadableEthersLiquity;
    var mapBackendTroves = (troves) => troves.map((trove) => new lib_base_1.TroveWithPendingRedistribution(
      trove.owner,
      "open",
      // These Troves are coming from the SortedTroves list, so they must be open
      _utils_1.decimalify(trove.coll),
      _utils_1.decimalify(trove.debt),
      _utils_1.decimalify(trove.stake),
      new lib_base_1.Trove(_utils_1.decimalify(trove.snapshotETH), _utils_1.decimalify(trove.snapshotLUSDDebt))
    ));
    var _BlockPolledReadableEthersLiquity = class {
      constructor(readable) {
        const store = new BlockPolledLiquityStore_1.BlockPolledLiquityStore(readable);
        this.store = store;
        this.connection = readable.connection;
        this._readable = readable;
      }
      _blockHit(overrides) {
        return !overrides || overrides.blockTag === void 0 || overrides.blockTag === this.store.state.blockTag;
      }
      _userHit(address, overrides) {
        return this._blockHit(overrides) && (address === void 0 || address === this.store.connection.userAddress);
      }
      _frontendHit(address, overrides) {
        return this._blockHit(overrides) && (address === void 0 || address === this.store.connection.frontendTag);
      }
      hasStore(store) {
        return store === void 0 || store === "blockPolled";
      }
      async getTotalRedistributed(overrides) {
        return this._blockHit(overrides) ? this.store.state.totalRedistributed : this._readable.getTotalRedistributed(overrides);
      }
      async getTroveBeforeRedistribution(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.troveBeforeRedistribution : this._readable.getTroveBeforeRedistribution(address, overrides);
      }
      async getTrove(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.trove : this._readable.getTrove(address, overrides);
      }
      async getNumberOfTroves(overrides) {
        return this._blockHit(overrides) ? this.store.state.numberOfTroves : this._readable.getNumberOfTroves(overrides);
      }
      async getPrice(overrides) {
        return this._blockHit(overrides) ? this.store.state.price : this._readable.getPrice(overrides);
      }
      async getTotal(overrides) {
        return this._blockHit(overrides) ? this.store.state.total : this._readable.getTotal(overrides);
      }
      async getStabilityDeposit(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.stabilityDeposit : this._readable.getStabilityDeposit(address, overrides);
      }
      async getRemainingStabilityPoolLQTYReward(overrides) {
        return this._blockHit(overrides) ? this.store.state.remainingStabilityPoolLQTYReward : this._readable.getRemainingStabilityPoolLQTYReward(overrides);
      }
      async getLUSDInStabilityPool(overrides) {
        return this._blockHit(overrides) ? this.store.state.lusdInStabilityPool : this._readable.getLUSDInStabilityPool(overrides);
      }
      async getLUSDBalance(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.lusdBalance : this._readable.getLUSDBalance(address, overrides);
      }
      async getLQTYBalance(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.lqtyBalance : this._readable.getLQTYBalance(address, overrides);
      }
      async getUniTokenBalance(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.uniTokenBalance : this._readable.getUniTokenBalance(address, overrides);
      }
      async getUniTokenAllowance(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.uniTokenAllowance : this._readable.getUniTokenAllowance(address, overrides);
      }
      async getRemainingLiquidityMiningLQTYReward(overrides) {
        return this._blockHit(overrides) ? this.store.state.remainingLiquidityMiningLQTYReward : this._readable.getRemainingLiquidityMiningLQTYReward(overrides);
      }
      async getLiquidityMiningStake(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.liquidityMiningStake : this._readable.getLiquidityMiningStake(address, overrides);
      }
      async getTotalStakedUniTokens(overrides) {
        console.debug("lib-ethers: getTotalStakedUniTokens()");
        return this._blockHit(overrides) ? this.store.state.totalStakedUniTokens : this._readable.getTotalStakedUniTokens(overrides);
      }
      async getLiquidityMiningLQTYReward(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.liquidityMiningLQTYReward : this._readable.getLiquidityMiningLQTYReward(address, overrides);
      }
      async getCollateralSurplusBalance(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.collateralSurplusBalance : this._readable.getCollateralSurplusBalance(address, overrides);
      }
      async _getBlockTimestamp(blockTag) {
        return this._blockHit({ blockTag }) ? this.store.state.blockTimestamp : this._readable._getBlockTimestamp(blockTag);
      }
      async _getFeesFactory(overrides) {
        return this._blockHit(overrides) ? this.store.state._feesFactory : this._readable._getFeesFactory(overrides);
      }
      async getFees(overrides) {
        return this._blockHit(overrides) ? this.store.state.fees : this._readable.getFees(overrides);
      }
      async getLQTYStake(address, overrides) {
        return this._userHit(address, overrides) ? this.store.state.lqtyStake : this._readable.getLQTYStake(address, overrides);
      }
      async getTotalStakedLQTY(overrides) {
        return this._blockHit(overrides) ? this.store.state.totalStakedLQTY : this._readable.getTotalStakedLQTY(overrides);
      }
      async getFrontendStatus(address, overrides) {
        return this._frontendHit(address, overrides) ? this.store.state.frontend : this._readable.getFrontendStatus(address, overrides);
      }
      getTroves(params, overrides) {
        return this._readable.getTroves(params, overrides);
      }
      _getActivePool() {
        throw new Error("Method not implemented.");
      }
      _getDefaultPool() {
        throw new Error("Method not implemented.");
      }
      _getRemainingLiquidityMiningLQTYRewardCalculator() {
        throw new Error("Method not implemented.");
      }
    };
  }
});

// ../lib-ethers/dist/src/ObservableEthersLiquity.js
var require_ObservableEthersLiquity = __commonJS({
  "../lib-ethers/dist/src/ObservableEthersLiquity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObservableEthersLiquity = void 0;
    var EthersLiquityConnection_1 = require_EthersLiquityConnection();
    var debouncingDelayMs = 50;
    var debounce = (listener) => {
      let timeoutId = void 0;
      let latestBlock = 0;
      return (...args) => {
        const event = args[args.length - 1];
        if (event.blockNumber !== void 0 && event.blockNumber > latestBlock) {
          latestBlock = event.blockNumber;
        }
        if (timeoutId !== void 0) {
          clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
          listener(latestBlock);
          timeoutId = void 0;
        }, debouncingDelayMs);
      };
    };
    var ObservableEthersLiquity = class {
      constructor(readable) {
        this._readable = readable;
      }
      watchTotalRedistributed(onTotalRedistributedChanged) {
        const { activePool, defaultPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const etherSent = activePool.filters.EtherSent();
        const redistributionListener = debounce((blockTag) => {
          this._readable.getTotalRedistributed({ blockTag }).then(onTotalRedistributedChanged);
        });
        const etherSentListener = (toAddress, _amount, event) => {
          if (toAddress === defaultPool.address) {
            redistributionListener(event);
          }
        };
        activePool.on(etherSent, etherSentListener);
        return () => {
          activePool.removeListener(etherSent, etherSentListener);
        };
      }
      watchTroveWithoutRewards(onTroveChanged, address) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this._readable.connection);
        const { troveManager, borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const troveUpdatedByTroveManager = troveManager.filters.TroveUpdated(address);
        const troveUpdatedByBorrowerOperations = borrowerOperations.filters.TroveUpdated(address);
        const troveListener = debounce((blockTag) => {
          this._readable.getTroveBeforeRedistribution(address, { blockTag }).then(onTroveChanged);
        });
        troveManager.on(troveUpdatedByTroveManager, troveListener);
        borrowerOperations.on(troveUpdatedByBorrowerOperations, troveListener);
        return () => {
          troveManager.removeListener(troveUpdatedByTroveManager, troveListener);
          borrowerOperations.removeListener(troveUpdatedByBorrowerOperations, troveListener);
        };
      }
      watchNumberOfTroves(onNumberOfTrovesChanged) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const { TroveUpdated } = troveManager.filters;
        const troveUpdated = TroveUpdated();
        const troveUpdatedListener = debounce((blockTag) => {
          this._readable.getNumberOfTroves({ blockTag }).then(onNumberOfTrovesChanged);
        });
        troveManager.on(troveUpdated, troveUpdatedListener);
        return () => {
          troveManager.removeListener(troveUpdated, troveUpdatedListener);
        };
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      watchPrice(onPriceChanged) {
        throw new Error("Method not implemented.");
      }
      watchTotal(onTotalChanged) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const { TroveUpdated } = troveManager.filters;
        const troveUpdated = TroveUpdated();
        const totalListener = debounce((blockTag) => {
          this._readable.getTotal({ blockTag }).then(onTotalChanged);
        });
        troveManager.on(troveUpdated, totalListener);
        return () => {
          troveManager.removeListener(troveUpdated, totalListener);
        };
      }
      watchStabilityDeposit(onStabilityDepositChanged, address) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this._readable.connection);
        const { activePool, stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const { UserDepositChanged } = stabilityPool.filters;
        const { EtherSent } = activePool.filters;
        const userDepositChanged = UserDepositChanged(address);
        const etherSent = EtherSent();
        const depositListener = debounce((blockTag) => {
          this._readable.getStabilityDeposit(address, { blockTag }).then(onStabilityDepositChanged);
        });
        const etherSentListener = (toAddress, _amount, event) => {
          if (toAddress === stabilityPool.address) {
            depositListener(event);
          }
        };
        stabilityPool.on(userDepositChanged, depositListener);
        activePool.on(etherSent, etherSentListener);
        return () => {
          stabilityPool.removeListener(userDepositChanged, depositListener);
          activePool.removeListener(etherSent, etherSentListener);
        };
      }
      watchLUSDInStabilityPool(onLUSDInStabilityPoolChanged) {
        const { lusdToken, stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const { Transfer } = lusdToken.filters;
        const transferLUSDFromStabilityPool = Transfer(stabilityPool.address);
        const transferLUSDToStabilityPool = Transfer(null, stabilityPool.address);
        const stabilityPoolLUSDFilters = [transferLUSDFromStabilityPool, transferLUSDToStabilityPool];
        const stabilityPoolLUSDListener = debounce((blockTag) => {
          this._readable.getLUSDInStabilityPool({ blockTag }).then(onLUSDInStabilityPoolChanged);
        });
        stabilityPoolLUSDFilters.forEach((filter) => lusdToken.on(filter, stabilityPoolLUSDListener));
        return () => stabilityPoolLUSDFilters.forEach((filter) => lusdToken.removeListener(filter, stabilityPoolLUSDListener));
      }
      watchLUSDBalance(onLUSDBalanceChanged, address) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this._readable.connection);
        const { lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const { Transfer } = lusdToken.filters;
        const transferLUSDFromUser = Transfer(address);
        const transferLUSDToUser = Transfer(null, address);
        const lusdTransferFilters = [transferLUSDFromUser, transferLUSDToUser];
        const lusdTransferListener = debounce((blockTag) => {
          this._readable.getLUSDBalance(address, { blockTag }).then(onLUSDBalanceChanged);
        });
        lusdTransferFilters.forEach((filter) => lusdToken.on(filter, lusdTransferListener));
        return () => lusdTransferFilters.forEach((filter) => lusdToken.removeListener(filter, lusdTransferListener));
      }
    };
    exports.ObservableEthersLiquity = ObservableEthersLiquity;
  }
});

// ../lib-ethers/dist/src/parseLogs.js
var require_parseLogs = __commonJS({
  "../lib-ethers/dist/src/parseLogs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logsToString = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var constants_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var lib_base_1 = require_dist();
    var interfaceLookupFrom = (contractLookup) => {
      return Object.fromEntries(Object.entries(contractLookup).map(([, contract]) => [contract.address, contract.interface]));
    };
    var nameLookupFrom = (contractLookup) => {
      return Object.fromEntries(Object.entries(contractLookup).map(([name, contract]) => [contract.address, name]));
    };
    var tryToParseLog = (log, interfaceLookup) => {
      const { address } = log;
      if (address in interfaceLookup) {
        try {
          return { address, logDescription: interfaceLookup[address].parseLog(log) };
        } catch (err) {
          console.warn("Failed to parse log:");
          console.warn(log);
          console.warn("Caught:");
          console.warn(err);
        }
      }
    };
    var parseLogs = (logs, interfaceLookup) => {
      const parsedLogs = [];
      const unparsedLogs = [];
      logs.forEach((log) => {
        const parsedLog = tryToParseLog(log, interfaceLookup);
        if (parsedLog) {
          parsedLogs.push(parsedLog);
        } else {
          unparsedLogs.push(log);
        }
      });
      return [parsedLogs, unparsedLogs];
    };
    var VERY_BIG = bignumber_1.BigNumber.from(10).pow(9);
    var prettify = (arg, nameLookup) => {
      if (bignumber_1.BigNumber.isBigNumber(arg)) {
        if (arg.gte(VERY_BIG)) {
          return `${lib_base_1.Decimal.fromBigNumberString(arg.toHexString())}e18`;
        } else {
          return arg.toString();
        }
      } else if (typeof arg === "string") {
        return arg === constants_1.AddressZero ? "address(0)" : nameLookup && arg in nameLookup ? nameLookup[arg] : arg;
      } else {
        return String(arg);
      }
    };
    var logDescriptionToString = (logDescription, nameLookup) => {
      const prettyEntries = Object.entries(logDescription.args).filter(([key]) => !key.match(/^[0-9]/)).map(([key, value]) => `${key}: ${prettify(value, nameLookup)}`);
      return `${logDescription.name}({ ${prettyEntries.join(", ")} })`;
    };
    var logsToString = (receipt, contracts) => {
      const contractLookup = contracts;
      const interfaceLookup = interfaceLookupFrom(contractLookup);
      const contractNameLookup = nameLookupFrom(contractLookup);
      const nameLookup = {
        [receipt.from]: "user",
        ...contractNameLookup
      };
      const [parsedLogs, unparsedLogs] = parseLogs(receipt.logs, interfaceLookup);
      if (unparsedLogs.length > 0) {
        console.warn("Warning: not all logs were parsed. Unparsed logs:");
        console.warn(unparsedLogs);
      }
      if (parsedLogs.length > 0) {
        return `Logs of tx ${receipt.transactionHash}:
` + parsedLogs.map(({ address, logDescription }) => `  ${contractNameLookup[address]}.${logDescriptionToString(logDescription, nameLookup)}`).join("\n");
      } else {
        return `No logs were parsed in tx ${receipt.transactionHash}`;
      }
    };
    exports.logsToString = logsToString;
  }
});

// ../lib-ethers/dist/src/PopulatableEthersLiquity.js
var require_PopulatableEthersLiquity = __commonJS({
  "../lib-ethers/dist/src/PopulatableEthersLiquity.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PopulatableEthersLiquity = exports.PopulatedEthersRedemption = exports.PopulatedEthersLiquityTransaction = exports.SentEthersLiquityTransaction = exports.EthersTransactionCancelledError = exports._RawErrorReason = exports._redeemMaxIterations = void 0;
    var assert_1 = __importDefault(require_assert());
    var constants_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var logger_1 = (init_lib(), __toCommonJS(lib_exports));
    var lib_base_1 = require_dist();
    var EthersLiquityConnection_1 = require_EthersLiquityConnection();
    var _utils_1 = require_utils();
    var contracts_1 = require_contracts();
    var parseLogs_1 = require_parseLogs();
    var bigNumberMax = (a, b) => (b === null || b === void 0 ? void 0 : b.gt(a)) ? b : a;
    exports._redeemMaxIterations = 70;
    var defaultBorrowingRateSlippageTolerance = lib_base_1.Decimal.from(5e-3);
    var defaultRedemptionRateSlippageTolerance = lib_base_1.Decimal.from(1e-3);
    var defaultBorrowingFeeDecayToleranceMinutes = 10;
    var noDetails = () => void 0;
    var compose = (f, g) => (_) => f(g(_));
    var id = (t) => t;
    var addGasForBaseRateUpdate = (maxMinutesSinceLastUpdate = 10) => (gas) => gas.add(1e4 + 1414 * Math.ceil(Math.log2(maxMinutesSinceLastUpdate + 1)));
    var addGasForPotentialListTraversal = (gas) => gas.add(8e4);
    var addGasForLQTYIssuance = (gas) => gas.add(5e4);
    var addGasForUnipoolRewardUpdate = (gas) => gas.add(2e4);
    var randomInteger = () => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
    var maxNumberOfTrialsAtOnce = 2500;
    function* generateTrials(totalNumberOfTrials) {
      assert_1.default(Number.isInteger(totalNumberOfTrials) && totalNumberOfTrials > 0);
      while (totalNumberOfTrials) {
        const numberOfTrials = Math.min(totalNumberOfTrials, maxNumberOfTrialsAtOnce);
        yield numberOfTrials;
        totalNumberOfTrials -= numberOfTrials;
      }
    }
    var _RawErrorReason;
    (function(_RawErrorReason2) {
      _RawErrorReason2["TRANSACTION_FAILED"] = "transaction failed";
      _RawErrorReason2["TRANSACTION_CANCELLED"] = "cancelled";
      _RawErrorReason2["TRANSACTION_REPLACED"] = "replaced";
      _RawErrorReason2["TRANSACTION_REPRICED"] = "repriced";
    })(_RawErrorReason = exports._RawErrorReason || (exports._RawErrorReason = {}));
    var transactionReplacementReasons = [
      _RawErrorReason.TRANSACTION_CANCELLED,
      _RawErrorReason.TRANSACTION_REPLACED,
      _RawErrorReason.TRANSACTION_REPRICED
    ];
    var hasProp = (o, p) => p in o;
    var isTransactionFailedError = (error) => hasProp(error, "code") && error.code === logger_1.ErrorCode.CALL_EXCEPTION && hasProp(error, "reason") && error.reason === _RawErrorReason.TRANSACTION_FAILED;
    var isTransactionReplacedError = (error) => hasProp(error, "code") && error.code === logger_1.ErrorCode.TRANSACTION_REPLACED && hasProp(error, "reason") && transactionReplacementReasons.includes(error.reason);
    var EthersTransactionCancelledError = class extends Error {
      /** @internal */
      constructor(rawError) {
        assert_1.default(rawError.reason !== _RawErrorReason.TRANSACTION_REPRICED);
        super(`Transaction ${rawError.reason}`);
        this.name = "TransactionCancelledError";
        this.rawReplacementReceipt = rawError.receipt;
        this.rawError = rawError;
      }
    };
    exports.EthersTransactionCancelledError = EthersTransactionCancelledError;
    var SentEthersLiquityTransaction = class {
      /** @internal */
      constructor(rawSentTransaction, connection, parse) {
        this.rawSentTransaction = rawSentTransaction;
        this._connection = connection;
        this._parse = parse;
      }
      _receiptFrom(rawReceipt) {
        return rawReceipt ? rawReceipt.status ? lib_base_1._successfulReceipt(rawReceipt, this._parse(rawReceipt), () => parseLogs_1.logsToString(rawReceipt, EthersLiquityConnection_1._getContracts(this._connection))) : lib_base_1._failedReceipt(rawReceipt) : lib_base_1._pendingReceipt;
      }
      async _waitForRawReceipt(confirmations) {
        try {
          return await this.rawSentTransaction.wait(confirmations);
        } catch (error) {
          if (error instanceof Error) {
            if (isTransactionFailedError(error)) {
              return error.receipt;
            }
            if (isTransactionReplacedError(error)) {
              if (error.cancelled) {
                throw new EthersTransactionCancelledError(error);
              } else {
                return error.receipt;
              }
            }
          }
          throw error;
        }
      }
      /** {@inheritDoc @liquity/lib-base#SentLiquityTransaction.getReceipt} */
      async getReceipt() {
        return this._receiptFrom(await this._waitForRawReceipt(0));
      }
      /**
       * {@inheritDoc @liquity/lib-base#SentLiquityTransaction.waitForReceipt}
       *
       * @throws
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      async waitForReceipt() {
        const receipt = this._receiptFrom(await this._waitForRawReceipt());
        assert_1.default(receipt.status !== "pending");
        return receipt;
      }
    };
    exports.SentEthersLiquityTransaction = SentEthersLiquityTransaction;
    var normalizeBorrowingOperationOptionalParams = (maxBorrowingRateOrOptionalParams, currentBorrowingRate) => {
      var _a, _b;
      if (maxBorrowingRateOrOptionalParams === void 0) {
        return {
          maxBorrowingRate: (_a = currentBorrowingRate === null || currentBorrowingRate === void 0 ? void 0 : currentBorrowingRate.add(defaultBorrowingRateSlippageTolerance)) !== null && _a !== void 0 ? _a : lib_base_1.Decimal.ZERO,
          borrowingFeeDecayToleranceMinutes: defaultBorrowingFeeDecayToleranceMinutes
        };
      } else if (typeof maxBorrowingRateOrOptionalParams === "number" || typeof maxBorrowingRateOrOptionalParams === "string" || maxBorrowingRateOrOptionalParams instanceof lib_base_1.Decimal) {
        return {
          maxBorrowingRate: lib_base_1.Decimal.from(maxBorrowingRateOrOptionalParams),
          borrowingFeeDecayToleranceMinutes: defaultBorrowingFeeDecayToleranceMinutes
        };
      } else {
        const { maxBorrowingRate, borrowingFeeDecayToleranceMinutes } = maxBorrowingRateOrOptionalParams;
        return {
          maxBorrowingRate: maxBorrowingRate !== void 0 ? lib_base_1.Decimal.from(maxBorrowingRate) : (_b = currentBorrowingRate === null || currentBorrowingRate === void 0 ? void 0 : currentBorrowingRate.add(defaultBorrowingRateSlippageTolerance)) !== null && _b !== void 0 ? _b : lib_base_1.Decimal.ZERO,
          borrowingFeeDecayToleranceMinutes: borrowingFeeDecayToleranceMinutes !== null && borrowingFeeDecayToleranceMinutes !== void 0 ? borrowingFeeDecayToleranceMinutes : defaultBorrowingFeeDecayToleranceMinutes
        };
      }
    };
    var PopulatedEthersLiquityTransaction = class {
      /** @internal */
      constructor(rawPopulatedTransaction, connection, parse, gasHeadroom) {
        this.rawPopulatedTransaction = rawPopulatedTransaction;
        this._connection = connection;
        this._parse = parse;
        if (gasHeadroom !== void 0) {
          this.gasHeadroom = gasHeadroom;
        }
      }
      /** {@inheritDoc @liquity/lib-base#PopulatedLiquityTransaction.send} */
      async send() {
        return new SentEthersLiquityTransaction(await EthersLiquityConnection_1._requireSigner(this._connection).sendTransaction(this.rawPopulatedTransaction), this._connection, this._parse);
      }
    };
    exports.PopulatedEthersLiquityTransaction = PopulatedEthersLiquityTransaction;
    var PopulatedEthersRedemption = class extends PopulatedEthersLiquityTransaction {
      /** @internal */
      constructor(rawPopulatedTransaction, connection, attemptedLUSDAmount, redeemableLUSDAmount, increaseAmountByMinimumNetDebt) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(connection);
        super(rawPopulatedTransaction, connection, ({ logs }) => troveManager.extractEvents(logs, "Redemption").map(({ args: { _ETHSent, _ETHFee, _actualLUSDAmount, _attemptedLUSDAmount } }) => ({
          attemptedLUSDAmount: _utils_1.decimalify(_attemptedLUSDAmount),
          actualLUSDAmount: _utils_1.decimalify(_actualLUSDAmount),
          collateralTaken: _utils_1.decimalify(_ETHSent),
          fee: _utils_1.decimalify(_ETHFee)
        }))[0]);
        this.attemptedLUSDAmount = attemptedLUSDAmount;
        this.redeemableLUSDAmount = redeemableLUSDAmount;
        this.isTruncated = redeemableLUSDAmount.lt(attemptedLUSDAmount);
        this._increaseAmountByMinimumNetDebt = increaseAmountByMinimumNetDebt;
      }
      /** {@inheritDoc @liquity/lib-base#PopulatedRedemption.increaseAmountByMinimumNetDebt} */
      increaseAmountByMinimumNetDebt(maxRedemptionRate) {
        if (!this._increaseAmountByMinimumNetDebt) {
          throw new Error("PopulatedEthersRedemption: increaseAmountByMinimumNetDebt() can only be called when amount is truncated");
        }
        return this._increaseAmountByMinimumNetDebt(maxRedemptionRate);
      }
    };
    exports.PopulatedEthersRedemption = PopulatedEthersRedemption;
    var PopulatableEthersLiquity = class {
      constructor(readable) {
        this._readable = readable;
      }
      _wrapSimpleTransaction(rawPopulatedTransaction) {
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, noDetails);
      }
      _wrapTroveChangeWithFees(params, rawPopulatedTransaction, gasHeadroom) {
        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {
          const [newTrove] = borrowerOperations.extractEvents(logs, "TroveUpdated").map(({ args: { _coll, _debt } }) => new lib_base_1.Trove(_utils_1.decimalify(_coll), _utils_1.decimalify(_debt)));
          const [fee] = borrowerOperations.extractEvents(logs, "LUSDBorrowingFeePaid").map(({ args: { _LUSDFee } }) => _utils_1.decimalify(_LUSDFee));
          return {
            params,
            newTrove,
            fee
          };
        }, gasHeadroom);
      }
      async _wrapTroveClosure(rawPopulatedTransaction) {
        const { activePool, lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs, from: userAddress }) => {
          const [repayLUSD] = lusdToken.extractEvents(logs, "Transfer").filter(({ args: { from, to } }) => from === userAddress && to === constants_1.AddressZero).map(({ args: { value } }) => _utils_1.decimalify(value));
          const [withdrawCollateral] = activePool.extractEvents(logs, "EtherSent").filter(({ args: { _to } }) => _to === userAddress).map(({ args: { _amount } }) => _utils_1.decimalify(_amount));
          return {
            params: repayLUSD.nonZero ? { withdrawCollateral, repayLUSD } : { withdrawCollateral }
          };
        });
      }
      _wrapLiquidation(rawPopulatedTransaction) {
        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {
          const liquidatedAddresses = troveManager.extractEvents(logs, "TroveLiquidated").map(({ args: { _borrower } }) => _borrower);
          const [totals] = troveManager.extractEvents(logs, "Liquidation").map(({ args: { _LUSDGasCompensation, _collGasCompensation, _liquidatedColl, _liquidatedDebt } }) => ({
            collateralGasCompensation: _utils_1.decimalify(_collGasCompensation),
            lusdGasCompensation: _utils_1.decimalify(_LUSDGasCompensation),
            totalLiquidated: new lib_base_1.Trove(_utils_1.decimalify(_liquidatedColl), _utils_1.decimalify(_liquidatedDebt))
          }));
          return {
            liquidatedAddresses,
            ...totals
          };
        });
      }
      _extractStabilityPoolGainsWithdrawalDetails(logs) {
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const [newLUSDDeposit] = stabilityPool.extractEvents(logs, "UserDepositChanged").map(({ args: { _newDeposit } }) => _utils_1.decimalify(_newDeposit));
        const [[collateralGain, lusdLoss]] = stabilityPool.extractEvents(logs, "ETHGainWithdrawn").map(({ args: { _ETH, _LUSDLoss } }) => [_utils_1.decimalify(_ETH), _utils_1.decimalify(_LUSDLoss)]);
        const [lqtyReward] = stabilityPool.extractEvents(logs, "LQTYPaidToDepositor").map(({ args: { _LQTY } }) => _utils_1.decimalify(_LQTY));
        return {
          lusdLoss,
          newLUSDDeposit,
          collateralGain,
          lqtyReward
        };
      }
      _wrapStabilityPoolGainsWithdrawal(rawPopulatedTransaction) {
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => this._extractStabilityPoolGainsWithdrawalDetails(logs));
      }
      _wrapStabilityDepositTopup(change, rawPopulatedTransaction) {
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => ({
          ...this._extractStabilityPoolGainsWithdrawalDetails(logs),
          change
        }));
      }
      async _wrapStabilityDepositWithdrawal(rawPopulatedTransaction) {
        const { stabilityPool, lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs, from: userAddress }) => {
          const gainsWithdrawalDetails = this._extractStabilityPoolGainsWithdrawalDetails(logs);
          const [withdrawLUSD] = lusdToken.extractEvents(logs, "Transfer").filter(({ args: { from, to } }) => from === stabilityPool.address && to === userAddress).map(({ args: { value } }) => _utils_1.decimalify(value));
          return {
            ...gainsWithdrawalDetails,
            change: { withdrawLUSD, withdrawAllLUSD: gainsWithdrawalDetails.newLUSDDeposit.isZero }
          };
        });
      }
      _wrapCollateralGainTransfer(rawPopulatedTransaction) {
        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {
          const [newTrove] = borrowerOperations.extractEvents(logs, "TroveUpdated").map(({ args: { _coll, _debt } }) => new lib_base_1.Trove(_utils_1.decimalify(_coll), _utils_1.decimalify(_debt)));
          return {
            ...this._extractStabilityPoolGainsWithdrawalDetails(logs),
            newTrove
          };
        });
      }
      _prepareOverrides(overrides) {
        return { ...overrides, from: EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides) };
      }
      async _findHintsForNominalCollateralRatio(nominalCollateralRatio, ownAddress) {
        const { sortedTroves, hintHelpers } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const numberOfTroves = await this._readable.getNumberOfTroves();
        if (!numberOfTroves) {
          return [constants_1.AddressZero, constants_1.AddressZero];
        }
        if (nominalCollateralRatio.infinite) {
          return [constants_1.AddressZero, await sortedTroves.getFirst()];
        }
        const totalNumberOfTrials = Math.ceil(10 * Math.sqrt(numberOfTroves));
        const [firstTrials, ...restOfTrials] = generateTrials(totalNumberOfTrials);
        const collectApproxHint = ({ latestRandomSeed, results: results2 }, numberOfTrials) => hintHelpers.getApproxHint(nominalCollateralRatio.hex, numberOfTrials, latestRandomSeed).then(({ latestRandomSeed: latestRandomSeed2, ...result }) => ({
          latestRandomSeed: latestRandomSeed2,
          results: [...results2, result]
        }));
        const { results } = await restOfTrials.reduce((p, numberOfTrials) => p.then((state) => collectApproxHint(state, numberOfTrials)), collectApproxHint({ latestRandomSeed: randomInteger(), results: [] }, firstTrials));
        const { hintAddress } = results.reduce((a, b) => a.diff.lt(b.diff) ? a : b);
        let [prev, next] = await sortedTroves.findInsertPosition(nominalCollateralRatio.hex, hintAddress, hintAddress);
        if (ownAddress) {
          if (prev === ownAddress) {
            prev = await sortedTroves.getPrev(prev);
          } else if (next === ownAddress) {
            next = await sortedTroves.getNext(next);
          }
        }
        if (prev === constants_1.AddressZero) {
          prev = next;
        } else if (next === constants_1.AddressZero) {
          next = prev;
        }
        return [prev, next];
      }
      async _findHints(trove, ownAddress) {
        if (trove instanceof lib_base_1.TroveWithPendingRedistribution) {
          throw new Error("Rewards must be applied to this Trove");
        }
        return this._findHintsForNominalCollateralRatio(trove._nominalCollateralRatio, ownAddress);
      }
      async _findRedemptionHints(amount) {
        const { hintHelpers } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const price = await this._readable.getPrice();
        const { firstRedemptionHint, partialRedemptionHintNICR, truncatedLUSDamount } = await hintHelpers.getRedemptionHints(amount.hex, price.hex, exports._redeemMaxIterations);
        const [partialRedemptionUpperHint, partialRedemptionLowerHint] = partialRedemptionHintNICR.isZero() ? [constants_1.AddressZero, constants_1.AddressZero] : await this._findHintsForNominalCollateralRatio(
          _utils_1.decimalify(partialRedemptionHintNICR)
          // XXX: if we knew the partially redeemed Trove's address, we'd pass it here
        );
        return [
          _utils_1.decimalify(truncatedLUSDamount),
          firstRedemptionHint,
          partialRedemptionUpperHint,
          partialRedemptionLowerHint,
          partialRedemptionHintNICR
        ];
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.openTrove} */
      async openTrove(params, maxBorrowingRateOrOptionalParams, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const normalizedParams = lib_base_1._normalizeTroveCreation(params);
        const { depositCollateral, borrowLUSD } = normalizedParams;
        const [fees, blockTimestamp, total, price] = await Promise.all([
          this._readable._getFeesFactory(),
          this._readable._getBlockTimestamp(),
          this._readable.getTotal(),
          this._readable.getPrice()
        ]);
        const recoveryMode = total.collateralRatioIsBelowCritical(price);
        const decayBorrowingRate = (seconds) => fees(blockTimestamp + seconds, recoveryMode).borrowingRate();
        const currentBorrowingRate = decayBorrowingRate(0);
        const newTrove = lib_base_1.Trove.create(normalizedParams, currentBorrowingRate);
        const hints = await this._findHints(newTrove);
        const { maxBorrowingRate, borrowingFeeDecayToleranceMinutes } = normalizeBorrowingOperationOptionalParams(maxBorrowingRateOrOptionalParams, currentBorrowingRate);
        const txParams = (borrowLUSD2) => [
          maxBorrowingRate.hex,
          borrowLUSD2.hex,
          ...hints,
          { value: depositCollateral.hex, ...overrides }
        ];
        let gasHeadroom;
        if ((overrides === null || overrides === void 0 ? void 0 : overrides.gasLimit) === void 0) {
          const decayedBorrowingRate = decayBorrowingRate(60 * borrowingFeeDecayToleranceMinutes);
          const decayedTrove = lib_base_1.Trove.create(normalizedParams, decayedBorrowingRate);
          const { borrowLUSD: borrowLUSDSimulatingDecay } = lib_base_1.Trove.recreate(decayedTrove, currentBorrowingRate);
          if (decayedTrove.debt.lt(lib_base_1.LUSD_MINIMUM_DEBT)) {
            throw new Error(`Trove's debt might fall below ${lib_base_1.LUSD_MINIMUM_DEBT} within ${borrowingFeeDecayToleranceMinutes} minutes`);
          }
          const [gasNow, gasLater] = await Promise.all([
            borrowerOperations.estimateGas.openTrove(...txParams(borrowLUSD)),
            borrowerOperations.estimateGas.openTrove(...txParams(borrowLUSDSimulatingDecay))
          ]);
          const gasLimit = addGasForBaseRateUpdate(borrowingFeeDecayToleranceMinutes)(bigNumberMax(addGasForPotentialListTraversal(gasNow), gasLater));
          gasHeadroom = gasLimit.sub(gasNow).toNumber();
          overrides = { ...overrides, gasLimit };
        }
        return this._wrapTroveChangeWithFees(normalizedParams, await borrowerOperations.populateTransaction.openTrove(...txParams(borrowLUSD)), gasHeadroom);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.closeTrove} */
      async closeTrove(overrides) {
        overrides = this._prepareOverrides(overrides);
        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapTroveClosure(await borrowerOperations.estimateAndPopulate.closeTrove(overrides, id));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.depositCollateral} */
      depositCollateral(amount, overrides) {
        return this.adjustTrove({ depositCollateral: amount }, void 0, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawCollateral} */
      withdrawCollateral(amount, overrides) {
        return this.adjustTrove({ withdrawCollateral: amount }, void 0, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.borrowLUSD} */
      borrowLUSD(amount, maxBorrowingRate, overrides) {
        return this.adjustTrove({ borrowLUSD: amount }, maxBorrowingRate, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.repayLUSD} */
      repayLUSD(amount, overrides) {
        return this.adjustTrove({ repayLUSD: amount }, void 0, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.adjustTrove} */
      async adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const normalizedParams = lib_base_1._normalizeTroveAdjustment(params);
        const { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD } = normalizedParams;
        const [trove, feeVars] = await Promise.all([
          this._readable.getTrove(overrides.from),
          borrowLUSD && _utils_1.promiseAllValues({
            fees: this._readable._getFeesFactory(),
            blockTimestamp: this._readable._getBlockTimestamp(),
            total: this._readable.getTotal(),
            price: this._readable.getPrice()
          })
        ]);
        const decayBorrowingRate = (seconds) => feeVars === null || feeVars === void 0 ? void 0 : feeVars.fees(feeVars.blockTimestamp + seconds, feeVars.total.collateralRatioIsBelowCritical(feeVars.price)).borrowingRate();
        const currentBorrowingRate = decayBorrowingRate(0);
        const adjustedTrove = trove.adjust(normalizedParams, currentBorrowingRate);
        const hints = await this._findHints(adjustedTrove, overrides.from);
        const { maxBorrowingRate, borrowingFeeDecayToleranceMinutes } = normalizeBorrowingOperationOptionalParams(maxBorrowingRateOrOptionalParams, currentBorrowingRate);
        const txParams = (borrowLUSD2) => {
          var _a;
          return [
            maxBorrowingRate.hex,
            (withdrawCollateral !== null && withdrawCollateral !== void 0 ? withdrawCollateral : lib_base_1.Decimal.ZERO).hex,
            ((_a = borrowLUSD2 !== null && borrowLUSD2 !== void 0 ? borrowLUSD2 : repayLUSD) !== null && _a !== void 0 ? _a : lib_base_1.Decimal.ZERO).hex,
            !!borrowLUSD2,
            ...hints,
            { value: depositCollateral === null || depositCollateral === void 0 ? void 0 : depositCollateral.hex, ...overrides }
          ];
        };
        let gasHeadroom;
        if (overrides.gasLimit === void 0) {
          const decayedBorrowingRate = decayBorrowingRate(60 * borrowingFeeDecayToleranceMinutes);
          const decayedTrove = trove.adjust(normalizedParams, decayedBorrowingRate);
          const { borrowLUSD: borrowLUSDSimulatingDecay } = trove.adjustTo(decayedTrove, currentBorrowingRate);
          if (decayedTrove.debt.lt(lib_base_1.LUSD_MINIMUM_DEBT)) {
            throw new Error(`Trove's debt might fall below ${lib_base_1.LUSD_MINIMUM_DEBT} within ${borrowingFeeDecayToleranceMinutes} minutes`);
          }
          const [gasNow, gasLater] = await Promise.all([
            borrowerOperations.estimateGas.adjustTrove(...txParams(borrowLUSD)),
            borrowLUSD && borrowerOperations.estimateGas.adjustTrove(...txParams(borrowLUSDSimulatingDecay))
          ]);
          let gasLimit = bigNumberMax(addGasForPotentialListTraversal(gasNow), gasLater);
          if (borrowLUSD) {
            gasLimit = addGasForBaseRateUpdate(borrowingFeeDecayToleranceMinutes)(gasLimit);
          }
          gasHeadroom = gasLimit.sub(gasNow).toNumber();
          overrides = { ...overrides, gasLimit };
        }
        return this._wrapTroveChangeWithFees(normalizedParams, await borrowerOperations.populateTransaction.adjustTrove(...txParams(borrowLUSD)), gasHeadroom);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.claimCollateralSurplus} */
      async claimCollateralSurplus(overrides) {
        overrides = this._prepareOverrides(overrides);
        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await borrowerOperations.estimateAndPopulate.claimCollateral(overrides, id));
      }
      /** @internal */
      async setPrice(price, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { priceFeed } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        if (!contracts_1._priceFeedIsTestnet(priceFeed)) {
          throw new Error("setPrice() unavailable on this deployment of Liquity");
        }
        return this._wrapSimpleTransaction(await priceFeed.estimateAndPopulate.setPrice(overrides, id, lib_base_1.Decimal.from(price).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.liquidate} */
      async liquidate(address, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        if (Array.isArray(address)) {
          return this._wrapLiquidation(await troveManager.estimateAndPopulate.batchLiquidateTroves(overrides, addGasForLQTYIssuance, address));
        } else {
          return this._wrapLiquidation(await troveManager.estimateAndPopulate.liquidate(overrides, addGasForLQTYIssuance, address));
        }
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.liquidateUpTo} */
      async liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapLiquidation(await troveManager.estimateAndPopulate.liquidateTroves(overrides, addGasForLQTYIssuance, maximumNumberOfTrovesToLiquidate));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.depositLUSDInStabilityPool} */
      async depositLUSDInStabilityPool(amount, frontendTag, overrides) {
        var _a;
        overrides = this._prepareOverrides(overrides);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const depositLUSD = lib_base_1.Decimal.from(amount);
        return this._wrapStabilityDepositTopup({ depositLUSD }, await stabilityPool.estimateAndPopulate.provideToSP(overrides, addGasForLQTYIssuance, depositLUSD.hex, (_a = frontendTag !== null && frontendTag !== void 0 ? frontendTag : this._readable.connection.frontendTag) !== null && _a !== void 0 ? _a : constants_1.AddressZero));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawLUSDFromStabilityPool} */
      async withdrawLUSDFromStabilityPool(amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapStabilityDepositWithdrawal(await stabilityPool.estimateAndPopulate.withdrawFromSP(overrides, addGasForLQTYIssuance, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawGainsFromStabilityPool} */
      async withdrawGainsFromStabilityPool(overrides) {
        overrides = this._prepareOverrides(overrides);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapStabilityPoolGainsWithdrawal(await stabilityPool.estimateAndPopulate.withdrawFromSP(overrides, addGasForLQTYIssuance, lib_base_1.Decimal.ZERO.hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.transferCollateralGainToTrove} */
      async transferCollateralGainToTrove(overrides) {
        overrides = this._prepareOverrides(overrides);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const [initialTrove, stabilityDeposit] = await Promise.all([
          this._readable.getTrove(overrides.from),
          this._readable.getStabilityDeposit(overrides.from)
        ]);
        const finalTrove = initialTrove.addCollateral(stabilityDeposit.collateralGain);
        return this._wrapCollateralGainTransfer(await stabilityPool.estimateAndPopulate.withdrawETHGainToTrove(overrides, compose(addGasForPotentialListTraversal, addGasForLQTYIssuance), ...await this._findHints(finalTrove, overrides.from)));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.sendLUSD} */
      async sendLUSD(toAddress, amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await lusdToken.estimateAndPopulate.transfer(overrides, id, toAddress, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.sendLQTY} */
      async sendLQTY(toAddress, amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { lqtyToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await lqtyToken.estimateAndPopulate.transfer(overrides, id, toAddress, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.redeemLUSD} */
      async redeemLUSD(amount, maxRedemptionRate, overrides) {
        const preparedOverrides = this._prepareOverrides(overrides);
        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        const attemptedLUSDAmount = lib_base_1.Decimal.from(amount);
        const [fees, total, [truncatedAmount, firstRedemptionHint, ...partialHints]] = await Promise.all([
          this._readable.getFees(),
          this._readable.getTotal(),
          this._findRedemptionHints(attemptedLUSDAmount)
        ]);
        if (truncatedAmount.isZero) {
          throw new Error(`redeemLUSD: amount too low to redeem (try at least ${lib_base_1.LUSD_MINIMUM_NET_DEBT})`);
        }
        const defaultMaxRedemptionRate = (amount2) => lib_base_1.Decimal.min(fees.redemptionRate(amount2.div(total.debt)).add(defaultRedemptionRateSlippageTolerance), lib_base_1.Decimal.ONE);
        const populateRedemption = async (attemptedLUSDAmount2, maxRedemptionRate2, truncatedAmount2 = attemptedLUSDAmount2, partialHints2 = [constants_1.AddressZero, constants_1.AddressZero, 0]) => {
          const maxRedemptionRateOrDefault = maxRedemptionRate2 !== void 0 ? lib_base_1.Decimal.from(maxRedemptionRate2) : defaultMaxRedemptionRate(truncatedAmount2);
          return new PopulatedEthersRedemption(await troveManager.estimateAndPopulate.redeemCollateral(preparedOverrides, addGasForBaseRateUpdate(), truncatedAmount2.hex, firstRedemptionHint, ...partialHints2, exports._redeemMaxIterations, maxRedemptionRateOrDefault.hex), this._readable.connection, attemptedLUSDAmount2, truncatedAmount2, truncatedAmount2.lt(attemptedLUSDAmount2) ? (newMaxRedemptionRate) => populateRedemption(truncatedAmount2.add(lib_base_1.LUSD_MINIMUM_NET_DEBT), newMaxRedemptionRate !== null && newMaxRedemptionRate !== void 0 ? newMaxRedemptionRate : maxRedemptionRate2) : void 0);
        };
        return populateRedemption(attemptedLUSDAmount, maxRedemptionRate, truncatedAmount, partialHints);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.stakeLQTY} */
      async stakeLQTY(amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await lqtyStaking.estimateAndPopulate.stake(overrides, id, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.unstakeLQTY} */
      async unstakeLQTY(amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await lqtyStaking.estimateAndPopulate.unstake(overrides, id, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawGainsFromStaking} */
      withdrawGainsFromStaking(overrides) {
        return this.unstakeLQTY(lib_base_1.Decimal.ZERO, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.registerFrontend} */
      async registerFrontend(kickbackRate, overrides) {
        console.debug("lib-ethers: registerFrontend()", kickbackRate, typeof kickbackRate);
        overrides = this._prepareOverrides(overrides);
        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        console.debug("lib-ethers: registerFrontend() 更改", kickbackRate, lib_base_1.Decimal.from(kickbackRate));
        return this._wrapSimpleTransaction(await stabilityPool.estimateAndPopulate.registerFrontEnd(overrides, id, lib_base_1.Decimal.from(kickbackRate).hex));
      }
      /** @internal */
      async _mintUniToken(amount, address, overrides) {
        address !== null && address !== void 0 ? address : address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides);
        overrides = this._prepareOverrides(overrides);
        const { uniToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        if (!contracts_1._uniTokenIsMock(uniToken)) {
          throw new Error("_mintUniToken() unavailable on this deployment of Liquity");
        }
        return this._wrapSimpleTransaction(await uniToken.estimateAndPopulate.mint(overrides, id, address, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.approveUniTokens} */
      async approveUniTokens(allowance, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { uniToken, unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await uniToken.estimateAndPopulate.approve(overrides, id, unipool.address, lib_base_1.Decimal.from(allowance !== null && allowance !== void 0 ? allowance : lib_base_1.Decimal.INFINITY).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.stakeUniTokens} */
      async stakeUniTokens(amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.stake(overrides, addGasForUnipoolRewardUpdate, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.unstakeUniTokens} */
      async unstakeUniTokens(amount, overrides) {
        overrides = this._prepareOverrides(overrides);
        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.withdraw(overrides, addGasForUnipoolRewardUpdate, lib_base_1.Decimal.from(amount).hex));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawLQTYRewardFromLiquidityMining} */
      async withdrawLQTYRewardFromLiquidityMining(overrides) {
        overrides = this._prepareOverrides(overrides);
        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.claimReward(overrides, addGasForUnipoolRewardUpdate));
      }
      /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.exitLiquidityMining} */
      async exitLiquidityMining(overrides) {
        overrides = this._prepareOverrides(overrides);
        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);
        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.withdrawAndClaim(overrides, addGasForUnipoolRewardUpdate));
      }
    };
    exports.PopulatableEthersLiquity = PopulatableEthersLiquity;
  }
});

// ../lib-ethers/dist/src/SendableEthersLiquity.js
var require_SendableEthersLiquity = __commonJS({
  "../lib-ethers/dist/src/SendableEthersLiquity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendableEthersLiquity = void 0;
    var sendTransaction = (tx) => tx.send();
    var SendableEthersLiquity = class {
      constructor(populatable) {
        this._populate = populatable;
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.openTrove} */
      async openTrove(params, maxBorrowingRateOrOptionalParams, overrides) {
        return this._populate.openTrove(params, maxBorrowingRateOrOptionalParams, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.closeTrove} */
      closeTrove(overrides) {
        return this._populate.closeTrove(overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.adjustTrove} */
      adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides) {
        return this._populate.adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.depositCollateral} */
      depositCollateral(amount, overrides) {
        return this._populate.depositCollateral(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawCollateral} */
      withdrawCollateral(amount, overrides) {
        return this._populate.withdrawCollateral(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.borrowLUSD} */
      borrowLUSD(amount, maxBorrowingRate, overrides) {
        return this._populate.borrowLUSD(amount, maxBorrowingRate, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.repayLUSD} */
      repayLUSD(amount, overrides) {
        return this._populate.repayLUSD(amount, overrides).then(sendTransaction);
      }
      /** @internal */
      setPrice(price, overrides) {
        return this._populate.setPrice(price, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.liquidate} */
      liquidate(address, overrides) {
        return this._populate.liquidate(address, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.liquidateUpTo} */
      liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {
        return this._populate.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.depositLUSDInStabilityPool} */
      depositLUSDInStabilityPool(amount, frontendTag, overrides) {
        return this._populate.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawLUSDFromStabilityPool} */
      withdrawLUSDFromStabilityPool(amount, overrides) {
        return this._populate.withdrawLUSDFromStabilityPool(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawGainsFromStabilityPool} */
      withdrawGainsFromStabilityPool(overrides) {
        return this._populate.withdrawGainsFromStabilityPool(overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.transferCollateralGainToTrove} */
      transferCollateralGainToTrove(overrides) {
        return this._populate.transferCollateralGainToTrove(overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.sendLUSD} */
      sendLUSD(toAddress, amount, overrides) {
        return this._populate.sendLUSD(toAddress, amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.sendLQTY} */
      sendLQTY(toAddress, amount, overrides) {
        return this._populate.sendLQTY(toAddress, amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.redeemLUSD} */
      redeemLUSD(amount, maxRedemptionRate, overrides) {
        return this._populate.redeemLUSD(amount, maxRedemptionRate, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.claimCollateralSurplus} */
      claimCollateralSurplus(overrides) {
        return this._populate.claimCollateralSurplus(overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.stakeLQTY} */
      stakeLQTY(amount, overrides) {
        return this._populate.stakeLQTY(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.unstakeLQTY} */
      unstakeLQTY(amount, overrides) {
        return this._populate.unstakeLQTY(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawGainsFromStaking} */
      withdrawGainsFromStaking(overrides) {
        return this._populate.withdrawGainsFromStaking(overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.registerFrontend} */
      registerFrontend(kickbackRate, overrides) {
        return this._populate.registerFrontend(kickbackRate, overrides).then(sendTransaction);
      }
      /** @internal */
      _mintUniToken(amount, address, overrides) {
        return this._populate._mintUniToken(amount, address, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.approveUniTokens} */
      approveUniTokens(allowance, overrides) {
        return this._populate.approveUniTokens(allowance, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.stakeUniTokens} */
      stakeUniTokens(amount, overrides) {
        return this._populate.stakeUniTokens(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.unstakeUniTokens} */
      unstakeUniTokens(amount, overrides) {
        return this._populate.unstakeUniTokens(amount, overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawLQTYRewardFromLiquidityMining} */
      withdrawLQTYRewardFromLiquidityMining(overrides) {
        return this._populate.withdrawLQTYRewardFromLiquidityMining(overrides).then(sendTransaction);
      }
      /** {@inheritDoc @liquity/lib-base#SendableLiquity.exitLiquidityMining} */
      exitLiquidityMining(overrides) {
        return this._populate.exitLiquidityMining(overrides).then(sendTransaction);
      }
    };
    exports.SendableEthersLiquity = SendableEthersLiquity;
  }
});

// ../lib-ethers/dist/src/EthersLiquity.js
var require_EthersLiquity = __commonJS({
  "../lib-ethers/dist/src/EthersLiquity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EthersLiquity = exports.EthersTransactionFailedError = void 0;
    var lib_base_1 = require_dist();
    var EthersLiquityConnection_1 = require_EthersLiquityConnection();
    var PopulatableEthersLiquity_1 = require_PopulatableEthersLiquity();
    var ReadableEthersLiquity_1 = require_ReadableEthersLiquity();
    var SendableEthersLiquity_1 = require_SendableEthersLiquity();
    var EthersTransactionFailedError = class extends lib_base_1.TransactionFailedError {
      constructor(message, failedReceipt) {
        super("EthersTransactionFailedError", message, failedReceipt);
      }
    };
    exports.EthersTransactionFailedError = EthersTransactionFailedError;
    var waitForSuccess = async (tx) => {
      const receipt = await tx.waitForReceipt();
      if (receipt.status !== "succeeded") {
        throw new EthersTransactionFailedError("Transaction failed", receipt);
      }
      return receipt.details;
    };
    var EthersLiquity = class _EthersLiquity {
      /** @internal */
      constructor(readable) {
        this._readable = readable;
        this.connection = readable.connection;
        this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);
        this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);
      }
      /** @internal */
      static _from(connection) {
        if (EthersLiquityConnection_1._usingStore(connection)) {
          return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));
        } else {
          return new _EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));
        }
      }
      static async connect(signerOrProvider, optionalParams) {
        return _EthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));
      }
      hasStore() {
        return false;
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */
      getTotalRedistributed(overrides) {
        return this._readable.getTotalRedistributed(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */
      getTroveBeforeRedistribution(address, overrides) {
        return this._readable.getTroveBeforeRedistribution(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */
      getTrove(address, overrides) {
        return this._readable.getTrove(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */
      getNumberOfTroves(overrides) {
        return this._readable.getNumberOfTroves(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */
      getPrice(overrides) {
        return this._readable.getPrice(overrides);
      }
      /** @internal */
      _getActivePool(overrides) {
        return this._readable._getActivePool(overrides);
      }
      /** @internal */
      _getDefaultPool(overrides) {
        return this._readable._getDefaultPool(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */
      getTotal(overrides) {
        return this._readable.getTotal(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */
      getStabilityDeposit(address, overrides) {
        return this._readable.getStabilityDeposit(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */
      getRemainingStabilityPoolLQTYReward(overrides) {
        return this._readable.getRemainingStabilityPoolLQTYReward(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */
      getLUSDInStabilityPool(overrides) {
        return this._readable.getLUSDInStabilityPool(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */
      getLUSDBalance(address, overrides) {
        return this._readable.getLUSDBalance(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */
      getLQTYBalance(address, overrides) {
        return this._readable.getLQTYBalance(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */
      getUniTokenBalance(address, overrides) {
        return this._readable.getUniTokenBalance(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */
      getUniTokenAllowance(address, overrides) {
        return this._readable.getUniTokenAllowance(address, overrides);
      }
      /** @internal */
      _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {
        return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */
      getRemainingLiquidityMiningLQTYReward(overrides) {
        return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */
      getLiquidityMiningStake(address, overrides) {
        return this._readable.getLiquidityMiningStake(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */
      getTotalStakedUniTokens(overrides) {
        return this._readable.getTotalStakedUniTokens(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */
      getLiquidityMiningLQTYReward(address, overrides) {
        return this._readable.getLiquidityMiningLQTYReward(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */
      getCollateralSurplusBalance(address, overrides) {
        return this._readable.getCollateralSurplusBalance(address, overrides);
      }
      getTroves(params, overrides) {
        return this._readable.getTroves(params, overrides);
      }
      /** @internal */
      _getBlockTimestamp(blockTag) {
        return this._readable._getBlockTimestamp(blockTag);
      }
      /** @internal */
      _getFeesFactory(overrides) {
        return this._readable._getFeesFactory(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */
      getFees(overrides) {
        return this._readable.getFees(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */
      getLQTYStake(address, overrides) {
        return this._readable.getLQTYStake(address, overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */
      getTotalStakedLQTY(overrides) {
        return this._readable.getTotalStakedLQTY(overrides);
      }
      /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */
      getFrontendStatus(address, overrides) {
        return this._readable.getFrontendStatus(address, overrides);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.openTrove}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      openTrove(params, maxBorrowingRateOrOptionalParams, overrides) {
        return this.send.openTrove(params, maxBorrowingRateOrOptionalParams, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.closeTrove}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      closeTrove(overrides) {
        return this.send.closeTrove(overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.adjustTrove}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides) {
        return this.send.adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositCollateral}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      depositCollateral(amount, overrides) {
        return this.send.depositCollateral(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawCollateral}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      withdrawCollateral(amount, overrides) {
        return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.borrowLUSD}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      borrowLUSD(amount, maxBorrowingRate, overrides) {
        return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.repayLUSD}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      repayLUSD(amount, overrides) {
        return this.send.repayLUSD(amount, overrides).then(waitForSuccess);
      }
      /** @internal */
      setPrice(price, overrides) {
        return this.send.setPrice(price, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidate}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      liquidate(address, overrides) {
        return this.send.liquidate(address, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidateUpTo}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {
        return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      depositLUSDInStabilityPool(amount, frontendTag, overrides) {
        return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      withdrawLUSDFromStabilityPool(amount, overrides) {
        return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      withdrawGainsFromStabilityPool(overrides) {
        return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.transferCollateralGainToTrove}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      transferCollateralGainToTrove(overrides) {
        return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLUSD}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      sendLUSD(toAddress, amount, overrides) {
        return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLQTY}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      sendLQTY(toAddress, amount, overrides) {
        return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.redeemLUSD}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      redeemLUSD(amount, maxRedemptionRate, overrides) {
        return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.claimCollateralSurplus}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      claimCollateralSurplus(overrides) {
        return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeLQTY}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      stakeLQTY(amount, overrides) {
        return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeLQTY}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      unstakeLQTY(amount, overrides) {
        return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStaking}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      withdrawGainsFromStaking(overrides) {
        return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.registerFrontend}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      registerFrontend(kickbackRate, overrides) {
        return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);
      }
      /** @internal */
      _mintUniToken(amount, address, overrides) {
        return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.approveUniTokens}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      approveUniTokens(allowance, overrides) {
        return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeUniTokens}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      stakeUniTokens(amount, overrides) {
        return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeUniTokens}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      unstakeUniTokens(amount, overrides) {
        return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      withdrawLQTYRewardFromLiquidityMining(overrides) {
        return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);
      }
      /**
       * {@inheritDoc @liquity/lib-base#TransactableLiquity.exitLiquidityMining}
       *
       * @throws
       * Throws {@link EthersTransactionFailedError} in case of transaction failure.
       * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.
       */
      exitLiquidityMining(overrides) {
        return this.send.exitLiquidityMining(overrides).then(waitForSuccess);
      }
    };
    exports.EthersLiquity = EthersLiquity;
    var _EthersLiquityWithStore = class extends EthersLiquity {
      constructor(readable) {
        super(readable);
        this.store = readable.store;
      }
      hasStore(store) {
        return store === void 0 || store === this.connection.useStore;
      }
    };
  }
});

// ../lib-ethers/dist/index.js
var require_dist2 = __commonJS({
  "../lib-ethers/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnsupportedNetworkError = exports._connectByChainId = void 0;
    var EthersLiquityConnection_1 = require_EthersLiquityConnection();
    Object.defineProperty(exports, "_connectByChainId", { enumerable: true, get: function() {
      return EthersLiquityConnection_1._connectByChainId;
    } });
    Object.defineProperty(exports, "UnsupportedNetworkError", { enumerable: true, get: function() {
      return EthersLiquityConnection_1.UnsupportedNetworkError;
    } });
    __exportStar(require_types(), exports);
    __exportStar(require_ReadableEthersLiquity(), exports);
    __exportStar(require_ObservableEthersLiquity(), exports);
    __exportStar(require_BlockPolledLiquityStore(), exports);
    __exportStar(require_PopulatableEthersLiquity(), exports);
    __exportStar(require_SendableEthersLiquity(), exports);
    __exportStar(require_EthersLiquity(), exports);
  }
});
export default require_dist2();
//# sourceMappingURL=@liquity_lib-ethers.js.map
